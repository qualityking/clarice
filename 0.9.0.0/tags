!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDED	base/Order.h	/^		ADDED = 'A',$/;"	e	enum:base::OrderAction
ALL_CALLBACKS	base/BaseCommon.h	/^		ALL_CALLBACKS	= 0xFFFF	\/\/ 0XFFFF$/;"	e	enum:base::PlaybackMode::Callback
ALL_CALLBACKS	base/BaseCommon.h	100;"	d
ALPHANUM	base/BaseCommon.h	/^        ALPHANUM = 1,$/;"	e	enum:base::IDType
AR	infra/gzstream/Makefile	/^AR       = ar cr$/;"	m
ASSERT	base/BaseCommon.h	15;"	d
AUCTION	base/Status.h	/^		AUCTION	= 3,$/;"	m	class:base::InstrState
AUCTION_CLOSE	base/Status.h	/^		AUCTION_CLOSE	= 7,$/;"	m	class:base::InstrState
AUCTION_INTRA	base/Status.h	/^		AUCTION_INTRA	= 5,$/;"	m	class:base::InstrState
AUCTION_OPEN	base/Status.h	/^		AUCTION_OPEN	= 4,$/;"	m	class:base::InstrState
AUCTION_VOLA	base/Status.h	/^		AUCTION_VOLA	= 6,$/;"	m	class:base::InstrState
AUTOMATICALLY	infra/thread/Thread.h	/^		AUTOMATICALLY,$/;"	e	enum:infra::BindThreads
Add	base/Order.h	/^inline void Order::Add(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double px, uint32_t size, Side side, uint64_t orderID)$/;"	f	class:Order
AtomicLock	infra/lock/Lock.cpp	/^AtomicLock<T>::AtomicLock(T &counter)$/;"	f	class:AtomicLock
AtomicLock	infra/lock/Lock.h	/^	class AtomicLock$/;"	c	namespace:infra
BIG_ENDIAN	infra/judy/Judy.cpp	59;"	d	file:
BIG_ENDIAN	infra/judy/JudyCore.cpp	59;"	d	file:
BOOK	base/BaseCommon.h	/^		BOOK			= 0x0006,	\/\/ 0x06 = ORDER(2) + BOOK(4)$/;"	e	enum:base::PlaybackMode::Callback
BOOK_UPDATE	base/Base.h	/^		BOOK_UPDATE	= 'B',$/;"	e	enum:base::UpdateType
BOTH_SIDE	base/Quote.h	/^		BOTH_SIDE	= 1,$/;"	e	enum:base::QuoteFill
BUY	base/BaseCommon.h	/^		BUY = 'B',$/;"	e	enum:base::Side
BYTE_ORDER	infra/judy/Judy.cpp	51;"	d	file:
BYTE_ORDER	infra/judy/Judy.cpp	55;"	d	file:
BYTE_ORDER	infra/judy/JudyCore.cpp	51;"	d	file:
BYTE_ORDER	infra/judy/JudyCore.cpp	55;"	d	file:
Base	base/Base.h	/^			inline Base(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, UpdateType type)$/;"	f	class:base::Base
Base	base/Base.h	/^			inline Base(Subscription *sub, UpdateType type)$/;"	f	class:base::Base
Base	base/Base.h	/^	class Base$/;"	c	namespace:base
BindThreads	infra/thread/Thread.h	/^	enum BindThreads $/;"	g	namespace:infra
Book	base/Book.cpp	/^Book::Book(Subscription *sub)$/;"	f	class:Book
Book	base/Book.h	/^	class Book : public Base$/;"	c	namespace:base
BookAlloc	base/Book.h	/^				BookAlloc (const BookAlloc<U>&) throw() {$/;"	f	class:base::BookAlloc
BookAlloc	base/Book.h	/^			BookAlloc() throw()$/;"	f	class:base::BookAlloc
BookAlloc	base/Book.h	/^			BookAlloc(const BookAlloc&) throw() {$/;"	f	class:base::BookAlloc
BookAlloc	base/Book.h	/^	class BookAlloc $/;"	c	namespace:base
BoostElementState	infra/containers/spsc/BoostSPSCQueue.h	/^enum BoostElementState $/;"	g	namespace:infra
BoostElementState	infra/containers/spsc/BoostSPSCQueue_with.h	/^enum BoostElementState $/;"	g	namespace:infra
BoostElementState	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^enum BoostElementState $/;"	g	namespace:infra
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue.h	/^		BoostSPSCQueue() : head_(0), tail_(0) {}$/;"	f	class:infra::BoostSPSCQueue
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue.h	/^class BoostSPSCQueue $/;"	c	namespace:infra
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue_with.h	/^		BoostSPSCQueue() : head_(0), tail_(0) {}$/;"	f	class:infra::BoostSPSCQueue
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue_with.h	/^class BoostSPSCQueue $/;"	c	namespace:infra
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		BoostSPSCQueue() : head_(0), tail_(0) {}$/;"	f	class:infra::BoostSPSCQueue
BoostSPSCQueue	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^class BoostSPSCQueue $/;"	c	namespace:infra
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue.h	/^		BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue.h	/^		BoostSPSCQueueElement(const BoostSPSCQueueElement &rhs)$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue.h	/^class BoostSPSCQueueElement$/;"	c	namespace:infra
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_with.h	/^		BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_with.h	/^		BoostSPSCQueueElement(const BoostSPSCQueueElement &rhs)$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_with.h	/^class BoostSPSCQueueElement$/;"	c	namespace:infra
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		BoostSPSCQueueElement(const BoostSPSCQueueElement &rhs)$/;"	f	class:infra::BoostSPSCQueueElement
BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^class BoostSPSCQueueElement$/;"	c	namespace:infra
CHANGE_UNKNOWN	base/Quote.h	/^		CHANGE_UNKNOWN = 0,$/;"	e	enum:base::QuoteChange
CHF	base/ProductInfo.h	/^        CHF		= 4		\/\/ SWISS FRANK$/;"	e	enum:base::Currency
CLARICE_HEADER	base/BaseCommon.cpp	/^const char *CLARICE_HEADER = "CLARICE_FEEDS__RECORD___";$/;"	v
CLARICE_HEADER	base/BaseCommon.h	/^	extern "C" const char *CLARICE_HEADER;$/;"	m	namespace:base
CLEAR_CALLBACK	base/BaseCommon.h	102;"	d
CLEAR_CALLBACKS	base/BaseCommon.h	99;"	d
CLOSED	base/Status.h	/^		CLOSED		= 9,$/;"	m	class:base::InstrState
CPPFLAGS	infra/gzstream/Makefile	/^CPPFLAGS = -I. $/;"	m
CRITICAL	infra/InfraCommon.h	/^			CRITICAL  = 7, \/\/\/< System soon gonna fail$/;"	e	enum:infra::LogLevel
CROSSED	base/Quote.h	/^		CROSSED = 'C'$/;"	e	enum:base::QuoteType
CURRENCY	base/ProductInfo.h	/^        CURRENCY	= 4$/;"	e	enum:base::ProductInfoFieldType
CUSTOM	base/BaseCommon.h	/^		CUSTOM			= 0x0020,$/;"	e	enum:base::PlaybackMode::Callback
CUSTOM_DATA_SIZE	base/Message.h	11;"	d
CUSTOM_UPDATE	base/Base.h	/^		CUSTOM_UPDATE = 'C',$/;"	e	enum:base::UpdateType
CXX	infra/gzstream/Makefile	/^CXX      = g++   # for Linux RedHat 6.1, g++ version 2.95.2$/;"	m
CallBacks	base/BaseCommon.h	/^	typedef uint32_t CallBacks;$/;"	t	class:base::PlaybackMode
Callback	base/BaseCommon.h	/^	enum Callback$/;"	g	class:base::PlaybackMode
CancelSize	base/Order.h	/^inline void Order::CancelSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, uint32_t cancelSize)$/;"	f	class:Order
ChannelType	base/BaseCommon.h	/^	enum class ChannelType : uint32_t$/;"	c	class:base::PlaybackMode
ChannelType	base/PacketData.h	/^	enum ChannelType$/;"	g	namespace:base
ContentType	base/Line.h	/^	enum class ContentType $/;"	c	namespace:base
Currency	base/ProductInfo.h	/^    enum Currency$/;"	g	namespace:base
Custom	base/Custom.h	/^	class Custom$/;"	c	namespace:base
DATA_PACKET	base/Line.h	/^		DATA_PACKET,$/;"	m	class:base::ContentType
DEBUG	infra/InfraCommon.h	/^			DEBUG	= 1, \/\/\/< Something trivial$/;"	e	enum:infra::LogLevel
DELETED	base/Order.h	/^		DELETED = 'D',$/;"	e	enum:base::OrderAction
DR_PRIM_MC	base/BaseCommon.h	/^		DR_PRIM_MC,$/;"	m	class:base::PlaybackMode::IPType
DR_PRIM_MC_RETRANS	base/BaseCommon.h	/^		DR_PRIM_MC_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
DR_PRIM_MC_SNAP	base/BaseCommon.h	/^		DR_PRIM_MC_SNAP,$/;"	m	class:base::PlaybackMode::IPType
DR_PRIM_TCP	base/BaseCommon.h	/^		DR_PRIM_TCP,$/;"	m	class:base::PlaybackMode::IPType
DR_PRIM_TCP_RETRANS	base/BaseCommon.h	/^		DR_PRIM_TCP_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
DR_PRIM_TCP_SNAP	base/BaseCommon.h	/^		DR_PRIM_TCP_SNAP,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_MC	base/BaseCommon.h	/^		DR_SEC_MC,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_MC_RETRANS	base/BaseCommon.h	/^		DR_SEC_MC_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_MC_SNAP	base/BaseCommon.h	/^		DR_SEC_MC_SNAP,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_TCP	base/BaseCommon.h	/^		DR_SEC_TCP,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_TCP_RETRANS	base/BaseCommon.h	/^		DR_SEC_TCP_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
DR_SEC_TCP_SNAP	base/BaseCommon.h	/^		DR_SEC_TCP_SNAP,$/;"	m	class:base::PlaybackMode::IPType
Delete	base/Order.h	/^inline void Order::Delete(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID)$/;"	f	class:Order
EMPTY	infra/containers/spsc/BoostSPSCQueue.h	/^	EMPTY	= 0,$/;"	e	enum:infra::BoostElementState
EMPTY	infra/containers/spsc/BoostSPSCQueue_with.h	/^	EMPTY	= 0,$/;"	e	enum:infra::BoostElementState
EMPTY	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^	EMPTY	= 7,$/;"	e	enum:infra::BoostElementState
EMPTY	infra/containers/spsc/SPSCQueue.h	/^		EMPTY	= 0,$/;"	e	enum:infra::ElementState
EMPTY_ASK	base/Quote.h	/^		EMPTY_ASK	= 2,$/;"	e	enum:base::QuoteFill
EMPTY_BID	base/Quote.h	/^		EMPTY_BID	= 3$/;"	e	enum:base::QuoteFill
ENDSWITH	infra/pugixml/pugixml.cpp	1821;"	d	file:
ERROR	infra/InfraCommon.h	/^			ERROR	= 5, \/\/\/< No subscription found. Can not login to recovery$/;"	e	enum:infra::LogLevel
EUR	base/ProductInfo.h	/^        EUR     = 2,	\/\/ EURO$/;"	e	enum:base::Currency
EXCEPTION	infra/InfraCommon.h	/^			EXCEPTION	= 6, \/\/\/< an exception has occured$/;"	e	enum:infra::LogLevel
EXECUTED	base/Order.h	/^		EXECUTED = 'E',$/;"	e	enum:base::OrderAction
ElementState	infra/containers/spsc/SPSCQueue.h	/^	enum ElementState $/;"	g	namespace:infra
Error	base/MarketDataApplication.h	/^	enum Error$/;"	g	namespace:base
Execute	base/Order.h	/^inline void Order::Execute(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID)$/;"	f	class:Order
ExecutePxSize	base/Order.h	/^inline void Order::ExecutePxSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, double execPx, uint64_t execSize)$/;"	f	class:Order
ExecutePxSize	base/Order.h	/^inline void Order::ExecutePxSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, double execPx, uint64_t execSize, uint64_t remaining)$/;"	f	class:Order
ExecuteSize	base/Order.h	/^inline void Order::ExecuteSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, uint64_t execSize)$/;"	f	class:Order
ExecuteSize	base/Order.h	/^inline void Order::ExecuteSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, uint64_t execSize, uint64_t remaining)$/;"	f	class:Order
FALSE	infra/thread/Thread.h	/^		FALSE$/;"	e	enum:infra::BindThreads
FILE_PLAYBACK	base/BaseCommon.h	/^		FILE_PLAYBACK = 0,$/;"	m	class:base::PlaybackMode
FILL_UNKNOWN	base/Quote.h	/^		FILL_UNKNOWN = 0,$/;"	e	enum:base::QuoteFill
FREED	base/PacketData.h	/^		FREED 	= 0,$/;"	e	enum:base::PacketState
FeedAPI	base/API.cpp	/^FeedAPI::FeedAPI()$/;"	f	class:FeedAPI
FeedAPI	base/API.cpp	/^FeedAPI::FeedAPI(OnFeedStarted onFeedStarted, OnFeedStopped onFeedStopped, OnLineGroupStarted onLineGroupStarted, OnLineGroupStopped onLineGroupStopped, OnLineStarted onLineStarted, OnLineStopped onLineStopped, OnPacketStart onPacketStart, OnPacketEnd onPacketEnd, OnOrder onOrder, OnBook onBook, OnQuote onQuote, OnTrade onTrade, OnStatus onStatus, OnCustom onCustom, OnProductInfo onProductInfo)$/;"	f	class:FeedAPI
FeedAPI	base/API.h	/^	class FeedAPI : public LineGroupAPI$/;"	c	namespace:base
FeedHandler	base/FeedHandler.cpp	/^FeedHandler::FeedHandler(const MarketDataApplication *app, const pugi::xml_node &feedHandlerNode, FeedID feedID, LineGroupConstructor func, FeedAPI *feedAPI)$/;"	f	class:FeedHandler
FeedHandler	base/FeedHandler.h	/^    class FeedHandler$/;"	c	namespace:base
FeedHandlerConstructor	base/MarketDataApplication.h	/^	typedef FeedHandler* (*FeedHandlerConstructor)(MarketDataApplication *, const pugi::xml_node&, FeedAPI *feedAPI);$/;"	t	namespace:base
FeedID	base/FeedHandler.h	/^	enum class FeedID$/;"	c	namespace:base
Found	infra/judy/Judy.h	/^int Found = 0;$/;"	v
GAPPED	base/Line.h	/^		GAPPED,			\/\/ It is gapped currently$/;"	m	class:base::LineState
GBP	base/ProductInfo.h	/^        GBP     = 3,	\/\/ GB POUND$/;"	e	enum:base::Currency
GLOBAL_PRIM_MC_RETRANSE_A	base/PacketData.h	/^		GLOBAL_PRIM_MC_RETRANSE_A = 1,$/;"	e	enum:base::ChannelType
GLOBAL_PRIM_MC_RETRANSE_B	base/PacketData.h	/^		GLOBAL_PRIM_MC_RETRANSE_B = 2,$/;"	e	enum:base::ChannelType
GLOBAL_PRIM_MC_SNAP_A	base/PacketData.h	/^		GLOBAL_PRIM_MC_SNAP_A = 1,$/;"	e	enum:base::ChannelType
GLOBAL_PRIM_MC_SNAP_B	base/PacketData.h	/^		GLOBAL_PRIM_MC_SNAP_B = 2,$/;"	e	enum:base::ChannelType
GLOBAL_SEC_MC_RETRANSE_A	base/PacketData.h	/^		GLOBAL_SEC_MC_RETRANSE_A  = 3,	$/;"	e	enum:base::ChannelType
GLOBAL_SEC_MC_RETRANSE_B	base/PacketData.h	/^		GLOBAL_SEC_MC_RETRANSE_B  = 4,	$/;"	e	enum:base::ChannelType
GLOBAL_SEC_MC_SNAP_A	base/PacketData.h	/^		GLOBAL_SEC_MC_SNAP_A  = 3,	$/;"	e	enum:base::ChannelType
GLOBAL_SEC_MC_SNAP_B	base/PacketData.h	/^		GLOBAL_SEC_MC_SNAP_B  = 4,	$/;"	e	enum:base::ChannelType
GZSTREAM_H	infra/gzstream/gzstream.h	30;"	d
GetPackStats	base/Line.h	/^			typedef void (Line::*GetPackStats)();$/;"	t	class:base::Line
GetPackStatsSnap	base/Line.h	/^			typedef void (Line::*GetPackStatsSnap)();$/;"	t	class:base::Line
HALTED	base/Status.h	/^		HALTED		= 8,$/;"	m	class:base::InstrState
HB	base/Line.h	/^		HB,$/;"	m	class:base::ContentType
HEADER	base/BaseCommon.h	/^		HEADER = 0,$/;"	e	enum:base::PlaybackMode::RecordField
HEADER_PUGICONFIG_HPP	infra/pugixml/pugiconfig.h	15;"	d
HEADER_PUGIXML_FOREACH_HPP	infra/pugixml/contrib/foreach.hpp	8;"	d
HEADER_PUGIXML_HPP	infra/pugixml/pugixml.h	23;"	d
ID	base/BaseCommon.cpp	/^ID::ID()$/;"	f	class:ID
ID	base/BaseCommon.cpp	/^ID::ID(char *strID)$/;"	f	class:ID
ID	base/BaseCommon.cpp	/^ID::ID(uint64_t numericID)$/;"	f	class:ID
ID	base/BaseCommon.h	/^	class ID$/;"	c	namespace:base
IDTYPE_UNKNOWN	base/BaseCommon.h	/^		IDTYPE_UNKNOWN = 2$/;"	e	enum:base::IDType
IDType	base/BaseCommon.h	/^	enum IDType$/;"	g	namespace:base
INFO	infra/InfraCommon.h	/^			INFO	= 3, \/\/\/< Something less trivial$/;"	e	enum:infra::LogLevel
INVALID_FEEDNAME	base/MarketDataApplication.h	/^		INVALID_FEEDNAME = -1,$/;"	e	enum:base::Error
IP	base/Line.cpp	/^IP::IP()$/;"	f	class:IP
IP	base/Line.h	/^	class IP : public sockaddr_in $/;"	c	namespace:base
IPString	base/Line.cpp	/^const char *IP::IPString[24] = {$/;"	m	class:IP	file:
IPString	base/Line.h	/^			static const char *IPString[24];	$/;"	m	class:base::IP
IPType	base/BaseCommon.h	/^	enum class IPType : uint32_t$/;"	c	class:base::PlaybackMode
IP_PORT	base/BaseCommon.h	/^		IP_PORT = 2,$/;"	e	enum:base::PlaybackMode::RecordField
Inserts	infra/judy/Judy.h	/^int Inserts = 0;$/;"	v
InstrState	base/Status.h	/^	enum class InstrState : uint8_t$/;"	c	namespace:base
InstrStateToString	base/Subscription.cpp	/^const char * InstrStateToString(InstrState state)$/;"	f
JUDY64_H	infra/judy/Judy.h	2;"	d
JUDYL2ARRAY_H	infra/judy/JudyL2Array.h	2;"	d
JUDYLARRAY_H	infra/judy/JudyLArray.h	2;"	d
JUDYS2ARRAY_H	infra/judy/JudyS2Array.h	2;"	d
JUDYSARRAY_H	infra/judy/JudySArray.h	2;"	d
JUDY_1	infra/judy/Judy.h	/^    JUDY_1            = 1,    \/\/ linear list nodes of designated count$/;"	e	enum:JUDY_types
JUDY_16	infra/judy/Judy.h	/^    JUDY_16           = 5,$/;"	e	enum:JUDY_types
JUDY_2	infra/judy/Judy.h	/^    JUDY_2            = 2,$/;"	e	enum:JUDY_types
JUDY_32	infra/judy/Judy.h	/^    JUDY_32           = 6,$/;"	e	enum:JUDY_types
JUDY_4	infra/judy/Judy.h	/^    JUDY_4            = 3,$/;"	e	enum:JUDY_types
JUDY_64	infra/judy/Judy.h	/^    JUDY_64           = 7$/;"	e	enum:JUDY_types
JUDY_8	infra/judy/Judy.h	/^    JUDY_8            = 4,$/;"	e	enum:JUDY_types
JUDY_cache_line	infra/judy/Judy.h	77;"	d
JUDY_key_mask	infra/judy/Judy.h	48;"	d
JUDY_key_mask	infra/judy/Judy.h	61;"	d
JUDY_key_size	infra/judy/Judy.h	49;"	d
JUDY_key_size	infra/judy/Judy.h	62;"	d
JUDY_mask	infra/judy/Judy.h	72;"	d
JUDY_max	infra/judy/Judy.h	124;"	d
JUDY_max	infra/judy/Judy.h	126;"	d
JUDY_max	infra/judy/Judy.h	129;"	d
JUDY_radix	infra/judy/Judy.h	/^    JUDY_radix        = 0,    \/\/ inner and outer radix fan-out$/;"	e	enum:JUDY_types
JUDY_radix_equiv	infra/judy/Judy.h	53;"	d
JUDY_radix_equiv	infra/judy/Judy.h	66;"	d
JUDY_seg	infra/judy/Judy.h	81;"	d
JUDY_slot_size	infra/judy/Judy.h	50;"	d
JUDY_slot_size	infra/judy/Judy.h	63;"	d
JUDY_span_bytes	infra/judy/Judy.h	51;"	d
JUDY_span_bytes	infra/judy/Judy.h	64;"	d
JUDY_span_equiv	infra/judy/Judy.h	52;"	d
JUDY_span_equiv	infra/judy/Judy.h	65;"	d
JUDY_types	infra/judy/Judy.h	/^enum JUDY_types {$/;"	g
JUST_STARTED	base/Line.h	/^		JUST_STARTED,	\/\/ Intraday or morning start$/;"	m	class:base::LineState
Judy	infra/judy/Judy.h	/^} Judy;$/;"	t	typeref:struct:__anon5
JudyMask	infra/judy/Judy.cpp	/^judyvalue JudyMask[9] = {$/;"	v
JudyMask	infra/judy/JudyCore.cpp	/^judyvalue JudyMask[9] = {$/;"	v
JudySeg	infra/judy/Judy.h	/^} JudySeg;$/;"	t	typeref:struct:__anon3
JudySize	infra/judy/Judy.cpp	/^int JudySize[] = {$/;"	v
JudySize	infra/judy/JudyCore.cpp	/^int JudySize[] = {$/;"	v
JudySlot	infra/judy/Judy.h	/^typedef unsigned int JudySlot;$/;"	t
JudySlot	infra/judy/Judy.h	/^typedef unsigned long long JudySlot;$/;"	t
JudyStack	infra/judy/Judy.h	/^} JudyStack;$/;"	t	typeref:struct:__anon4
LATENCY_SIZE	base/BaseCommon.h	167;"	d
LDFLAGS	infra/gzstream/Makefile	/^LDFLAGS  = -g -L. -lgzstream -lz$/;"	m
LENGTH	base/BaseCommon.h	/^		LENGTH = 3$/;"	e	enum:base::PlaybackMode::RecordField
LIVE_PLAYBACK	base/BaseCommon.h	/^		LIVE_PLAYBACK = 1$/;"	m	class:base::PlaybackMode
LOG_MSG_SIZE	infra/logger/Logger.h	37;"	d
LOTSIZE	base/ProductInfo.h	/^        LOTSIZE		= 2,$/;"	e	enum:base::ProductInfoFieldType
Line	base/Line.cpp	/^Line::Line(const MarketDataApplication *app, FeedHandler *feedHandler, LineGroup *lineGroup, Thread *thread, const pugi::xml_node &lineNode, LineAPI *lineAPI, Start start, ProcessPacket processFunc, GetPackStats getPacketStats, GetPackStatsSnap getPacketStatsSnap, ReRequestMissedPackets reRequestMissedPackets)$/;"	f	class:Line
Line	base/Line.h	/^    class Line$/;"	c	namespace:base
LineAPI	base/API.cpp	/^LineAPI::LineAPI()$/;"	f	class:LineAPI
LineAPI	base/API.cpp	/^LineAPI::LineAPI(OnLineStarted onLineStarted, OnLineStopped onLineStopped, OnPacketStart onPacketStart, OnPacketEnd onPacketEnd, OnOrder onOrder, OnBook onBook, OnQuote onQuote, OnTrade onTrade, OnStatus onStatus, OnCustom onCustom, OnProductInfo onProductInfo)$/;"	f	class:LineAPI
LineAPI	base/API.h	/^	class LineAPI$/;"	c	namespace:base
LineConstructor	base/LineGroup.h	/^	typedef Line* (*LineConstructor)(const base::MarketDataApplication *, FeedHandler *, LineGroup *, Thread *, const pugi::xml_node&, LineAPI *);$/;"	t	namespace:base
LineGroup	base/LineGroup.cpp	/^LineGroup::LineGroup(const MarketDataApplication *app, FeedHandler *feedHandler, const pugi::xml_node &lineGroupNode, LineConstructor lineConstructor, LineGroupAPI *lineGroupAPI)$/;"	f	class:LineGroup
LineGroup	base/LineGroup.h	/^	class LineGroup$/;"	c	namespace:base
LineGroupAPI	base/API.cpp	/^LineGroupAPI::LineGroupAPI()$/;"	f	class:LineGroupAPI
LineGroupAPI	base/API.cpp	/^LineGroupAPI::LineGroupAPI(OnLineGroupStarted onLineGroupStarted, OnLineGroupStopped onLineGroupStopped, OnLineStarted onLineStarted, OnLineStopped onLineStopped, OnPacketStart onPacketStart, OnPacketEnd onPacketEnd, OnOrder onOrder, OnBook onBook, OnQuote onQuote, OnTrade onTrade, OnStatus onStatus, OnCustom onCustom, OnProductInfo onProductInfo)$/;"	f	class:LineGroupAPI
LineGroupAPI	base/API.h	/^	class LineGroupAPI: public LineAPI$/;"	c	namespace:base
LineGroupConstructor	base/FeedHandler.h	/^			typedef LineGroup* (*LineGroupConstructor)(const MarketDataApplication *, FeedHandler *, const pugi::xml_node &, LineGroupAPI *);$/;"	t	class:base::FeedHandler
LineState	base/Line.h	/^	enum class LineState$/;"	c	namespace:base
Lock	infra/lock/Lock.cpp	/^Lock::Lock(std::mutex &mutex)$/;"	f	class:Lock
Lock	infra/lock/Lock.h	/^	class Lock$/;"	c	namespace:infra
LogLevel	infra/InfraCommon.h	/^	enum LogLevel$/;"	g	namespace:infra
LogMessage	infra/logger/Logger.h	/^	class LogMessage: public BoostSPSCQueueElement$/;"	c	namespace:infra
Logger	infra/logger/Logger.cpp	/^Logger::Logger(const std::string& appName, const MarketDataApplication *appInstance, pugi::xml_node LoggerNode)$/;"	f	class:Logger
Logger	infra/logger/Logger.h	/^	class Logger$/;"	c	namespace:infra
LoggerClientHandle	infra/logger/Logger.cpp	/^LoggerClientHandle::LoggerClientHandle(const MarketDataApplication *appInstance, Thread *thread, uint32_t logQueueSize, LogLevel level)$/;"	f	class:LoggerClientHandle
LoggerClientHandle	infra/logger/Logger.h	/^	class LoggerClientHandle $/;"	c	namespace:infra
LoggerLoop	infra/logger/Logger.cpp	/^void* Logger::LoggerLoop()$/;"	f	class:Logger
MAIN	base/BaseCommon.h	/^		MAIN,$/;"	m	class:base::PlaybackMode::ChannelType
MANUALLY	infra/thread/Thread.h	/^		MANUALLY,$/;"	e	enum:infra::BindThreads
MARKET_ORDER	base/Order.h	/^		MARKET_ORDER = 2$/;"	e	enum:base::OrderType
MILLENIUM	base/FeedHandler.h	/^		MILLENIUM = 1,$/;"	m	class:base::FeedID
MODIFIED	base/Order.h	/^		MODIFIED = 'M',$/;"	e	enum:base::OrderAction
MarketDataApplication	base/MarketDataApplication.cpp	/^MarketDataApplication::MarketDataApplication(std::string configFile, FeedAPI *feedAPI)$/;"	f	class:MarketDataApplication
MarketDataApplication	base/MarketDataApplication.h	/^	class MarketDataApplication$/;"	c	namespace:base
MarketDataApplicationLoop	base/MarketDataApplication.cpp	/^void  MarketDataApplication::MarketDataApplicationLoop()$/;"	f	class:MarketDataApplication
Message	base/Message.h	/^		Message()$/;"	f	class:base::Message
Message	base/Message.h	/^		Message(std::shared_ptr<Packet> &ptr, NativFunc func, const char *msg, Subscription *sub, uint64_t seq, uint64_t xtSecs)$/;"	f	class:base::Message
Message	base/Message.h	/^	class Message : public BoostSPSCQueueElement$/;"	c	namespace:base
MessageFunc	base/Line.h	/^		MessageFunc()$/;"	f	class:base::MessageFunc
MessageFunc	base/Line.h	/^		MessageFunc(NativFunc func, bool assign, uint16_t size, uint16_t offset, CallBacks callbacks)$/;"	f	class:base::MessageFunc
MessageFunc	base/Line.h	/^	class MessageFunc$/;"	c	namespace:base
MessageInfo	base/Message.h	/^			MessageInfo()$/;"	f	class:base::MessageInfo
MessageInfo	base/Message.h	/^			MessageInfo(uint64_t seq, uint64_t xtSecs)$/;"	f	class:base::MessageInfo
MessageInfo	base/Message.h	/^	class MessageInfo$/;"	c	namespace:base
ModifyPx	base/Order.h	/^inline void Order::ModifyPx(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, double px)$/;"	f	class:Order
ModifyPxSize	base/Order.h	/^inline void Order::ModifyPxSize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, double px, uint32_t size)$/;"	f	class:Order
ModifySize	base/Order.h	/^inline void Order::ModifySize(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t orderID, uint32_t newSize)$/;"	f	class:Order
NAME_SIZE	base/BaseCommon.h	27;"	d
NAME_SIZE	infra/InfraCommon.h	11;"	d
NORMAL	base/Line.h	/^		NORMAL,			\/\/ Properly snapped$/;"	m	class:base::LineState
NORMAL	base/Quote.h	/^		NORMAL = 'N',$/;"	e	enum:base::QuoteType
NORMAL_ORDER	base/Order.h	/^		NORMAL_ORDER = 1,$/;"	e	enum:base::OrderType
NOT_PROCESSED	base/Line.h	/^		NOT_PROCESSED = -1$/;"	e	enum:base::ReturnValue
NO_CALLBACK	base/BaseCommon.h	/^		NO_CALLBACK		= 0x0000,$/;"	e	enum:base::PlaybackMode::Callback
NUMERIC	base/BaseCommon.h	/^        NUMERIC = 0,$/;"	e	enum:base::IDType
NameToFeedHandlerMap	base/MarketDataApplication.h	/^			typedef std::map<std::string, FeedHandler *> NameToFeedHandlerMap;$/;"	t	class:base::MarketDataApplication
NameToLineGroupMap	base/FeedHandler.h	/^            typedef std::map<std::string , LineGroup *> NameToLineGroupMap;$/;"	t	class:base::FeedHandler
NameToLineMap	base/LineGroup.h	/^			typedef std::map<std::string, Line *> NameToLineMap; $/;"	t	class:base::LineGroup
NameToNetworkReaderMap	base/MarketDataApplication.h	/^			typedef std::map<std::string, NetworkReader *> NameToNetworkReaderMap;$/;"	t	class:base::MarketDataApplication
NativFunc	base/Line.h	/^	typedef void (Line::*NativFunc)();	$/;"	t	namespace:base
NetworkReader	base/NetworkReader.cpp	/^NetworkReader::NetworkReader(const MarketDataApplication *app, const pugi::xml_node &readerNode)$/;"	f	class:NetworkReader
NetworkReader	base/NetworkReader.h	/^	class NetworkReader$/;"	c	namespace:base
OMXNORDIC	base/FeedHandler.h	/^		OMXNORDIC = 2,$/;"	m	class:base::FeedID
OPEN	base/Status.h	/^		OPEN	= 2,$/;"	m	class:base::InstrState
ORDACT_UNKNOWN	base/Order.h	/^		ORDACT_UNKNOWN = 'U'$/;"	e	enum:base::OrderAction
ORDER	base/BaseCommon.h	/^		ORDER			= 0x0002,$/;"	e	enum:base::PlaybackMode::Callback
ORDER_UPDATE	base/Base.h	/^		ORDER_UPDATE = 'O',$/;"	e	enum:base::UpdateType
ORDTYPE_UNKNOWN	base/Order.h	/^		ORDTYPE_UNKNOWN = 0,$/;"	e	enum:base::OrderType
ObjToThreadMap	infra/thread/Thread.h	/^	typedef std::map<void *, Thread *> ObjToThreadMap;$/;"	t	namespace:infra
OnBook	base/API.h	/^			typedef void (LineAPI::*OnBook)(const Book *);$/;"	t	class:base::LineAPI
OnCustom	base/API.h	/^			typedef void (LineAPI::*OnCustom)(const Custom *);$/;"	t	class:base::LineAPI
OnFeedStarted	base/API.h	/^			typedef void (FeedAPI::*OnFeedStarted)(const FeedHandler *feedHandler);$/;"	t	class:base::FeedAPI
OnFeedStopped	base/API.h	/^			typedef void (FeedAPI::*OnFeedStopped)(const FeedHandler *feedHandler);$/;"	t	class:base::FeedAPI
OnLineGroupStarted	base/API.h	/^			typedef void (LineGroupAPI::*OnLineGroupStarted)(const LineGroup *lineGroup);$/;"	t	class:base::LineGroupAPI
OnLineGroupStopped	base/API.h	/^			typedef void (LineGroupAPI::*OnLineGroupStopped)(const LineGroup *lineGroup);$/;"	t	class:base::LineGroupAPI
OnLineStarted	base/API.h	/^			typedef void (LineAPI::*OnLineStarted)(const Line *pLine);$/;"	t	class:base::LineAPI
OnLineStopped	base/API.h	/^			typedef void (LineAPI::*OnLineStopped)(const Line *pLine);$/;"	t	class:base::LineAPI
OnOrder	base/API.h	/^			typedef void (LineAPI::*OnOrder)(const Order *);$/;"	t	class:base::LineAPI
OnPacketEnd	base/API.h	/^			typedef void (LineAPI::*OnPacketEnd)(const Line *pLine);$/;"	t	class:base::LineAPI
OnPacketStart	base/API.h	/^			typedef void (LineAPI::*OnPacketStart)(const Line *pLine);$/;"	t	class:base::LineAPI
OnProductInfo	base/API.h	/^			typedef void (LineAPI::*OnProductInfo)(const ProductInfo *);$/;"	t	class:base::LineAPI
OnQuote	base/API.h	/^			typedef void (LineAPI::*OnQuote)(const Quote *);$/;"	t	class:base::LineAPI
OnStatus	base/API.h	/^			typedef void (LineAPI::*OnStatus)(const Status *);$/;"	t	class:base::LineAPI
OnTrade	base/API.h	/^			typedef void (LineAPI::*OnTrade)(const Trade *, const Order *);$/;"	t	class:base::LineAPI
Order	base/Order.h	/^    class Order : public Base$/;"	c	namespace:base
Order	base/Order.h	/^inline Order::Order()$/;"	f	class:Order
OrderAction	base/Order.h	/^	enum OrderAction$/;"	g	namespace:base
OrderPool	base/BaseCommon.h	/^	typedef boost::object_pool<base::Order> OrderPool;$/;"	t	class:base::PlaybackMode
OrderType	base/Order.h	/^	enum OrderType$/;"	g	namespace:base
PACKET_DATA_SIZE	base/Packet.h	18;"	d
PACKET_SIZE	base/PacketData.h	9;"	d
PREOPEN	base/Status.h	/^		PREOPEN	= 1,$/;"	m	class:base::InstrState
PRICELEVEL_UPDATE	base/Base.h	/^		PRICELEVEL_UPDATE	= 'L',$/;"	e	enum:base::UpdateType
PRICE_CHANGE	base/Quote.h	/^		PRICE_CHANGE = 1,$/;"	e	enum:base::QuoteChange
PRIM_MC	base/BaseCommon.h	/^		PRIM_MC,	\/\/ Primary\/Secondary real time data MC line$/;"	m	class:base::PlaybackMode::IPType
PRIM_MC_A	base/PacketData.h	/^		PRIM_MC_A = 1,$/;"	e	enum:base::ChannelType
PRIM_MC_B	base/PacketData.h	/^		PRIM_MC_B = 2,$/;"	e	enum:base::ChannelType
PRIM_MC_RETRANS	base/BaseCommon.h	/^		PRIM_MC_RETRANS, \/\/ Primary\/Secondary selective retranse data MC line$/;"	m	class:base::PlaybackMode::IPType
PRIM_MC_RETRANSE_A	base/PacketData.h	/^		PRIM_MC_RETRANSE_A = 1,$/;"	e	enum:base::ChannelType
PRIM_MC_RETRANSE_B	base/PacketData.h	/^		PRIM_MC_RETRANSE_B = 2,$/;"	e	enum:base::ChannelType
PRIM_MC_SNAP	base/BaseCommon.h	/^		PRIM_MC_SNAP, \/\/ Primary\/Secondary snapshot data MC line$/;"	m	class:base::PlaybackMode::IPType
PRIM_MC_SNAP_A	base/PacketData.h	/^		PRIM_MC_SNAP_A = 1,$/;"	e	enum:base::ChannelType
PRIM_MC_SNAP_B	base/PacketData.h	/^		PRIM_MC_SNAP_B = 2,$/;"	e	enum:base::ChannelType
PRIM_TCP	base/BaseCommon.h	/^		PRIM_TCP, \/\/ Primary\/Secondary selective retranse data TCP line$/;"	m	class:base::PlaybackMode::IPType
PRIM_TCP_RETRANS	base/BaseCommon.h	/^		PRIM_TCP_RETRANS, \/\/ Primary\/Secondary TCP retranse line$/;"	m	class:base::PlaybackMode::IPType
PRIM_TCP_SNAP	base/BaseCommon.h	/^		PRIM_TCP_SNAP, \/\/  Primary\/Secondary snapshot data TCP line $/;"	m	class:base::PlaybackMode::IPType
PRIjudyvalue	infra/judy/Judy.h	55;"	d
PRIjudyvalue	infra/judy/Judy.h	68;"	d
PROCESSED	base/Line.h	/^		PROCESSED = 0,$/;"	e	enum:base::ReturnValue
PRODUCTINFO_UPDATE	base/Base.h	/^		PRODUCTINFO_UPDATE= 'P',$/;"	e	enum:base::UpdateType
PUGIXML_API	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_API"><\/a><code class="literal">PUGIXML_API<\/code>, <a name="PUGIXML_CLASS"><\/a><code class="literal">PUGIXML_CLASS<\/code>$/;"	a
PUGIXML_API	infra/pugixml/pugixml.h	53;"	d
PUGIXML_CHAR	infra/pugixml/pugixml.h	78;"	d
PUGIXML_CHAR	infra/pugixml/pugixml.h	81;"	d
PUGIXML_CLASS	infra/pugixml/pugixml.h	58;"	d
PUGIXML_DEPRECATED	infra/pugixml/pugixml.h	43;"	d
PUGIXML_DEPRECATED	infra/pugixml/pugixml.h	45;"	d
PUGIXML_DEPRECATED	infra/pugixml/pugixml.h	47;"	d
PUGIXML_FUNCTION	infra/pugixml/docs/manual/install.html	/^          and <a name="PUGIXML_FUNCTION"><\/a><code class="literal">PUGIXML_FUNCTION<\/code> defines let you$/;"	a
PUGIXML_FUNCTION	infra/pugixml/pugixml.h	63;"	d
PUGIXML_HAS_LONG_LONG	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_HAS_LONG_LONG"><\/a><code class="literal">PUGIXML_HAS_LONG_LONG<\/code> define enables$/;"	a
PUGIXML_HAS_LONG_LONG	infra/pugixml/pugixml.h	69;"	d
PUGIXML_HAS_LONG_LONG	infra/pugixml/pugixml.h	71;"	d
PUGIXML_MEMORY_PAGE_SIZE	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_MEMORY_PAGE_SIZE"><\/a><code class="literal">PUGIXML_MEMORY_PAGE_SIZE<\/code>, <a name="PUGIXML_MEMORY_OUTPUT_STACK"><\/a><code class="literal">PUGIXML_MEMORY_OUTPUT_STACK<\/code>$/;"	a
PUGIXML_MEMORY_XPATH_PAGE_SIZE	infra/pugixml/docs/manual/install.html	/^          and <a name="PUGIXML_MEMORY_XPATH_PAGE_SIZE"><\/a><code class="literal">PUGIXML_MEMORY_XPATH_PAGE_SIZE<\/code>$/;"	a
PUGIXML_NO_EXCEPTIONS	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_NO_EXCEPTIONS"><\/a><code class="literal">PUGIXML_NO_EXCEPTIONS<\/code> define disables$/;"	a
PUGIXML_NO_STL	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_NO_STL"><\/a><code class="literal">PUGIXML_NO_STL<\/code> define disables use of$/;"	a
PUGIXML_NO_XPATH	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_NO_XPATH"><\/a><code class="literal">PUGIXML_NO_XPATH<\/code> define disables XPath.$/;"	a
PUGIXML_TEXT	infra/pugixml/pugixml.h	77;"	d
PUGIXML_TEXT	infra/pugixml/pugixml.h	80;"	d
PUGIXML_VERSION	infra/pugixml/pugixml.h	16;"	d
PUGIXML_WCHAR_MODE	infra/pugixml/docs/manual/install.html	/^          <a name="PUGIXML_WCHAR_MODE"><\/a><code class="literal">PUGIXML_WCHAR_MODE<\/code> define toggles$/;"	a
PUGI__CHECK_ERROR	infra/pugixml/pugixml.cpp	10760;"	d	file:
PUGI__CHECK_ERROR	infra/pugixml/pugixml.cpp	2151;"	d	file:
PUGI__DMC_VOLATILE	infra/pugixml/pugixml.cpp	10743;"	d	file:
PUGI__DMC_VOLATILE	infra/pugixml/pugixml.cpp	95;"	d	file:
PUGI__DMC_VOLATILE	infra/pugixml/pugixml.cpp	97;"	d	file:
PUGI__ENDSEG	infra/pugixml/pugixml.cpp	10758;"	d	file:
PUGI__ENDSEG	infra/pugixml/pugixml.cpp	2149;"	d	file:
PUGI__FN	infra/pugixml/pugixml.cpp	10747;"	d	file:
PUGI__FN	infra/pugixml/pugixml.cpp	114;"	d	file:
PUGI__FN_NO_INLINE	infra/pugixml/pugixml.cpp	10748;"	d	file:
PUGI__FN_NO_INLINE	infra/pugixml/pugixml.cpp	115;"	d	file:
PUGI__IS_CHARTYPE	infra/pugixml/pugixml.cpp	10750;"	d	file:
PUGI__IS_CHARTYPE	infra/pugixml/pugixml.cpp	1117;"	d	file:
PUGI__IS_CHARTYPEX	infra/pugixml/pugixml.cpp	10751;"	d	file:
PUGI__IS_CHARTYPEX	infra/pugixml/pugixml.cpp	1118;"	d	file:
PUGI__IS_CHARTYPE_IMPL	infra/pugixml/pugixml.cpp	10749;"	d	file:
PUGI__IS_CHARTYPE_IMPL	infra/pugixml/pugixml.cpp	1112;"	d	file:
PUGI__IS_CHARTYPE_IMPL	infra/pugixml/pugixml.cpp	1114;"	d	file:
PUGI__MSVC_CRT_VERSION	infra/pugixml/pugixml.cpp	10744;"	d	file:
PUGI__MSVC_CRT_VERSION	infra/pugixml/pugixml.cpp	108;"	d	file:
PUGI__NO_INLINE	infra/pugixml/pugixml.cpp	10741;"	d	file:
PUGI__NO_INLINE	infra/pugixml/pugixml.cpp	83;"	d	file:
PUGI__NO_INLINE	infra/pugixml/pugixml.cpp	85;"	d	file:
PUGI__NO_INLINE	infra/pugixml/pugixml.cpp	87;"	d	file:
PUGI__NS_BEGIN	infra/pugixml/pugixml.cpp	10745;"	d	file:
PUGI__NS_BEGIN	infra/pugixml/pugixml.cpp	112;"	d	file:
PUGI__NS_END	infra/pugixml/pugixml.cpp	10746;"	d	file:
PUGI__NS_END	infra/pugixml/pugixml.cpp	113;"	d	file:
PUGI__OPTSET	infra/pugixml/pugixml.cpp	10753;"	d	file:
PUGI__OPTSET	infra/pugixml/pugixml.cpp	2144;"	d	file:
PUGI__POPNODE	infra/pugixml/pugixml.cpp	10755;"	d	file:
PUGI__POPNODE	infra/pugixml/pugixml.cpp	2146;"	d	file:
PUGI__PUSHNODE	infra/pugixml/pugixml.cpp	10754;"	d	file:
PUGI__PUSHNODE	infra/pugixml/pugixml.cpp	2145;"	d	file:
PUGI__SCANFOR	infra/pugixml/pugixml.cpp	10756;"	d	file:
PUGI__SCANFOR	infra/pugixml/pugixml.cpp	2147;"	d	file:
PUGI__SCANWHILE	infra/pugixml/pugixml.cpp	10757;"	d	file:
PUGI__SCANWHILE	infra/pugixml/pugixml.cpp	2148;"	d	file:
PUGI__SKIPWS	infra/pugixml/pugixml.cpp	10752;"	d	file:
PUGI__SKIPWS	infra/pugixml/pugixml.cpp	2143;"	d	file:
PUGI__STATIC_ASSERT	infra/pugixml/pugixml.cpp	10742;"	d	file:
PUGI__STATIC_ASSERT	infra/pugixml/pugixml.cpp	91;"	d	file:
PUGI__THROW_ERROR	infra/pugixml/pugixml.cpp	10759;"	d	file:
PUGI__THROW_ERROR	infra/pugixml/pugixml.cpp	2150;"	d	file:
Packet	base/Packet.h	/^			Packet()$/;"	f	class:base::Packet
Packet	base/Packet.h	/^	class Packet : public BoostSPSCQueueElement$/;"	c	namespace:base
PacketAddress	base/Line.cpp	/^PacketAddress::PacketAddress()$/;"	f	class:PacketAddress
PacketAddress	base/Line.cpp	/^PacketAddress::PacketAddress(const IP& ip, IPType ipType, ChannelType channelType, const Line *line, const LineGroup *lineGroup)$/;"	f	class:PacketAddress
PacketAddress	base/Line.h	/^	class PacketAddress : public IP$/;"	c	namespace:base
PacketData	base/PacketData.h	/^	class PacketData$/;"	c	namespace:base
PacketQueueElement	base/PacketData.h	/^	class PacketQueueElement $/;"	c	namespace:base
PacketState	base/PacketData.h	/^	enum PacketState$/;"	g	namespace:base
PacketStateMax	base/PacketData.h	/^		PacketStateMax	$/;"	e	enum:base::PacketState
PlaybackError	base/BaseCommon.h	/^	enum PlaybackError$/;"	g	namespace:base
PlaybackMode	base/BaseCommon.h	/^	enum class PlaybackMode : uint8_t$/;"	c	namespace:base
PriceLevel	base/PriceLevel.cpp	/^PriceLevel::PriceLevel(Order *order)$/;"	f	class:PriceLevel
PriceLevel	base/PriceLevel.cpp	/^PriceLevel::PriceLevel(double px, uint64_t size)$/;"	f	class:PriceLevel
PriceLevel	base/PriceLevel.h	/^	class PriceLevel\/\/ : public Base$/;"	c	namespace:base
PriceLevelMap	base/Book.h	/^	typedef std::map<double, PriceLevel *> PriceLevelMap;$/;"	t	namespace:base
PriceLevelPool	base/BaseCommon.h	/^	typedef boost::object_pool<base::PriceLevel> PriceLevelPool;$/;"	t	class:base::PlaybackMode
PriceLevels	base/Book.h	/^	class PriceLevels$/;"	c	namespace:base
PriceLevels	base/PriceLevels.h	/^	class PriceLevels$/;"	c	namespace:base
ProcessPacket	base/Line.h	/^			typedef void (Line::*ProcessPacket)();$/;"	t	class:base::Line
ProductInfo	base/ProductInfo.cpp	/^ProductInfo::ProductInfo(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, const char *symbol)$/;"	f	class:ProductInfo
ProductInfo	base/ProductInfo.cpp	/^ProductInfo::ProductInfo(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, uint64_t symbolID, const char *symbol, const char *isin)$/;"	f	class:ProductInfo
ProductInfo	base/ProductInfo.h	/^    class ProductInfo: public Base$/;"	c	namespace:base
ProductInfoFieldType	base/ProductInfo.h	/^    enum ProductInfoFieldType$/;"	g	namespace:base
QUOTE	base/BaseCommon.h	/^		QUOTE			= 0x0016,	\/\/ 0x16 = BOOK(6)  + QUOTE(0x10)$/;"	e	enum:base::PlaybackMode::Callback
QUOTE_UNKNOWN	base/Quote.h	/^		QUOTE_UNKNOWN = 'U',$/;"	e	enum:base::QuoteType
QUOTE_UPDATE	base/Base.h	/^		QUOTE_UPDATE = 'Q',$/;"	e	enum:base::UpdateType
Quote	base/Quote.h	/^	class Quote : public Base$/;"	c	namespace:base
Quote	base/Quote.h	/^inline Quote::Quote(Subscription *sub)$/;"	f	class:Quote
QuoteChange	base/Quote.h	/^	enum QuoteChange$/;"	g	namespace:base
QuoteFill	base/Quote.h	/^	enum QuoteFill$/;"	g	namespace:base
QuoteType	base/Quote.h	/^	enum QuoteType $/;"	g	namespace:base
READ	base/PacketData.h	/^		READ	= 2,$/;"	e	enum:base::PacketState
READ	infra/containers/spsc/BoostSPSCQueue.h	/^	READ	= 1,$/;"	e	enum:infra::BoostElementState
READ	infra/containers/spsc/BoostSPSCQueue_with.h	/^	READ	= 1,$/;"	e	enum:infra::BoostElementState
READ	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^	READ	= 1,$/;"	e	enum:infra::BoostElementState
READ	infra/containers/spsc/SPSCQueue.h	/^		READ	= 1,$/;"	e	enum:infra::ElementState
RECORDING_CORRUPT	base/BaseCommon.h	/^		RECORDING_CORRUPT = -2,$/;"	e	enum:base::PlaybackError
RECORDING_FINISHED	base/BaseCommon.h	/^		RECORDING_FINISHED = -1,$/;"	e	enum:base::PlaybackError
RECORDING_FINISHED_ABNORMALLY	base/BaseCommon.h	/^		RECORDING_FINISHED_ABNORMALLY = -3,$/;"	e	enum:base::PlaybackError
REGEX_SUBSCRIPTION	base/MarketDataApplication.h	/^		REGEX_SUBSCRIPTION = 1$/;"	e	enum:base::Error
RETRANS	base/BaseCommon.h	/^		RETRANS,$/;"	m	class:base::PlaybackMode::ChannelType
RLock	infra/lock/Lock.h	/^	typedef Lock RLock;$/;"	t	namespace:infra
ReRequestMissedPackets	base/Line.h	/^			typedef bool (Line::*ReRequestMissedPackets)(uint64_t, uint64_t);$/;"	t	class:base::Line
RecordField	base/BaseCommon.h	/^	enum RecordField$/;"	g	class:base::PlaybackMode
Recorder	base/Recorder.cpp	/^Recorder::Recorder(const MarketDataApplication *app, const pugi::xml_node &node)$/;"	f	class:Recorder
Recorder	base/Recorder.h	/^	class Recorder$/;"	c	namespace:base
Recording	base/BaseCommon.h	/^	class Recording$/;"	c	class:base::PlaybackMode
Recording	base/NetworkReader.cpp	/^Recording::Recording(const FeedHandler *feed, const std::string &filename, bool write)$/;"	f	class:Recording
ReferenceFileReader	base/ReferenceFileReader.h	/^        ReferenceFileReader() {}$/;"	f	class:ReferenceFileReader
ReferenceFileReader	base/ReferenceFileReader.h	/^class ReferenceFileReader$/;"	c
ReferenceFileRowField	base/ReferenceFileReader.h	/^struct ReferenceFileRowField$/;"	s
ReturnValue	base/Line.h	/^	enum ReturnValue$/;"	g	namespace:base
SANTY	infra/InfraCommon.h	/^			SANTY	= 2, \/\/\/< Sanitly checks like cross book$/;"	e	enum:infra::LogLevel
SEC_MC	base/BaseCommon.h	/^		SEC_MC,$/;"	m	class:base::PlaybackMode::IPType
SEC_MC_A	base/PacketData.h	/^		SEC_MC_A  = 3,	$/;"	e	enum:base::ChannelType
SEC_MC_B	base/PacketData.h	/^		SEC_MC_B  = 4,	$/;"	e	enum:base::ChannelType
SEC_MC_RETRANS	base/BaseCommon.h	/^		SEC_MC_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
SEC_MC_RETRANSE_A	base/PacketData.h	/^		SEC_MC_RETRANSE_A  = 3,	$/;"	e	enum:base::ChannelType
SEC_MC_RETRANSE_B	base/PacketData.h	/^		SEC_MC_RETRANSE_B  = 4,	$/;"	e	enum:base::ChannelType
SEC_MC_SNAP	base/BaseCommon.h	/^		SEC_MC_SNAP,$/;"	m	class:base::PlaybackMode::IPType
SEC_MC_SNAP_A	base/PacketData.h	/^		SEC_MC_SNAP_A  = 3,	$/;"	e	enum:base::ChannelType
SEC_MC_SNAP_B	base/PacketData.h	/^		SEC_MC_SNAP_B  = 4,	$/;"	e	enum:base::ChannelType
SEC_TCP	base/BaseCommon.h	/^		SEC_TCP,$/;"	m	class:base::PlaybackMode::IPType
SEC_TCP_RETRANS	base/BaseCommon.h	/^		SEC_TCP_RETRANS,$/;"	m	class:base::PlaybackMode::IPType
SEC_TCP_SNAP	base/BaseCommon.h	/^		SEC_TCP_SNAP,$/;"	m	class:base::PlaybackMode::IPType
SELL	base/BaseCommon.h	/^		SELL = 'S',$/;"	e	enum:base::Side
SET_CALLBACK	base/BaseCommon.h	101;"	d
SIDE_UNKNOWN	base/BaseCommon.h	/^		SIDE_UNKNOWN = 'U'$/;"	e	enum:base::Side
SIZE_CHANGE	base/Quote.h	/^		SIZE_CHANGE = 2$/;"	e	enum:base::QuoteChange
SNAP	base/BaseCommon.h	/^		SNAP,$/;"	m	class:base::PlaybackMode::ChannelType
SNAPPING	base/Line.h	/^		SNAPPING,		\/\/ Snapping becuase of intraday $/;"	m	class:base::LineState
SOURCE_PUGIXML_CPP	infra/pugixml/pugixml.cpp	15;"	d	file:
SPSCQueue	infra/containers/spsc/SPSCQueue.h	/^			SPSCQueue(uint64_t size)$/;"	f	class:infra::SPSCQueue
SPSCQueue	infra/containers/spsc/SPSCQueue.h	/^	class SPSCQueue$/;"	c	namespace:infra
SPSCQueueElement	infra/containers/spsc/SPSCQueue.h	/^			SPSCQueueElement()$/;"	f	class:infra::SPSCQueueElement
SPSCQueueElement	infra/containers/spsc/SPSCQueue.h	/^	class SPSCQueueElement$/;"	c	namespace:infra
STATUS	base/BaseCommon.h	/^		STATUS			= 0x0008,$/;"	e	enum:base::PlaybackMode::Callback
STATUS_UPDATE	base/Base.h	/^		STATUS_UPDATE = 'S',$/;"	e	enum:base::UpdateType
SUCCESS	base/BaseCommon.h	/^		SUCCESS = 0,$/;"	e	enum:base::PlaybackError
SUCESS	base/MarketDataApplication.h	/^		SUCESS = 0,$/;"	e	enum:base::Error
SUSPENDED	base/Status.h	/^		SUSPENDED	= 10,$/;"	m	class:base::InstrState
SYMBOL	base/ProductInfo.h	/^        SYMBOL		= 1,$/;"	e	enum:base::ProductInfoFieldType
SeqRange	base/Line.h	/^			SeqRange(uint64_t head, uint64_t end)$/;"	f	class:base::SeqRange
SeqRange	base/Line.h	/^	class SeqRange$/;"	c	namespace:base
Side	base/BaseCommon.h	/^	enum Side$/;"	g	namespace:base
Socket	infra/socket/Socket.cpp	/^Socket::Socket()$/;"	f	class:Socket
Socket	infra/socket/Socket.cpp	/^Socket::Socket(const struct sockaddr_in *serverAddress, int32_t type)$/;"	f	class:Socket
Socket	infra/socket/Socket.h	/^	class Socket$/;"	c	namespace:infra
Start	base/Line.h	/^			typedef void (Line::*Start)();$/;"	t	class:base::Line
StateToCStr	base/Status.cpp	/^const char* Status::StateToCStr(InstrState state)$/;"	f	class:Status
Status	base/Status.h	/^	class Status: public Base$/;"	c	namespace:base
Status	base/Status.h	/^inline Status::Status(Subscription *sub)$/;"	f	class:Status
Subscription	base/Subscription.cpp	/^Subscription::Subscription(const char *symbol, bool activate)$/;"	f	class:Subscription
Subscription	base/Subscription.cpp	/^Subscription::Subscription(const uint64_t symbolID, bool activate)$/;"	f	class:Subscription
Subscription	base/Subscription.h	/^	class Subscription$/;"	c	namespace:base
THREAD_INITIALIZED	infra/thread/Thread.h	/^		THREAD_INITIALIZED,	\/\/ Thread is initialized $/;"	e	enum:infra::ThreadState
THREAD_SINGLED_STOP	infra/thread/Thread.h	/^		THREAD_SINGLED_STOP,\/\/ Signled thread to stop$/;"	e	enum:infra::ThreadState
THREAD_STARTED	infra/thread/Thread.h	/^		THREAD_STARTED,		\/\/ Thread is active\/running$/;"	e	enum:infra::ThreadState
THREAD_STOPPED	infra/thread/Thread.h	/^		THREAD_STOPPED		\/\/ Thread is stopped$/;"	e	enum:infra::ThreadState
TICKSIZE	base/ProductInfo.h	/^        TICKSIZE	= 3,$/;"	e	enum:base::ProductInfoFieldType
TIME	base/BaseCommon.h	/^		TIME = 1,$/;"	e	enum:base::PlaybackMode::RecordField
TRACE	infra/InfraCommon.h	/^			TRACE	= 0, \/\/\/< Log all the members from the message$/;"	e	enum:infra::LogLevel
TRADE	base/BaseCommon.h	/^		TRADE			= 0x0001,$/;"	e	enum:base::PlaybackMode::Callback
TRADE_OFFBOOK	base/Trade.h	/^		TRADE_OFFBOOK = 'F', $/;"	e	enum:base::TradeBook
TRADE_OFFEXCHANGE	base/Trade.h	/^		TRADE_OFFEXCHANGE = 'F',$/;"	e	enum:base::TradeExchange
TRADE_ONBOOK	base/Trade.h	/^		TRADE_ONBOOK = 'N',$/;"	e	enum:base::TradeBook
TRADE_ONEXCHANGE	base/Trade.h	/^		TRADE_ONEXCHANGE = 'N',$/;"	e	enum:base::TradeExchange
TRADE_UNKNOWNBOOK	base/Trade.h	/^		TRADE_UNKNOWNBOOK = 'U'$/;"	e	enum:base::TradeBook
TRADE_UNKNOWNEX	base/Trade.h	/^		TRADE_UNKNOWNEX	= 'U'$/;"	e	enum:base::TradeExchange
TRADE_UPDATE	base/Base.h	/^		TRADE_UPDATE = 'T',$/;"	e	enum:base::UpdateType
Thread	infra/thread/Thread.cpp	/^Thread::Thread(const base::MarketDataApplication *app, const pugi::xml_node configNode, const char *threadName, void *obj, void* (*funPtrStart)(void *))$/;"	f	class:Thread
Thread	infra/thread/Thread.h	/^	class Thread$/;"	c	namespace:infra
ThreadState	infra/thread/Thread.h	/^	enum ThreadState$/;"	g	namespace:infra
Trade	base/Trade.h	/^    class Trade : public Base$/;"	c	namespace:base
Trade	base/Trade.h	/^inline Trade::Trade(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double px, uint32_t size, Side side, uint64_t tradeID)$/;"	f	class:Trade
Trade	base/Trade.h	/^inline Trade::Trade(Subscription *sub)$/;"	f	class:Trade
TradeBook	base/Trade.h	/^	enum TradeBook $/;"	g	namespace:base
TradeExchange	base/Trade.h	/^	enum TradeExchange$/;"	g	namespace:base
UKNOWN	base/ProductInfo.h	/^        UKNOWN		= 0,$/;"	e	enum:base::ProductInfoFieldType
UNKNOWN	base/PacketData.h	/^		UNKNOWN = 0,$/;"	e	enum:base::ChannelType
UNKNOWN	base/ProductInfo.h	/^        UNKNOWN = 0,$/;"	e	enum:base::Currency
UNKNOWN	base/Status.h	/^		UNKNOWN	= 0,$/;"	m	class:base::InstrState
UNKNOWN	infra/InfraCommon.h	/^			UNKNOWN$/;"	e	enum:infra::LogLevel
UNKNOWN_FEED	base/FeedHandler.h	/^		UNKNOWN_FEED = 0,$/;"	m	class:base::FeedID
UNKNOWN_UPDATE	base/Base.h	/^		UNKNOWN_UPDATE = 'U'$/;"	e	enum:base::UpdateType
USD	base/ProductInfo.h	/^        USD     = 1,	\/\/ US DOLLER$/;"	e	enum:base::Currency
UpdateType	base/Base.h	/^	enum UpdateType$/;"	g	namespace:base
WARN	infra/InfraCommon.h	/^			WARN	= 4, \/\/\/< High usage,$/;"	e	enum:infra::LogLevel
WIDE	base/Quote.h	/^		WIDE = 'W',$/;"	e	enum:base::QuoteType
WLock	infra/lock/Lock.h	/^	typedef Lock WLock;$/;"	t	namespace:infra
WRITTEN	base/PacketData.h	/^		WRITTEN = 1,$/;"	e	enum:base::PacketState
WRITTEN	infra/containers/spsc/BoostSPSCQueue.h	/^	WRITTEN = 2$/;"	e	enum:infra::BoostElementState
WRITTEN	infra/containers/spsc/BoostSPSCQueue_with.h	/^	WRITTEN = 2$/;"	e	enum:infra::BoostElementState
WRITTEN	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^	WRITTEN = 2$/;"	e	enum:infra::BoostElementState
WRITTEN	infra/containers/spsc/SPSCQueue.h	/^		WRITTEN = 2$/;"	e	enum:infra::ElementState
Words	infra/judy/Judy.h	/^int Words = 0;$/;"	v
_FILE_OFFSET_BITS	infra/judy/Judy.cpp	44;"	d	file:
_FILE_OFFSET_BITS	infra/judy/JudyCore.cpp	44;"	d	file:
_IDType	base/BaseCommon.h	/^            IDType _IDType;$/;"	m	class:base::ID
_IPs	base/Line.h	/^			PacketAddress _IPs[static_cast<int>(IPType::IPTYPE_MAX)];$/;"	m	class:base::Line
_Iter_cat	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag _Iter_cat(const pugi::xml_attribute_iterator&)$/;"	f	namespace:std
_Iter_cat	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag _Iter_cat(const pugi::xml_named_node_iterator&)$/;"	f	namespace:std
_Iter_cat	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag _Iter_cat(const pugi::xml_node_iterator&)$/;"	f	namespace:std
_LARGEFILE_SOURCE	infra/judy/Judy.cpp	45;"	d	file:
_LARGEFILE_SOURCE	infra/judy/JudyCore.cpp	45;"	d	file:
__API_H__	base/API.h	2;"	d
__BASECOMMON_H__	base/BaseCommon.h	2;"	d
__BASE_H__	base/Base.h	2;"	d
__BOOK_H__	base/Book.h	2;"	d
__CONNECTION_H__	base/LineGroup.h	2;"	d
__CUSTOM_H__	base/Custom.h	2;"	d
__FEEDMANAGER_H__	base/FeedHandler.h	2;"	d
__INFRACOMMON_H__	infra/InfraCommon.h	2;"	d
__LINE_H__	base/Line.h	2;"	d
__LOCK_H	infra/lock/Lock.h	2;"	d
__LOGGER_H__	infra/logger/Logger.h	2;"	d
__MARKETDATAPPLICATION_H__	base/MarketDataApplication.h	2;"	d
__MESSAGE_H__	base/Message.h	2;"	d
__NETWORK_READER_H__	base/NetworkReader.h	2;"	d
__ORDER_H__	base/Order.h	2;"	d
__PACKETDATA_H__	base/PacketData.h	2;"	d
__PACKET_H__	base/Packet.h	2;"	d
__PRICELEVELS_H__	base/PriceLevel.h	2;"	d
__PRICELEVELS_H__	base/PriceLevels.h	2;"	d
__PRODUCTINFO_H__	base/ProductInfo.h	2;"	d
__QUOTE_H__	base/Quote.h	2;"	d
__RECORDER_H__	base/Recorder.h	2;"	d
__REFERENCEFILEREADER_H__	base/ReferenceFileReader.h	2;"	d
__SOCKET_H__	infra/socket/Socket.h	2;"	d
__SPSCQUEUE_H__	infra/containers/spsc/BoostSPSCQueue.h	2;"	d
__SPSCQUEUE_H__	infra/containers/spsc/BoostSPSCQueue_with.h	2;"	d
__SPSCQUEUE_H__	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	2;"	d
__SPSCQUEUE_H__	infra/containers/spsc/SPSCQueue.h	2;"	d
__STATUS_H__	base/Status.h	2;"	d
__STRING_UTILS_H__	infra/utils/StringUtils.h	2;"	d
__SUBSCRIPTION_H__	base/Subscription.h	2;"	d
__THREAD_H__	infra/thread/Thread.h	2;"	d
__TRADE_H__	base/Trade.h	2;"	d
__USE_FILE_OFFSET64	infra/judy/Judy.cpp	46;"	d	file:
__USE_FILE_OFFSET64	infra/judy/JudyCore.cpp	46;"	d	file:
__iterator_category	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag __iterator_category(const pugi::xml_attribute_iterator&)$/;"	f	namespace:std
__iterator_category	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag __iterator_category(const pugi::xml_named_node_iterator&)$/;"	f	namespace:std
__iterator_category	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::bidirectional_iterator_tag __iterator_category(const pugi::xml_node_iterator&)$/;"	f	namespace:std
_action	base/Order.h	/^			OrderAction	_action;$/;"	m	class:base::Order
_addIPs	base/NetworkReader.h	/^			std::vector<const PacketAddress*> _addIPs; \/\/ All IPs to add to read $/;"	m	class:base::NetworkReader
_alloc	infra/pugixml/pugixml.cpp	/^		xpath_allocator* _alloc;$/;"	m	struct:xpath_parser	file:
_alphaNumID	base/BaseCommon.h	/^	            char      _alphaNumID[20];$/;"	m	union:base::ID::__anon2
_appInstance	base/FeedHandler.h	/^			const MarketDataApplication   *_appInstance;$/;"	m	class:base::FeedHandler
_appInstance	base/Line.h	/^			const MarketDataApplication	*_appInstance;			$/;"	m	class:base::Line
_appInstance	base/LineGroup.h	/^			const MarketDataApplication	*_appInstance;			\/\/ App instance pointer$/;"	m	class:base::LineGroup
_appInstance	base/MarketDataApplication.h	/^			MarketDataApplication *_appInstance;	\/\/\/< Pointer to self for logging on console$/;"	m	class:base::MarketDataApplication
_appInstance	base/NetworkReader.h	/^			const MarketDataApplication *_appInstance; \/\/ App instance$/;"	m	class:base::NetworkReader
_appInstance	base/Recorder.h	/^			const MarketDataApplication *_appInstance;$/;"	m	class:base::Recorder
_appInstance	infra/logger/Logger.h	/^			const base::MarketDataApplication *_appInstance;$/;"	m	class:infra::Logger
_appInstance	infra/logger/Logger.h	/^			const base::MarketDataApplication *_appInstance;$/;"	m	class:infra::LoggerClientHandle
_appInstance	infra/thread/Thread.h	/^			const base::MarketDataApplication *_appInstance; \/\/ market data application instance to which thread belongs$/;"	m	class:infra::Thread
_assign	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xpath_node_set::_assign(const_iterator begin_, const_iterator end_)$/;"	f	class:pugi::xpath_node_set
_attr	infra/pugixml/pugixml.h	/^		xml_attribute_struct* _attr;$/;"	m	class:pugi::xml_attribute
_attribute	infra/pugixml/pugixml.h	/^		xml_attribute _attribute;$/;"	m	class:pugi::xpath_node
_axis	infra/pugixml/pugixml.cpp	/^		char _axis;$/;"	m	class:xpath_ast_node	file:
_back	infra/containers/spsc/SPSCQueue.h	/^		std::atomic<uint64_t> _back;$/;"	m	class:infra::SPSCQueue
_begin	infra/pugixml/pugixml.cpp	/^		xpath_node* _begin;$/;"	m	class:xpath_node_set_raw	file:
_begin	infra/pugixml/pugixml.h	/^		It _begin, _end;$/;"	m	class:pugi::xml_object_range
_begin	infra/pugixml/pugixml.h	/^		xpath_node* _begin;$/;"	m	class:pugi::xpath_node_set
_bindThreads	base/MarketDataApplication.h	/^			BindThreads	_bindThreads;$/;"	m	class:base::MarketDataApplication
_book	base/Subscription.h	/^			Book _book;$/;"	m	class:base::Subscription
_buff	infra/judy/JudyL2Array.h	/^        JudyKey _buff[1];$/;"	m	class:judyL2Array
_buff	infra/judy/JudyLArray.h	/^        JudyKey _buff[1];$/;"	m	class:judyLArray
_buff	infra/judy/JudyS2Array.h	/^        unsigned char * _buff;$/;"	m	class:judyS2Array
_buff	infra/judy/JudySArray.h	/^        unsigned char * _buff;$/;"	m	class:judySArray
_buffer	infra/pugixml/pugixml.cpp	/^		const char_t* _buffer;$/;"	m	class:xpath_string	file:
_buffer	infra/pugixml/pugixml.h	/^		char_t* _buffer;$/;"	m	class:pugi::xml_document
_busy_size	infra/pugixml/pugixml.cpp	/^		size_t _busy_size;$/;"	m	struct:xml_allocator	file:
_buy	base/Quote.h	/^		PriceLevel *_buy;$/;"	m	class:base::Quote
_buyQuantity	base/Book.h	/^			uint64_t _buyQuantity;$/;"	m	class:base::Book
_buys	base/Book.h	/^			std::map<double, PriceLevel *, std::greater<double>, BookAlloc<std::pair<const double, PriceLevel *> > > _buys;$/;"	m	class:base::Book
_callbacks	base/Line.h	/^			CallBacks _callbacks;$/;"	m	class:base::Line
_callbacks	base/Line.h	/^		uint32_t	_callbacks;$/;"	m	class:base::MessageFunc
_change	base/Quote.h	/^		QuoteChange _change; \/\/ Price\/Size $/;"	m	class:base::Quote
_channelType	base/Line.h	/^			ChannelType _channelType;$/;"	m	class:base::PacketAddress
_channelType	base/PacketData.h	/^		ChannelType	_channelType;	\/\/ If this is mc\/tcp, main\/retranse\/snap channel		$/;"	m	class:base::PacketData
_config	base/MarketDataApplication.h	/^			pugi::xml_parse_result _config;	\/\/\/< config xml handle$/;"	m	class:base::MarketDataApplication
_configFile	base/MarketDataApplication.h	/^			std::string	_configFile;		\/\/\/< config file path$/;"	m	class:base::MarketDataApplication
_connection	base/PacketData.h	/^		Connection* _connection;	\/\/ Connection to which PacketData belongs to, Initialised at constant time$/;"	m	class:base::PacketData
_contentType	base/Line.h	/^			ContentType	_contentType; \/\/ It is data packet or just HB$/;"	m	class:base::Line
_couldAssign	base/Line.h	/^		bool		_couldAssign;$/;"	m	class:base::MessageFunc
_counter	infra/lock/Lock.h	/^			T &_counter;$/;"	m	class:infra::AtomicLock
_cpu	infra/thread/Thread.h	/^			int32_t		_cpu;			\/\/ cpu to which to bind thread  $/;"	m	class:infra::Thread
_cur	infra/pugixml/pugixml.cpp	/^		const char_t* _cur;$/;"	m	class:xpath_lexer	file:
_cur_lexeme	infra/pugixml/pugixml.cpp	/^		lexeme_t _cur_lexeme;$/;"	m	class:xpath_lexer	file:
_cur_lexeme_contents	infra/pugixml/pugixml.cpp	/^		xpath_lexer_string _cur_lexeme_contents;$/;"	m	class:xpath_lexer	file:
_cur_lexeme_pos	infra/pugixml/pugixml.cpp	/^		const char_t* _cur_lexeme_pos;$/;"	m	class:xpath_lexer	file:
_currency	base/ProductInfo.h	/^        Currency	 _currency;$/;"	m	class:base::ProductInfo
_currentMsg	base/Line.h	/^			const char  *_currentMsg;	\/\/Points to current msg to be processed within _packetData$/;"	m	class:base::Line
_currentMsg	base/Message.h	/^		const char 				*_currentMsg;$/;"	m	class:base::Message
_data	infra/pugixml/pugixml.cpp	/^		} _data;$/;"	m	class:xpath_ast_node	typeref:union:xpath_ast_node::__anon10	file:
_data	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_text::_data() const$/;"	f	class:pugi::xml_text
_data	infra/pugixml/pugixml.h	/^		xpath_variable* _data[64];$/;"	m	class:pugi::xpath_variable_set
_data_new	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_text::_data_new()$/;"	f	class:pugi::xml_text
_depth	infra/judy/JudyL2Array.h	/^        unsigned int _maxLevels, _depth;$/;"	m	class:judyL2Array
_depth	infra/judy/JudyLArray.h	/^        unsigned int _maxLevels, _depth;$/;"	m	class:judyLArray
_depth	infra/pugixml/pugixml.h	/^		int _depth;$/;"	m	class:pugi::xml_tree_walker
_element	infra/containers/spsc/SPSCQueue.h	/^		T		 *_element;$/;"	m	class:infra::SPSCQueue
_elementState	infra/containers/spsc/BoostSPSCQueue.h	/^		std::atomic<uint32_t> _elementState;$/;"	m	class:infra::BoostSPSCQueueElement
_elementState	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::atomic<uint32_t> _elementState;$/;"	m	class:infra::BoostSPSCQueueElement
_elementState	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		uint8_t _elementState;$/;"	m	class:infra::BoostSPSCQueueElement
_elementState	infra/containers/spsc/SPSCQueue.h	/^			ElementState _elementState;$/;"	m	class:infra::SPSCQueueElement
_end	infra/pugixml/pugixml.cpp	/^		xpath_node* _end;$/;"	m	class:xpath_node_set_raw	file:
_end	infra/pugixml/pugixml.h	/^		It _begin, _end;$/;"	m	class:pugi::xml_object_range
_end	infra/pugixml/pugixml.h	/^		xpath_node* _end;$/;"	m	class:pugi::xpath_node_set
_endSeqNo	base/Line.h	/^			uint64_t	_endSeqNo;		\/\/Seq no of last msg Or if HB then _endSeqNo = _headerSq-1$/;"	m	class:base::Line
_endSeqNo	base/Line.h	/^			uint64_t _endSeqNo;$/;"	m	class:base::SeqRange
_eos	infra/pugixml/pugixml.cpp	/^		xpath_node* _eos;$/;"	m	class:xpath_node_set_raw	file:
_error_handler	infra/pugixml/pugixml.cpp	/^		jmp_buf _error_handler;$/;"	m	struct:xpath_parser	file:
_execute	base/Order.h	/^inline void Order::_execute(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double execPx, uint64_t execSize, uint64_t remaining)$/;"	f	class:Order
_feedAPI	base/FeedHandler.h	/^			FeedAPI *_feedAPI;$/;"	m	class:base::FeedHandler
_feedAPI	base/MarketDataApplication.h	/^			FeedAPI *_feedAPI;$/;"	m	class:base::MarketDataApplication
_feedHandler	base/BaseCommon.h	/^			const FeedHandler *_feedHandler;$/;"	m	class:base::PlaybackMode::Recording
_feedHandler	base/Line.h	/^			FeedHandler *_feedHandler;$/;"	m	class:base::Line
_feedHandler	base/LineGroup.h	/^			FeedHandler *_feedHandler;				\/\/ Feed manager pointer$/;"	m	class:base::LineGroup
_feedHandlerMap	base/MarketDataApplication.h	/^			NameToFeedHandlerMap _feedHandlerMap; \/\/\/< Name-FeedHandler map$/;"	m	class:base::MarketDataApplication
_feedID	base/FeedHandler.h	/^			const FeedID	_feedID;$/;"	m	class:base::FeedHandler
_feedStreams	base/NetworkReader.h	/^			std::map<FeedHandler *, std::vector<Recording *> > _feedStreams;$/;"	m	class:base::NetworkReader
_file	infra/logger/Logger.h	/^			const char	*_file;			\/\/ Name of source file$/;"	m	class:infra::LogMessage
_filename	base/BaseCommon.h	/^			const std::string _filename;$/;"	m	class:base::PlaybackMode::Recording
_front	infra/containers/spsc/SPSCQueue.h	/^		std::atomic<uint64_t> _front;$/;"	m	class:infra::SPSCQueue
_func	base/Message.h	/^		NativFunc				_func;$/;"	m	class:base::Message
_function	infra/logger/Logger.h	/^			const char	*_function;		\/\/ Function$/;"	m	class:infra::LogMessage
_gapCache	base/Line.h	/^			std::map<SeqRange, Packet *> _gapCache;$/;"	m	class:base::Line
_gapRequestedTill	base/Line.h	/^			uint64_t	_gapRequestedTill; \/\/Seq no of last re-requesetd gap message $/;"	m	class:base::Line
_getIdSub	base/FeedHandler.cpp	/^Subscription* FeedHandler::_getIdSub(uint64_t symbolID) $/;"	f	class:FeedHandler
_getProductInfo	base/FeedHandler.cpp	/^ProductInfo* FeedHandler::_getProductInfo(Line *line, uint32_t msgType, const char* symbol, uint64_t symbolID, const char *isin, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:FeedHandler
_getProductInfo	base/FeedHandler.cpp	/^ProductInfo* FeedHandler::_getProductInfo(Line *line, uint32_t msgType, uint64_t symbolID, const char* symbol, const char *isin, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:FeedHandler
_getSymbolSub	base/FeedHandler.cpp	/^Subscription* FeedHandler::_getSymbolSub(const char *symbol) $/;"	f	class:FeedHandler
_globalClock	base/MarketDataApplication.h	/^			struct timespec _globalClock;		\/\/\/< Maintains the current Time$/;"	m	class:base::MarketDataApplication	typeref:struct:base::MarketDataApplication::timespec
_headerSeqNo	base/Line.h	/^			uint64_t	_headerSeqNo;	\/\/Seq no of first msg Or if HB packet this is next expected$/;"	m	class:base::Line
_headerSeqNo	base/Line.h	/^			uint64_t _headerSeqNo;$/;"	m	class:base::SeqRange
_idOffset	base/Line.h	/^		uint16_t	_idOffset;$/;"	m	class:base::MessageFunc
_idSubMap	base/FeedHandler.h	/^			std::unordered_map<uint64_t, Subscription *> _idSubMap;$/;"	m	class:base::FeedHandler
_idSubMap	base/LineGroup.h	/^			std::unordered_map<uint64_t, Subscription *> _idSubMap;$/;"	m	class:base::LineGroup
_impl	infra/pugixml/pugixml.h	/^		void* _impl;$/;"	m	class:pugi::xpath_query
_in	base/BaseCommon.h	/^			infra::igzstream *_in;$/;"	m	class:base::PlaybackMode::Recording
_ipReadVector	base/NetworkReader.h	/^			std::vector<const PacketAddress *> _ipReadVector;  \/\/ read these IPs for packets$/;"	m	class:base::NetworkReader
_ipType	base/Line.h	/^			IPType _ipType;$/;"	m	class:base::PacketAddress
_isActive	base/Subscription.h	/^			std::atomic<bool>	_isActive;$/;"	m	class:base::Subscription
_isActive	infra/socket/Socket.h	/^			bool	_isActive;$/;"	m	class:infra::Socket
_isSnapStarted	base/Line.h	/^			bool _isSnapStarted;	\/\/ We have recieved the start of snapshot$/;"	m	class:base::Line
_isSnapshotEnd	base/Line.h	/^			bool _isSnapshotEnd;	\/\/ We have recieved the end of snapshot$/;"	m	class:base::Line
_isin	base/ProductInfo.h	/^        char		 _isin[12];$/;"	m	class:base::ProductInfo
_isin	base/Subscription.h	/^			char				_isin[13];$/;"	m	class:base::Subscription
_isinSubMap	base/FeedHandler.h	/^			judySArray<Subscription *> _isinSubMap;$/;"	m	class:base::FeedHandler
_judyarray	infra/judy/JudyL2Array.h	/^        Judy * _judyarray;$/;"	m	class:judyL2Array
_judyarray	infra/judy/JudyLArray.h	/^        Judy * _judyarray;$/;"	m	class:judyLArray
_judyarray	infra/judy/JudyS2Array.h	/^        Judy * _judyarray;$/;"	m	class:judyS2Array
_judyarray	infra/judy/JudySArray.h	/^        Judy * _judyarray;$/;"	m	class:judySArray
_kv	infra/judy/JudyLArray.h	/^        pair _kv;$/;"	m	class:judyLArray
_kv	infra/judy/JudySArray.h	/^        pair _kv;$/;"	m	class:judySArray
_lastBuyPx	base/Quote.h	/^		double _lastBuyPx;$/;"	m	class:base::Quote
_lastBuySize	base/Quote.h	/^		uint64_t _lastBuySize;$/;"	m	class:base::Quote
_lastSellPx	base/Quote.h	/^		double _lastSellPx;$/;"	m	class:base::Quote
_lastSellSize	base/Quote.h	/^		uint64_t _lastSellSize;$/;"	m	class:base::Quote
_lastSeqNo	base/Line.h	/^			uint64_t	_lastSeqNo;		\/\/Last processed seq no$/;"	m	class:base::Line
_lastSeqNo	base/Message.h	/^			uint64_t _lastSeqNo;$/;"	m	class:base::MessageInfo
_lastSlot	infra/judy/JudyL2Array.h	/^        vector ** _lastSlot;$/;"	m	class:judyL2Array
_lastSlot	infra/judy/JudyLArray.h	/^        JudyValue * _lastSlot;$/;"	m	class:judyLArray
_lastSlot	infra/judy/JudyS2Array.h	/^        vector ** _lastSlot;$/;"	m	class:judyS2Array
_lastSlot	infra/judy/JudySArray.h	/^        JudyValue * _lastSlot;$/;"	m	class:judySArray
_lastcpu	base/MarketDataApplication.h	/^			mutable uint32_t       _lastcpu;$/;"	m	class:base::MarketDataApplication
_left	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* _left;$/;"	m	class:xpath_ast_node	file:
_length	base/ReferenceFileReader.h	/^    unsigned int            _length;$/;"	m	struct:ReferenceFileRowField
_level	base/Order.h	/^			PriceLevel *_level; \/\/ level to which order belongs$/;"	m	class:base::Order
_level	infra/logger/Logger.h	/^			LogLevel	_level;			\/\/ Level of log being printed$/;"	m	class:infra::LogMessage
_level	infra/logger/Logger.h	/^			LogLevel _level;					\/\/ log level$/;"	m	class:infra::LoggerClientHandle
_level	infra/logger/Logger.h	/^			LogLevel _level;				\/\/ Loggers own log level and default for other log queues$/;"	m	class:infra::Logger
_lexer	infra/pugixml/pugixml.cpp	/^		xpath_lexer _lexer;$/;"	m	struct:xpath_parser	file:
_line	base/Base.h	/^			Line *_line;$/;"	m	class:base::Base
_lineAPI	base/Line.h	/^			LineAPI *_lineAPI;$/;"	m	class:base::Line
_lineConstructor	base/LineGroup.h	/^			LineConstructor _lineConstructor;$/;"	m	class:base::LineGroup
_lineGroup	base/Line.h	/^			LineGroup *_lineGroup;$/;"	m	class:base::Line
_lineGroup	base/Line.h	/^			const LineGroup *_lineGroup;$/;"	m	class:base::PacketAddress
_lineGroupAPI	base/LineGroup.h	/^			LineGroupAPI *_lineGroupAPI;$/;"	m	class:base::LineGroup
_lineGroupConstructor	base/FeedHandler.h	/^			const LineGroupConstructor _lineGroupConstructor;$/;"	m	class:base::FeedHandler
_lineGroupMap	base/FeedHandler.h	/^			NameToLineGroupMap _lineGroupMap;$/;"	m	class:base::FeedHandler
_lineHandler	base/PacketData.h	/^		LineHandler* _lineHandler;	\/\/ LineHandler which gonna process this packet;$/;"	m	class:base::PacketData
_lineMap	base/LineGroup.h	/^			NameToLineMap _lineMap;			\/\/ name to line map$/;"	m	class:base::LineGroup
_lineNo	infra/logger/Logger.h	/^			uint32_t	_lineNo;		\/\/ Line no of file$/;"	m	class:infra::LogMessage
_lineState	base/Line.h	/^			LineState	_lineState; \/\/ Is it just started[to be snapped], normal[snapped], gapped$/;"	m	class:base::Line
_logFile	infra/logger/Logger.h	/^			std::string	_logFile;			\/\/ Log file for writing logs$/;"	m	class:infra::Logger
_logFileHandle	infra/logger/Logger.h	/^			FILE *_logFileHandle;$/;"	m	class:infra::Logger
_logFileHandle	infra/logger/Logger.h	/^			const FILE *_logFileHandle; \/\/\/ file of the logger Instance;$/;"	m	class:infra::LoggerClientHandle
_logMessageQueue	infra/logger/Logger.h	/^			BoostSPSCQueue<LogMessage> _logMessageQueue;	\/\/ Queue of log messages$/;"	m	class:infra::LoggerClientHandle
_logQueueSize	infra/logger/Logger.h	/^			uint32_t _logQueueSize;				\/\/ size of queue$/;"	m	class:infra::LoggerClientHandle
_logQueueSize	infra/logger/Logger.h	/^			uint32_t _logQueueSize;			\/\/ Default value of every logQueue $/;"	m	class:infra::Logger
_logger	base/FeedHandler.h	/^			LoggerClientHandle	*_logger;$/;"	m	class:base::FeedHandler
_logger	infra/thread/Thread.h	/^			LoggerClientHandle *_logger; \/\/ logger client queue to which thread will write logs	$/;"	m	class:infra::Thread
_loggerClientHandlesVector	infra/logger/Logger.h	/^			std::vector<LoggerClientHandle *> _loggerClientHandlesVector;	\/\/ vector of logger client handles$/;"	m	class:infra::Logger
_loggerInstance	base/MarketDataApplication.h	/^			Logger		*_loggerInstance;	\/\/\/< Logger Instance$/;"	m	class:base::MarketDataApplication
_loggerInstance	infra/logger/Logger.h	/^			static Logger* _loggerInstance; \/\/ Global singleton _loggerInstance$/;"	m	class:infra::Logger
_lotSize	base/ProductInfo.h	/^        uint32_t	 _lotSize;$/;"	m	class:base::ProductInfo
_maintainOrders	base/FeedHandler.h	/^			bool _maintainOrders;$/;"	m	class:base::FeedHandler
_maintainOrders	base/Line.h	/^			bool _maintainOrders;$/;"	m	class:base::Line
_maxFileSize	infra/logger/Logger.h	/^			uint32_t _maxFileSize;			\/\/ Maximum size of the log file$/;"	m	class:infra::Logger
_maxKeyLen	infra/judy/JudyS2Array.h	/^        unsigned int _maxKeyLen;$/;"	m	class:judyS2Array
_maxKeyLen	infra/judy/JudySArray.h	/^        unsigned int _maxKeyLen;$/;"	m	class:judySArray
_maxLevels	infra/judy/JudyL2Array.h	/^        unsigned int _maxLevels, _depth;$/;"	m	class:judyL2Array
_maxLevels	infra/judy/JudyLArray.h	/^        unsigned int _maxLevels, _depth;$/;"	m	class:judyLArray
_memory	infra/pugixml/pugixml.h	/^		char _memory[192];$/;"	m	class:pugi::xml_document
_message	infra/logger/Logger.h	/^			char 		_message[LOG_MSG_SIZE];	\/\/ Message Buffer$/;"	m	class:infra::LogMessage
_ml	base/LineGroup.h	/^			uint64_t _ml[LATENCY_SIZE]; \/\/ message processing to callback fire latency$/;"	m	class:base::LineGroup
_mode	base/FeedHandler.h	/^			const PlaybackMode _mode;$/;"	m	class:base::FeedHandler
_mode	base/NetworkReader.h	/^			PlaybackMode 	_mode;$/;"	m	class:base::NetworkReader
_modify	base/Order.h	/^inline void Order::_modify(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double px, uint32_t size)$/;"	f	class:Order
_msgInfo	base/Message.h	/^		MessageInfo				_msgInfo;$/;"	m	class:base::Message
_msgType	base/Base.h	/^				, _msgType(msgType)$/;"	f	class:base::Base
_msgType	base/Base.h	/^			uint32_t _msgType;$/;"	m	class:base::Base
_mt	base/LineGroup.h	/^			timespec		_mt; \/\/ message time$/;"	m	class:base::LineGroup
_mutex	base/MarketDataApplication.h	/^			std::mutex	_mutex;	 			\/\/\/< Mutex lock for whole class data members $/;"	m	class:base::MarketDataApplication
_mutex	infra/lock/Lock.h	/^			std::mutex &_mutex;$/;"	m	class:infra::Lock
_mutex	infra/logger/Logger.h	/^			std::mutex	_mutex;$/;"	m	class:infra::Logger
_mutex	infra/thread/Thread.h	/^			mutable std::mutex	_mutex;		\/\/ mutex for state change and cpu allocation$/;"	m	class:infra::Thread
_mutexToAddRemove	base/NetworkReader.h	/^			std::mutex		_mutexToAddRemove;$/;"	m	class:base::NetworkReader
_name	base/FeedHandler.h	/^            const char 	_name[NAME_SIZE];$/;"	m	class:base::FeedHandler
_name	base/Line.h	/^            const char _name[NAME_SIZE];$/;"	m	class:base::Line
_name	base/LineGroup.h	/^			const char _name[NAME_SIZE];						\/\/ Name of the Line group$/;"	m	class:base::LineGroup
_name	base/MarketDataApplication.h	/^			const char	_name[NAME_SIZE];			\/\/\/< Logical name of an application $/;"	m	class:base::MarketDataApplication
_name	base/NetworkReader.h	/^			const char _name[NAME_SIZE];	\/\/ Name of thread belonging to network reader$/;"	m	class:base::NetworkReader
_name	base/Recorder.h	/^			const char _name[NAME_SIZE];$/;"	m	class:base::Recorder
_name	infra/logger/Logger.h	/^			const char _name[NAME_SIZE];	\/\/ Name of logger$/;"	m	class:infra::Logger
_name	infra/pugixml/pugixml.h	/^		const char_t* _name;$/;"	m	class:pugi::xml_named_node_iterator
_name	infra/thread/Thread.h	/^			const char  _name[NAME_SIZE];	\/\/ Name of thread$/;"	m	class:infra::Thread
_nativFunc	base/Line.h	/^		NativFunc	_nativFunc;$/;"	m	class:base::MessageFunc
_nativGetPacketStats	base/Line.h	/^			GetPackStats _nativGetPacketStats;$/;"	m	class:base::Line
_nativGetPacketStatsSnap	base/Line.h	/^			GetPackStatsSnap _nativGetPacketStatsSnap;$/;"	m	class:base::Line
_nativReRequestMissedPackets	base/Line.h	/^			ReRequestMissedPackets _nativReRequestMissedPackets;$/;"	m	class:base::Line
_nativStart	base/Line.h	/^			Start _nativStart;$/;"	m	class:base::Line
_networkReader	base/LineGroup.h	/^			NetworkReader *_networkReader;	\/\/ Network reader to which all lines of group belong$/;"	m	class:base::LineGroup
_networkReaderMap	base/MarketDataApplication.h	/^			NameToNetworkReaderMap _networkReaderMap; \/\/\/< Name-NetworkReader map$/;"	m	class:base::MarketDataApplication
_next	base/Order.h	/^			Order	*_next;	\/\/ Next order on the same level$/;"	m	class:base::Order
_next	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* _next;$/;"	m	class:xpath_ast_node	file:
_next	infra/pugixml/pugixml.h	/^		xpath_variable* _next;$/;"	m	class:pugi::xpath_variable
_node	infra/pugixml/pugixml.h	/^		xml_node _node;$/;"	m	class:pugi::xpath_node
_numOrders	base/PriceLevel.h	/^			uint64_t _numOrders;$/;"	m	class:base::PriceLevel
_numericID	base/BaseCommon.h	/^            	uint64_t  _numericID;$/;"	m	union:base::ID::__anon2
_obj	infra/thread/Thread.h	/^			void 		*_obj;			\/\/ obj of class to which thread belongs$/;"	m	class:infra::Thread
_objToThreadMap	infra/thread/Thread.h	/^			static ObjToThreadMap _objToThreadMap;$/;"	m	class:infra::Thread
_oldPx	base/Order.h	/^            double _oldPx;$/;"	m	class:base::Order
_oldSize	base/Order.h	/^            uint32_t _oldSize;$/;"	m	class:base::Order
_om	base/LineGroup.h	/^			uint64_t _om[LATENCY_SIZE]; \/\/ order map latency $/;"	m	class:base::LineGroup
_onBook	base/API.h	/^			OnBook _onBook;$/;"	m	class:base::LineAPI
_onCustom	base/API.h	/^			OnCustom _onCustom;$/;"	m	class:base::LineAPI
_onFeedStarted	base/API.h	/^			OnFeedStarted _onFeedStarted;$/;"	m	class:base::FeedAPI
_onFeedStopped	base/API.h	/^			OnFeedStopped _onFeedStopped;$/;"	m	class:base::FeedAPI
_onLineGroupStarted	base/API.h	/^			OnLineGroupStarted _onLineGroupStarted;$/;"	m	class:base::LineGroupAPI
_onLineGroupStopped	base/API.h	/^			OnLineGroupStopped _onLineGroupStopped;$/;"	m	class:base::LineGroupAPI
_onLineStarted	base/API.h	/^			OnLineStarted _onLineStarted;$/;"	m	class:base::LineAPI
_onLineStopped	base/API.h	/^			OnLineStopped _onLineStopped;$/;"	m	class:base::LineAPI
_onOrder	base/API.h	/^			OnOrder _onOrder;$/;"	m	class:base::LineAPI
_onPacketEnd	base/API.h	/^			OnPacketEnd	  _onPacketEnd;$/;"	m	class:base::LineAPI
_onPacketStart	base/API.h	/^			OnPacketStart _onPacketStart;$/;"	m	class:base::LineAPI
_onProductInfo	base/API.h	/^			OnProductInfo _onProductInfo;$/;"	m	class:base::LineAPI
_onQuote	base/API.h	/^			OnQuote _onQuote;$/;"	m	class:base::LineAPI
_onStatus	base/API.h	/^			OnStatus _onStatus;$/;"	m	class:base::LineAPI
_onTrade	base/API.h	/^			OnTrade	_onTrade;$/;"	m	class:base::LineAPI
_op	base/LineGroup.h	/^			uint64_t _op[LATENCY_SIZE]; \/\/ order pool latency $/;"	m	class:base::LineGroup
_orderID	base/Order.h	/^            ID _orderID;$/;"	m	class:base::Order
_orderMap	base/Line.cpp	/^	, _orderMap(nullptr)$/;"	f
_orderMap	base/Line.h	/^			std::unordered_map<uint64_t, Order*> *_orderMap; \/\/ order object map $/;"	m	class:base::Line
_orderPool	base/Line.h	/^			OrderPool *_orderPool; \/\/ order object pool$/;"	m	class:base::Line
_orderPool	base/Order.h	/^			OrderPool *_orderPool; \/\/ to which order belongs$/;"	m	class:base::Order
_orderType	base/Order.h	/^			OrderType _orderType;$/;"	m	class:base::Order
_orders	base/PriceLevel.h	/^			Order *_orders;$/;"	m	class:base::PriceLevel
_out	base/BaseCommon.h	/^			infra::ogzstream *_out;$/;"	m	class:base::PlaybackMode::Recording
_pInfoFieldType	base/ReferenceFileReader.h	/^    ProductInfoFieldType*	_pInfoFieldType;$/;"	m	struct:ReferenceFileRowField
_pLine	base/Line.h	/^			const Line *_pLine;$/;"	m	class:base::PacketAddress
_pPacketQueue	base/Line.h	/^			BoostSPSCQueue<Packet>  *_pPacketQueue; $/;"	m	class:base::PacketAddress
_packet	base/Line.h	/^			Packet *_packet; \/\/ This is packet to be procesed$/;"	m	class:base::Line
_packet	base/Message.h	/^		std::shared_ptr<Packet> _packet;$/;"	m	class:base::Message
_packetAddress	base/Packet.h	/^			const PacketAddress	*_packetAddress;$/;"	m	class:base::Packet
_packetData	base/Packet.h	/^			char			_packetData[PACKET_DATA_SIZE];$/;"	m	class:base::Packet
_packetData	base/PacketData.h	/^		char		_packetData[PACKET_SIZE]; \/\/ Actual contents of the packet$/;"	m	class:base::PacketData
_packetDataLen	base/Packet.h	/^			uint32_t		_packetDataLen;$/;"	m	class:base::Packet
_packetLen	base/PacketData.h	/^		size_t		_packetLen;		\/\/ Length of valid data in below char array$/;"	m	class:base::PacketData
_packetQueue	base/LineGroup.h	/^			BoostSPSCQueue<Packet>  *_packetQueue; $/;"	m	class:base::LineGroup
_packetState	base/PacketData.h	/^		PacketState	_packetState;	\/\/PacketState in the Queue$/;"	m	class:base::PacketQueueElement
_parent	infra/pugixml/pugixml.h	/^		xml_node _parent;$/;"	m	class:pugi::xml_attribute_iterator
_parent	infra/pugixml/pugixml.h	/^		xml_node _parent;$/;"	m	class:pugi::xml_named_node_iterator
_parent	infra/pugixml/pugixml.h	/^		xml_node _parent;$/;"	m	class:pugi::xml_node_iterator
_pbLocation	base/FeedHandler.h	/^			std::string _pbLocation;$/;"	m	class:base::FeedHandler
_playbackFilesVector	base/FeedHandler.h	/^			const std::vector<std::string>	_playbackFilesVector;$/;"	m	class:base::FeedHandler
_pool	base/Book.h	/^			boost::object_pool<T> _pool;$/;"	m	class:base::BookAlloc
_prevState	base/Status.h	/^			InstrState _prevState;$/;"	m	class:base::Status
_priceLevelPool	base/Line.h	/^			PriceLevelPool *_priceLevelPool;\/\/pool for allocating price levels$/;"	m	class:base::Line
_priceLevels	base/Book.h	/^			PriceLevelMap *_priceLevels;	$/;"	m	class:base::PriceLevels
_processPacket	base/Line.h	/^			const ProcessPacket _processPacket;$/;"	m	class:base::Line
_prodInfo	base/Subscription.h	/^			ProductInfo	*_prodInfo;$/;"	m	class:base::Subscription
_prodInfoMap	base/FeedHandler.h	/^			judySArray<ProductInfo *> _prodInfoMap;$/;"	m	class:base::FeedHandler
_prodInfoMapID	base/FeedHandler.h	/^			std::map<uint64_t, ProductInfo *> _prodInfoMapID;$/;"	m	class:base::FeedHandler
_prodInfoMapISIN	base/FeedHandler.h	/^			judySArray<ProductInfo *> _prodInfoMapISIN;$/;"	m	class:base::FeedHandler
_px	base/Order.h	/^            double _px;$/;"	m	class:base::Order
_px	base/PriceLevel.h	/^			double _px;$/;"	m	class:base::PriceLevel
_px	base/Trade.h	/^            double          _px;$/;"	m	class:base::Trade
_ql	base/LineGroup.h	/^			uint64_t _ql[LATENCY_SIZE]; \/\/ avrage read latency of net reader q $/;"	m	class:base::LineGroup
_quantity	base/Book.h	/^			uint64_t _quantity;$/;"	m	class:base::PriceLevels
_query	infra/pugixml/pugixml.cpp	/^		const char_t* _query;$/;"	m	struct:xpath_parser	file:
_quote	base/Subscription.h	/^			Quote _quote;	$/;"	m	class:base::Subscription
_reRecord	base/BaseCommon.h	/^			infra::ogzstream *_reRecord;$/;"	m	class:base::PlaybackMode::Recording
_reRecord	base/FeedHandler.h	/^			bool _reRecord;$/;"	m	class:base::FeedHandler
_readLatency	base/LineGroup.h	/^			uint64_t _readLatency[LATENCY_SIZE]; \/\/ Time took to detect read packet availibility $/;"	m	class:base::LineGroup
_recordPlayback	base/FeedHandler.h	/^			bool _recordPlayback;$/;"	m	class:base::FeedHandler
_recordQueue	base/NetworkReader.h	/^			BoostSPSCQueue<Packet>* _recordQueue;$/;"	m	class:base::NetworkReader
_recordQueues	base/Recorder.h	/^			std::vector<std::pair<const NetworkReader*, BoostSPSCQueue<Packet> *> > _recordQueues;$/;"	m	class:base::Recorder
_recordTime	base/Packet.h	/^			timespec			_recordTime;$/;"	m	class:base::Packet
_recorder	base/MarketDataApplication.h	/^			Recorder *_recorder; \/\/recorder instance$/;"	m	class:base::MarketDataApplication
_recording	base/FeedHandler.h	/^			Recording *_recording;$/;"	m	class:base::FeedHandler
_recordingMutex	base/FeedHandler.h	/^			std::mutex _recordingMutex;$/;"	m	class:base::FeedHandler
_regexMap	base/FeedHandler.h	/^			std::vector<std::regex>	_regexMap;$/;"	m	class:base::FeedHandler
_removeIPs	base/NetworkReader.h	/^			std::vector<const PacketAddress*> _removeIPs; \/\/ All IPs to add to read $/;"	m	class:base::NetworkReader
_result	infra/pugixml/pugixml.cpp	/^		xpath_parse_result* _result;$/;"	m	struct:xpath_parser	file:
_result	infra/pugixml/pugixml.h	/^		xpath_parse_result _result;$/;"	m	class:pugi::xpath_exception
_result	infra/pugixml/pugixml.h	/^		xpath_parse_result _result;$/;"	m	class:pugi::xpath_query
_rettype	infra/pugixml/pugixml.cpp	/^		char _rettype;$/;"	m	class:xpath_ast_node	file:
_right	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* _right;$/;"	m	class:xpath_ast_node	file:
_rl	base/LineGroup.h	/^			uint64_t _rl[LATENCY_SIZE]; \/\/ recieve latency from packet read to callback$/;"	m	class:base::LineGroup
_root	infra/pugixml/pugixml.cpp	/^		xml_memory_page* _root;$/;"	m	struct:xml_allocator	file:
_root	infra/pugixml/pugixml.cpp	/^		xpath_memory_block* _root;$/;"	m	class:xpath_allocator	file:
_root	infra/pugixml/pugixml.h	/^		xml_node_struct* _root;$/;"	m	class:pugi::xml_node
_root	infra/pugixml/pugixml.h	/^		xml_node_struct* _root;$/;"	m	class:pugi::xml_text
_root_size	infra/pugixml/pugixml.cpp	/^		size_t _root_size;$/;"	m	class:xpath_allocator	file:
_rt	base/Packet.h	/^			timespec         _rt; \/\/recieve time$/;"	m	class:base::Packet
_scratch	infra/pugixml/pugixml.cpp	/^		char_t _scratch[32];$/;"	m	struct:xpath_parser	file:
_sell	base/Quote.h	/^		PriceLevel *_sell;$/;"	m	class:base::Quote
_sellQuantity	base/Book.h	/^			uint64_t _sellQuantity;$/;"	m	class:base::Book
_sells	base/Book.h	/^			std::map<double, PriceLevel *, std::less<double>, BookAlloc<std::pair<const double, PriceLevel *> > > _sells;$/;"	m	class:base::Book
_seqNum	base/Base.h	/^			uint64_t _seqNum;$/;"	m	class:base::Base
_sf	base/LineGroup.h	/^			uint64_t _sf[LATENCY_SIZE]; \/\/ Subscription finding latency $/;"	m	class:base::LineGroup
_side	base/Order.h	/^			Side _side;$/;"	m	class:base::Order
_side	base/Trade.h	/^            Side			_side;$/;"	m	class:base::Trade
_size	base/Line.h	/^		uint16_t	_size;$/;"	m	class:base::MessageFunc
_size	base/Order.h	/^            uint32_t _size;$/;"	m	class:base::Order
_size	base/PriceLevel.h	/^			uint64_t _size;$/;"	m	class:base::PriceLevel
_size	base/Trade.h	/^            uint32_t		_size;$/;"	m	class:base::Trade
_size	infra/containers/spsc/SPSCQueue.h	/^		std::atomic<uint64_t> _size;$/;"	m	class:infra::SPSCQueue
_snapCache	base/Line.h	/^			std::map<SeqRange, Packet *> _snapCache;$/;"	m	class:base::Line
_snapshotEnabled	base/Line.h	/^			bool _snapshotEnabled;$/;"	m	class:base::Line
_snapshotSyncNo	base/Line.h	/^			uint64_t _snapshotSyncNo; \/\/ To this seq no from the mainline we are synced.$/;"	m	class:base::Line
_socket	base/Line.h	/^			Socket	_socket;$/;"	m	class:base::PacketAddress
_sockfd	infra/socket/Socket.h	/^			int32_t _sockfd;$/;"	m	class:infra::Socket
_start	base/LineGroup.cpp	/^void* LineGroup::_start(void *obj)$/;"	f	class:LineGroup
_start	base/Recorder.cpp	/^void* Recorder::_start(void *obj)$/;"	f	class:Recorder
_startRoutine	infra/thread/Thread.h	/^			start_routine _startRoutine;	\/\/ thread entry of function$/;"	m	class:infra::Thread
_state	base/Status.h	/^			InstrState _state;$/;"	m	class:base::Status
_state	infra/pugixml/pugixml.cpp	/^		xpath_allocator _state;$/;"	m	struct:xpath_allocator_capture	file:
_status	base/Subscription.h	/^			Status _status;$/;"	m	class:base::Subscription
_stdThread	infra/thread/Thread.h	/^			std::thread *_stdThread;	\/\/ std::thread handle$/;"	m	class:infra::Thread
_stopApp	base/NetworkReader.h	/^			bool _stopApp;$/;"	m	class:base::NetworkReader
_storage	infra/pugixml/pugixml.h	/^		xpath_node _storage;$/;"	m	class:pugi::xpath_node_set
_sub	base/Base.h	/^			Subscription *_sub;$/;"	m	class:base::Base
_sub	base/Line.h	/^			Subscription *_sub;$/;"	m	class:base::Line
_sub	base/Message.h	/^		Subscription			*_sub;$/;"	m	class:base::Message
_subMapMutex	base/FeedHandler.h	/^			std::mutex _subMapMutex;$/;"	m	class:base::FeedHandler
_success	infra/judy/JudyL2Array.h	/^        bool _success;$/;"	m	class:judyL2Array
_success	infra/judy/JudyLArray.h	/^        bool _success;$/;"	m	class:judyLArray
_success	infra/judy/JudyS2Array.h	/^        bool _success;$/;"	m	class:judyS2Array
_success	infra/judy/JudySArray.h	/^        bool _success;$/;"	m	class:judySArray
_symbol	base/ProductInfo.h	/^        char		 _symbol[NAME_SIZE];$/;"	m	class:base::ProductInfo
_symbol	base/Subscription.h	/^			char				_symbol[NAME_SIZE];$/;"	m	class:base::Subscription
_symbolID	base/ProductInfo.h	/^        uint64_t	 _symbolID;$/;"	m	class:base::ProductInfo
_symbolID	base/Subscription.h	/^			uint64_t			_symbolID;$/;"	m	class:base::Subscription
_symbolSubMap	base/FeedHandler.h	/^			judySArray<Subscription *> _symbolSubMap;$/;"	m	class:base::FeedHandler
_symbolSubMap	base/LineGroup.h	/^			std::map<char *, Subscription *> _symbolSubMap;$/;"	m	class:base::LineGroup
_target	infra/pugixml/pugixml.cpp	/^		xpath_allocator* _target;$/;"	m	struct:xpath_allocator_capture	file:
_test	infra/pugixml/pugixml.cpp	/^		char _test;$/;"	m	class:xpath_ast_node	file:
_thread	base/Line.h	/^			const Thread *_thread;	$/;"	m	class:base::Line
_thread	base/LineGroup.h	/^			Thread *_thread;$/;"	m	class:base::LineGroup
_thread	base/MarketDataApplication.h	/^			Thread		*_thread; 			\/\/\/< Main application thread$/;"	m	class:base::MarketDataApplication
_thread	base/NetworkReader.h	/^			Thread 		*_thread;$/;"	m	class:base::NetworkReader
_thread	base/Recorder.h	/^			Thread *_thread;$/;"	m	class:base::Recorder
_thread	infra/logger/Logger.h	/^			Thread *_thread;				\/\/ Loggers own thread$/;"	m	class:infra::Logger
_thread	infra/logger/Logger.h	/^			const Thread	*_thread; 		\/\/  Thread to which LoggerClientHandle is associated$/;"	m	class:infra::LoggerClientHandle
_thread	infra/thread/Thread.h	/^			Thread		*_thread;		\/\/ self pointer for logginf into file$/;"	m	class:infra::Thread
_threadID	infra/thread/Thread.h	/^			uint32_t 	_threadID;		\/\/ Threads Id saved $/;"	m	class:infra::Thread
_threadState	infra/thread/Thread.h	/^			ThreadState _threadState;	\/\/ current state of thread$/;"	m	class:infra::Thread
_threadToClientHandlesMap	infra/logger/Logger.h	/^			std::map<Thread *, LoggerClientHandle *> _threadToClientHandlesMap;	\/\/ Thread to client handle map$/;"	m	class:infra::Logger
_tickSize	base/ProductInfo.h	/^        uint32_t	 _tickSize;$/;"	m	class:base::ProductInfo
_time	base/MarketDataApplication.h	/^			std::atomic<__int128> _time;$/;"	m	class:base::MarketDataApplication
_time	base/PacketData.h	/^		TimeStamp	_time; 			\/\/ Time when packet was recieved by market data server$/;"	m	class:base::PacketData
_timeStamp	infra/logger/Logger.h	/^			timespec		_timeStamp;		\/\/ Logging timestamp		$/;"	m	class:infra::LogMessage
_trade	base/Subscription.h	/^			Trade _trade;$/;"	m	class:base::Subscription
_tradeBook	base/Trade.h	/^			TradeBook		_tradeBook;$/;"	m	class:base::Trade
_tradeExchange	base/Trade.h	/^			TradeExchange	_tradeExchange;$/;"	m	class:base::Trade
_tradeID	base/Trade.h	/^            ID				_tradeID;$/;"	m	class:base::Trade
_type	base/Base.h	/^			UpdateType _type;$/;"	m	class:base::Base
_type	base/Line.h	/^			int32_t _type;$/;"	m	class:base::IP
_type	infra/pugixml/pugixml.cpp	/^		char _type;$/;"	m	class:xpath_ast_node	file:
_type	infra/pugixml/pugixml.cpp	/^		xpath_node_set::type_t _type;$/;"	m	class:xpath_node_set_raw	file:
_type	infra/pugixml/pugixml.h	/^		type_t _type;$/;"	m	class:pugi::xpath_node_set
_type	infra/pugixml/pugixml.h	/^		xpath_value_type _type;$/;"	m	class:pugi::xpath_variable
_updateIPVector	base/NetworkReader.h	/^			bool			_updateIPVector;$/;"	m	class:base::NetworkReader
_uses_heap	infra/pugixml/pugixml.cpp	/^		bool _uses_heap;$/;"	m	class:xpath_string	file:
_variables	infra/pugixml/pugixml.cpp	/^		xpath_variable_set* _variables;$/;"	m	struct:xpath_parser	file:
_wrap	infra/pugixml/pugixml.h	/^		mutable xml_attribute _wrap;$/;"	m	class:pugi::xml_attribute_iterator
_wrap	infra/pugixml/pugixml.h	/^		mutable xml_node _wrap;$/;"	m	class:pugi::xml_named_node_iterator
_wrap	infra/pugixml/pugixml.h	/^		mutable xml_node _wrap;$/;"	m	class:pugi::xml_node_iterator
_xt	base/Base.h	/^			timespec  _xt;$/;"	m	class:base::Base
_xtNanoSecs	base/Line.h	/^			uint32_t _xtNanoSecs;	\/\/ Commong msg exchange nano sec part from nano seconds time msg$/;"	m	class:base::Line
_xtSecs	base/Line.h	/^			uint32_t _xtSecs;		\/\/ Commong msg exchange epoch in packet header or time msg$/;"	m	class:base::Line
_xtSecs	base/Message.h	/^			uint64_t _xtSecs;$/;"	m	class:base::MessageInfo
action.onproject	infra/pugixml/scripts/premake4.lua	/^		function action.onproject(prj)$/;"	f
action.onproject	infra/pugixml/scripts/premake4.lua	/^	function action.onproject(prj)$/;"	f
action.onsolution	infra/pugixml/scripts/premake4.lua	/^		function action.onsolution(sln)$/;"	f
add	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::add(const char_t* name, xpath_value_type type)$/;"	f	class:pugi::xpath_variable_set
addIPToNetworkReader	base/NetworkReader.cpp	/^void NetworkReader::addIPToNetworkReader(const PacketAddress* pPacketAddress)$/;"	f	class:NetworkReader
addOrder	base/Book.cpp	/^void Book::addOrder(Order *order, bool modifyOrder)$/;"	f	class:Book
addOrder	base/Book.cpp	/^void Book::addOrder(Side side, double px, uint64_t size, bool modifyOrder)$/;"	f	class:Book
addOrder	base/PriceLevel.cpp	/^void PriceLevel::addOrder(Order *order)$/;"	f	class:PriceLevel
addOrder	base/PriceLevel.cpp	/^void PriceLevel::addOrder(uint64_t size)$/;"	f	class:PriceLevel
addToCache	base/Line.cpp	/^int32_t Line::addToCache(std::map<SeqRange, Packet *> &_cache)$/;"	f	class:Line
addToGapCache	base/Line.cpp	/^int32_t Line::addToGapCache()$/;"	f	class:Line
addToSnapCache	base/Line.cpp	/^int32_t Line::addToSnapCache()$/;"	f	class:Line
address	base/Book.h	/^			const_pointer address (const_reference value) const {$/;"	f	class:base::BookAlloc
address	base/Book.h	/^			pointer address (reference value) const {$/;"	f	class:base::BookAlloc
alloc	infra/pugixml/pugixml.cpp	/^		xml_allocator alloc;$/;"	m	struct:xml_parser	file:
alloc	infra/pugixml/pugixml.cpp	/^		xpath_allocator alloc;$/;"	m	struct:xpath_query_impl	file:
alloc_node	infra/pugixml/pugixml.cpp	/^		void* alloc_node()$/;"	f	struct:xpath_parser
alloc_string	infra/pugixml/pugixml.cpp	/^		const char_t* alloc_string(const xpath_lexer_string& value)$/;"	f	struct:xpath_parser
allocate	base/Book.h	/^			pointer allocate (size_type num, const void* = 0) {$/;"	f	class:base::BookAlloc
allocate	infra/pugixml/pugixml.cpp	/^		static allocation_function allocate;$/;"	m	struct:xml_memory_management_function_storage	file:
allocate	infra/pugixml/pugixml.cpp	/^		void* allocate(size_t size)$/;"	f	class:xpath_allocator
allocate	infra/pugixml/pugixml.cpp	/^	template <typename T> allocation_function xml_memory_management_function_storage<T>::allocate = default_allocate;$/;"	m	class:xml_memory_management_function_storage	file:
allocate_attribute	infra/pugixml/pugixml.cpp	/^	inline xml_attribute_struct* allocate_attribute(xml_allocator& alloc)$/;"	f
allocate_memory	infra/pugixml/pugixml.cpp	/^		void* allocate_memory(size_t size, xml_memory_page*& out_page)$/;"	f	struct:xml_allocator
allocate_memory_oob	infra/pugixml/pugixml.cpp	/^	PUGI__FN_NO_INLINE void* xml_allocator::allocate_memory_oob(size_t size, xml_memory_page*& out_page)$/;"	f	class:xml_allocator
allocate_node	infra/pugixml/pugixml.cpp	/^	inline xml_node_struct* allocate_node(xml_allocator& alloc, xml_node_type type)$/;"	f
allocate_nothrow	infra/pugixml/pugixml.cpp	/^		void* allocate_nothrow(size_t size)$/;"	f	class:xpath_allocator
allocate_page	infra/pugixml/pugixml.cpp	/^		xml_memory_page* allocate_page(size_t data_size)$/;"	f	struct:xml_allocator
allocate_string	infra/pugixml/pugixml.cpp	/^		char_t* allocate_string(size_t length)$/;"	f	struct:xml_allocator
allocation_function	infra/pugixml/docs/manual/dom.html	/^          <a name="allocation_function"><\/a><a name="deallocation_function"><\/a>All$/;"	a
allocation_function	infra/pugixml/pugixml.h	/^	typedef void* (*allocation_function)(size_t size);$/;"	t	namespace:pugi
allocator	infra/pugixml/pugixml.cpp	/^		xml_allocator* allocator;$/;"	m	struct:xml_memory_page	file:
allow_insert_child	infra/pugixml/pugixml.cpp	/^	inline bool allow_insert_child(xml_node_type parent, xml_node_type child)$/;"	f
allow_remote_predicate	infra/pugixml/docs/samples/traverse_predicate.cpp	/^struct allow_remote_predicate$/;"	s	file:
alphanum	base/BaseCommon.cpp	/^const char* ID::alphanum() const$/;"	f	class:ID
any	infra/pugixml/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
any	infra/pugixml/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
any	infra/pugixml/pugixml.cpp	/^		static value_type any(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
append	infra/pugixml/pugixml.cpp	/^		void append(const xpath_node* begin_, const xpath_node* end_, xpath_allocator* alloc)$/;"	f	class:xpath_node_set_raw
append	infra/pugixml/pugixml.cpp	/^		void append(const xpath_string& o, xpath_allocator* alloc)$/;"	f	class:xpath_string
append_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::append_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
append_attribute_ll	infra/pugixml/pugixml.cpp	/^	PUGI__FN_NO_INLINE xml_attribute_struct* append_attribute_ll(xml_node_struct* node, xml_allocator& alloc)$/;"	f
append_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_node::append_buffer(const void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_node
append_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_child(const char_t* name_)$/;"	f	class:pugi::xml_node
append_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_child(xml_node_type type_)$/;"	f	class:pugi::xml_node
append_copy	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::append_copy(const xml_attribute& proto)$/;"	f	class:pugi::xml_node
append_copy	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::append_copy(const xml_node& proto)$/;"	f	class:pugi::xml_node
append_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN_NO_INLINE xml_node_struct* append_node(xml_node_struct* node, xml_allocator& alloc, xml_node_type type = node_element)$/;"	f
apply_predicate	infra/pugixml/pugixml.cpp	/^		void apply_predicate(xpath_node_set_raw& ns, size_t first, xpath_ast_node* expr, const xpath_stack& stack)$/;"	f	class:xpath_ast_node	file:
apply_predicates	infra/pugixml/pugixml.cpp	/^		void apply_predicates(xpath_node_set_raw& ns, size_t first, const xpath_stack& stack)$/;"	f	class:xpath_ast_node	file:
as_bool	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::as_bool(bool def) const$/;"	f	class:pugi::xml_attribute
as_bool	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::as_bool(bool def) const$/;"	f	class:pugi::xml_text
as_double	infra/pugixml/pugixml.cpp	/^	PUGI__FN double xml_attribute::as_double(double def) const$/;"	f	class:pugi::xml_attribute
as_double	infra/pugixml/pugixml.cpp	/^	PUGI__FN double xml_text::as_double(double def) const$/;"	f	class:pugi::xml_text
as_float	infra/pugixml/pugixml.cpp	/^	PUGI__FN float xml_attribute::as_float(float def) const$/;"	f	class:pugi::xml_attribute
as_float	infra/pugixml/pugixml.cpp	/^	PUGI__FN float xml_text::as_float(float def) const$/;"	f	class:pugi::xml_text
as_int	infra/pugixml/pugixml.cpp	/^	PUGI__FN int xml_attribute::as_int(int def) const$/;"	f	class:pugi::xml_attribute
as_int	infra/pugixml/pugixml.cpp	/^	PUGI__FN int xml_text::as_int(int def) const$/;"	f	class:pugi::xml_text
as_llong	infra/pugixml/pugixml.cpp	/^	PUGI__FN long long xml_attribute::as_llong(long long def) const$/;"	f	class:pugi::xml_attribute
as_llong	infra/pugixml/pugixml.cpp	/^	PUGI__FN long long xml_text::as_llong(long long def) const$/;"	f	class:pugi::xml_text
as_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::as_string(const char_t* def) const$/;"	f	class:pugi::xml_attribute
as_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_text::as_string(const char_t* def) const$/;"	f	class:pugi::xml_text
as_uint	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int xml_attribute::as_uint(unsigned int def) const$/;"	f	class:pugi::xml_attribute
as_uint	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int xml_text::as_uint(unsigned int def) const$/;"	f	class:pugi::xml_text
as_ullong	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned long long xml_attribute::as_ullong(unsigned long long def) const$/;"	f	class:pugi::xml_attribute
as_ullong	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned long long xml_text::as_ullong(unsigned long long def) const$/;"	f	class:pugi::xml_text
as_utf8	infra/pugixml/docs/manual/dom.html	/^        <a name="as_utf8"><\/a><a name="as_wide"><\/a>There are cases when you'll have$/;"	a
as_utf8	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::string PUGIXML_FUNCTION as_utf8(const std::basic_string<wchar_t>& str)$/;"	f	namespace:pugi
as_utf8	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::string PUGIXML_FUNCTION as_utf8(const wchar_t* str)$/;"	f	namespace:pugi
as_utf8_begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t as_utf8_begin(const wchar_t* str, size_t length)$/;"	f
as_utf8_end	infra/pugixml/pugixml.cpp	/^	PUGI__FN void as_utf8_end(char* buffer, size_t size, const wchar_t* str, size_t length)$/;"	f
as_utf8_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::string as_utf8_impl(const wchar_t* str, size_t length)$/;"	f
as_wide	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> PUGIXML_FUNCTION as_wide(const char* str)$/;"	f	namespace:pugi
as_wide	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> PUGIXML_FUNCTION as_wide(const std::string& str)$/;"	f	namespace:pugi
as_wide_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN std::basic_string<wchar_t> as_wide_impl(const char* str, size_t size)$/;"	f
ast_filter	infra/pugixml/pugixml.cpp	/^		ast_filter,						\/\/ select * from left where right$/;"	e	enum:ast_type_t	file:
ast_filter_posinv	infra/pugixml/pugixml.cpp	/^		ast_filter_posinv,				\/\/ select * from left where right; proximity position invariant$/;"	e	enum:ast_type_t	file:
ast_func_boolean	infra/pugixml/pugixml.cpp	/^		ast_func_boolean,				\/\/ boolean(left)$/;"	e	enum:ast_type_t	file:
ast_func_ceiling	infra/pugixml/pugixml.cpp	/^		ast_func_ceiling,				\/\/ ceiling(left)$/;"	e	enum:ast_type_t	file:
ast_func_concat	infra/pugixml/pugixml.cpp	/^		ast_func_concat,				\/\/ concat(left, right, siblings)$/;"	e	enum:ast_type_t	file:
ast_func_contains	infra/pugixml/pugixml.cpp	/^		ast_func_contains,				\/\/ contains(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_count	infra/pugixml/pugixml.cpp	/^		ast_func_count,					\/\/ count(left)$/;"	e	enum:ast_type_t	file:
ast_func_false	infra/pugixml/pugixml.cpp	/^		ast_func_false,					\/\/ false()$/;"	e	enum:ast_type_t	file:
ast_func_floor	infra/pugixml/pugixml.cpp	/^		ast_func_floor,					\/\/ floor(left)$/;"	e	enum:ast_type_t	file:
ast_func_id	infra/pugixml/pugixml.cpp	/^		ast_func_id,					\/\/ id(left)$/;"	e	enum:ast_type_t	file:
ast_func_lang	infra/pugixml/pugixml.cpp	/^		ast_func_lang,					\/\/ lang(left)$/;"	e	enum:ast_type_t	file:
ast_func_last	infra/pugixml/pugixml.cpp	/^		ast_func_last,					\/\/ last()$/;"	e	enum:ast_type_t	file:
ast_func_local_name_0	infra/pugixml/pugixml.cpp	/^		ast_func_local_name_0,			\/\/ local-name()$/;"	e	enum:ast_type_t	file:
ast_func_local_name_1	infra/pugixml/pugixml.cpp	/^		ast_func_local_name_1,			\/\/ local-name(left)$/;"	e	enum:ast_type_t	file:
ast_func_name_0	infra/pugixml/pugixml.cpp	/^		ast_func_name_0,				\/\/ name()$/;"	e	enum:ast_type_t	file:
ast_func_name_1	infra/pugixml/pugixml.cpp	/^		ast_func_name_1,				\/\/ name(left)$/;"	e	enum:ast_type_t	file:
ast_func_namespace_uri_0	infra/pugixml/pugixml.cpp	/^		ast_func_namespace_uri_0,		\/\/ namespace-uri()$/;"	e	enum:ast_type_t	file:
ast_func_namespace_uri_1	infra/pugixml/pugixml.cpp	/^		ast_func_namespace_uri_1,		\/\/ namespace-uri(left)$/;"	e	enum:ast_type_t	file:
ast_func_normalize_space_0	infra/pugixml/pugixml.cpp	/^		ast_func_normalize_space_0,		\/\/ normalize-space()$/;"	e	enum:ast_type_t	file:
ast_func_normalize_space_1	infra/pugixml/pugixml.cpp	/^		ast_func_normalize_space_1,		\/\/ normalize-space(left)$/;"	e	enum:ast_type_t	file:
ast_func_not	infra/pugixml/pugixml.cpp	/^		ast_func_not,					\/\/ not(left)$/;"	e	enum:ast_type_t	file:
ast_func_number_0	infra/pugixml/pugixml.cpp	/^		ast_func_number_0,				\/\/ number()$/;"	e	enum:ast_type_t	file:
ast_func_number_1	infra/pugixml/pugixml.cpp	/^		ast_func_number_1,				\/\/ number(left)$/;"	e	enum:ast_type_t	file:
ast_func_position	infra/pugixml/pugixml.cpp	/^		ast_func_position,				\/\/ position()$/;"	e	enum:ast_type_t	file:
ast_func_round	infra/pugixml/pugixml.cpp	/^		ast_func_round,					\/\/ round(left)$/;"	e	enum:ast_type_t	file:
ast_func_starts_with	infra/pugixml/pugixml.cpp	/^		ast_func_starts_with,			\/\/ starts_with(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_string_0	infra/pugixml/pugixml.cpp	/^		ast_func_string_0,				\/\/ string()$/;"	e	enum:ast_type_t	file:
ast_func_string_1	infra/pugixml/pugixml.cpp	/^		ast_func_string_1,				\/\/ string(left)$/;"	e	enum:ast_type_t	file:
ast_func_string_length_0	infra/pugixml/pugixml.cpp	/^		ast_func_string_length_0,		\/\/ string-length()$/;"	e	enum:ast_type_t	file:
ast_func_string_length_1	infra/pugixml/pugixml.cpp	/^		ast_func_string_length_1,		\/\/ string-length(left)$/;"	e	enum:ast_type_t	file:
ast_func_substring_2	infra/pugixml/pugixml.cpp	/^		ast_func_substring_2,			\/\/ substring(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_substring_3	infra/pugixml/pugixml.cpp	/^		ast_func_substring_3,			\/\/ substring(left, right, third)$/;"	e	enum:ast_type_t	file:
ast_func_substring_after	infra/pugixml/pugixml.cpp	/^		ast_func_substring_after,		\/\/ substring-after(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_substring_before	infra/pugixml/pugixml.cpp	/^		ast_func_substring_before,		\/\/ substring-before(left, right)$/;"	e	enum:ast_type_t	file:
ast_func_sum	infra/pugixml/pugixml.cpp	/^		ast_func_sum,					\/\/ sum(left)$/;"	e	enum:ast_type_t	file:
ast_func_translate	infra/pugixml/pugixml.cpp	/^		ast_func_translate,				\/\/ translate(left, right, third)$/;"	e	enum:ast_type_t	file:
ast_func_true	infra/pugixml/pugixml.cpp	/^		ast_func_true,					\/\/ true()$/;"	e	enum:ast_type_t	file:
ast_number_constant	infra/pugixml/pugixml.cpp	/^		ast_number_constant,			\/\/ number constant$/;"	e	enum:ast_type_t	file:
ast_op_add	infra/pugixml/pugixml.cpp	/^		ast_op_add,						\/\/ left + right$/;"	e	enum:ast_type_t	file:
ast_op_and	infra/pugixml/pugixml.cpp	/^		ast_op_and,						\/\/ left and right$/;"	e	enum:ast_type_t	file:
ast_op_divide	infra/pugixml/pugixml.cpp	/^		ast_op_divide,					\/\/ left \/ right$/;"	e	enum:ast_type_t	file:
ast_op_equal	infra/pugixml/pugixml.cpp	/^		ast_op_equal,					\/\/ left = right$/;"	e	enum:ast_type_t	file:
ast_op_greater	infra/pugixml/pugixml.cpp	/^		ast_op_greater,					\/\/ left > right$/;"	e	enum:ast_type_t	file:
ast_op_greater_or_equal	infra/pugixml/pugixml.cpp	/^		ast_op_greater_or_equal,		\/\/ left >= right$/;"	e	enum:ast_type_t	file:
ast_op_less	infra/pugixml/pugixml.cpp	/^		ast_op_less,					\/\/ left < right$/;"	e	enum:ast_type_t	file:
ast_op_less_or_equal	infra/pugixml/pugixml.cpp	/^		ast_op_less_or_equal,			\/\/ left <= right$/;"	e	enum:ast_type_t	file:
ast_op_mod	infra/pugixml/pugixml.cpp	/^		ast_op_mod,						\/\/ left % right$/;"	e	enum:ast_type_t	file:
ast_op_multiply	infra/pugixml/pugixml.cpp	/^		ast_op_multiply,				\/\/ left * right$/;"	e	enum:ast_type_t	file:
ast_op_negate	infra/pugixml/pugixml.cpp	/^		ast_op_negate,					\/\/ left - right$/;"	e	enum:ast_type_t	file:
ast_op_not_equal	infra/pugixml/pugixml.cpp	/^		ast_op_not_equal,				\/\/ left != right$/;"	e	enum:ast_type_t	file:
ast_op_or	infra/pugixml/pugixml.cpp	/^		ast_op_or,						\/\/ left or right$/;"	e	enum:ast_type_t	file:
ast_op_subtract	infra/pugixml/pugixml.cpp	/^		ast_op_subtract,				\/\/ left - right$/;"	e	enum:ast_type_t	file:
ast_op_union	infra/pugixml/pugixml.cpp	/^		ast_op_union,					\/\/ left | right$/;"	e	enum:ast_type_t	file:
ast_predicate	infra/pugixml/pugixml.cpp	/^		ast_predicate,					\/\/ apply predicate to set; next points to next predicate$/;"	e	enum:ast_type_t	file:
ast_step	infra/pugixml/pugixml.cpp	/^		ast_step,						\/\/ process set left with step$/;"	e	enum:ast_type_t	file:
ast_step_root	infra/pugixml/pugixml.cpp	/^		ast_step_root					\/\/ select root node$/;"	e	enum:ast_type_t	file:
ast_string_constant	infra/pugixml/pugixml.cpp	/^		ast_string_constant,			\/\/ string constant$/;"	e	enum:ast_type_t	file:
ast_type_t	infra/pugixml/pugixml.cpp	/^	enum ast_type_t$/;"	g	file:
ast_unknown	infra/pugixml/pugixml.cpp	/^		ast_unknown,$/;"	e	enum:ast_type_t	file:
ast_variable	infra/pugixml/pugixml.cpp	/^		ast_variable,					\/\/ variable$/;"	e	enum:ast_type_t	file:
asttype	infra/pugixml/pugixml.cpp	/^			ast_type_t asttype;$/;"	m	struct:xpath_parser::binary_op_t	file:
atOrAfter	infra/judy/JudyL2Array.h	/^        const cpair atOrAfter( JudyKey key ) {$/;"	f	class:judyL2Array
atOrAfter	infra/judy/JudyLArray.h	/^        const pair atOrAfter( JudyKey key ) {$/;"	f	class:judyLArray
atOrAfter	infra/judy/JudyS2Array.h	/^        const cpair atOrAfter( const char * key, unsigned int keyLen = 0 ) {$/;"	f	class:judyS2Array
atOrAfter	infra/judy/JudySArray.h	/^        const pair atOrAfter( const char * key, unsigned int keyLen = 0 ) {$/;"	f	class:judySArray
attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::attribute(const char_t* name_) const$/;"	f	class:pugi::xml_node
attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xpath_node::attribute() const$/;"	f	class:pugi::xpath_node
attribute_iterator	infra/pugixml/pugixml.h	/^		typedef xml_attribute_iterator attribute_iterator;$/;"	t	class:pugi::xml_node
attributes	infra/pugixml/contrib/foreach.hpp	/^	inline xml_object_range<xml_attribute_iterator> attributes(const pugi::xml_node& node)$/;"	f	namespace:pugi
attributes	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_attribute_iterator> xml_node::attributes() const$/;"	f	class:pugi::xml_node
attributes_begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::attribute_iterator xml_node::attributes_begin() const$/;"	f	class:pugi::xml_node
attributes_end	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::attribute_iterator xml_node::attributes_end() const$/;"	f	class:pugi::xml_node
axis	infra/pugixml/pugixml.cpp	/^		static const axis_t axis;$/;"	m	struct:axis_to_type	file:
axis	infra/pugixml/pugixml.cpp	/^	template <axis_t N> const axis_t axis_to_type<N>::axis = N;$/;"	m	class:axis_to_type	file:
axis_ancestor	infra/pugixml/pugixml.cpp	/^		axis_ancestor,$/;"	e	enum:axis_t	file:
axis_ancestor_or_self	infra/pugixml/pugixml.cpp	/^		axis_ancestor_or_self,$/;"	e	enum:axis_t	file:
axis_attribute	infra/pugixml/pugixml.cpp	/^		axis_attribute,$/;"	e	enum:axis_t	file:
axis_child	infra/pugixml/pugixml.cpp	/^		axis_child,$/;"	e	enum:axis_t	file:
axis_descendant	infra/pugixml/pugixml.cpp	/^		axis_descendant,$/;"	e	enum:axis_t	file:
axis_descendant_or_self	infra/pugixml/pugixml.cpp	/^		axis_descendant_or_self,$/;"	e	enum:axis_t	file:
axis_following	infra/pugixml/pugixml.cpp	/^		axis_following,$/;"	e	enum:axis_t	file:
axis_following_sibling	infra/pugixml/pugixml.cpp	/^		axis_following_sibling,$/;"	e	enum:axis_t	file:
axis_namespace	infra/pugixml/pugixml.cpp	/^		axis_namespace,$/;"	e	enum:axis_t	file:
axis_parent	infra/pugixml/pugixml.cpp	/^		axis_parent,$/;"	e	enum:axis_t	file:
axis_preceding	infra/pugixml/pugixml.cpp	/^		axis_preceding,$/;"	e	enum:axis_t	file:
axis_preceding_sibling	infra/pugixml/pugixml.cpp	/^		axis_preceding_sibling,$/;"	e	enum:axis_t	file:
axis_self	infra/pugixml/pugixml.cpp	/^		axis_self$/;"	e	enum:axis_t	file:
axis_t	infra/pugixml/pugixml.cpp	/^	enum axis_t$/;"	g	file:
axis_to_type	infra/pugixml/pugixml.cpp	/^	template <axis_t N> struct axis_to_type$/;"	s	file:
base	base/API.h	/^namespace base$/;"	n
base	base/Base.h	/^namespace base $/;"	n
base	base/BaseCommon.h	/^namespace base $/;"	n
base	base/Book.h	/^namespace base$/;"	n
base	base/Custom.h	/^namespace base$/;"	n
base	base/FeedHandler.h	/^namespace base$/;"	n
base	base/Line.h	/^namespace base$/;"	n
base	base/LineGroup.h	/^namespace base$/;"	n
base	base/MarketDataApplication.h	/^namespace base $/;"	n
base	base/Message.h	/^namespace base$/;"	n
base	base/NetworkReader.h	/^namespace base $/;"	n
base	base/Order.h	/^namespace base$/;"	n
base	base/Packet.h	/^namespace base $/;"	n
base	base/PacketData.h	/^namespace base$/;"	n
base	base/PriceLevel.h	/^namespace base $/;"	n
base	base/PriceLevels.h	/^namespace base $/;"	n
base	base/ProductInfo.h	/^namespace base$/;"	n
base	base/Quote.h	/^namespace base$/;"	n
base	base/Recorder.h	/^namespace base$/;"	n
base	base/Status.h	/^namespace base$/;"	n
base	base/Subscription.h	/^namespace base$/;"	n
base	base/Trade.h	/^namespace base$/;"	n
begin	infra/judy/JudyL2Array.h	/^        const cpair & begin() {$/;"	f	class:judyL2Array
begin	infra/judy/JudyLArray.h	/^        const pair & begin() {$/;"	f	class:judyLArray
begin	infra/judy/JudyS2Array.h	/^        const cpair & begin() {$/;"	f	class:judyS2Array
begin	infra/judy/JudySArray.h	/^        const pair & begin() {$/;"	f	class:judySArray
begin	infra/pugixml/pugixml.cpp	/^		const char_t* begin;$/;"	m	struct:xpath_lexer_string	file:
begin	infra/pugixml/pugixml.cpp	/^		xpath_node* begin() const$/;"	f	class:xpath_node_set_raw
begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_string_to_number_scratch(char_t (&buffer)[32], const char_t* begin, const char_t* end, double* out_result)$/;"	v
begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_tree_walker::begin(xml_node&)$/;"	f	class:pugi::xml_tree_walker
begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::iterator xml_node::begin() const$/;"	f	class:pugi::xml_node
begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::const_iterator xpath_node_set::begin() const$/;"	f	class:pugi::xpath_node_set
begin	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* get_variable_scratch(char_t (&buffer)[32], xpath_variable_set* set, const char_t* begin, const char_t* end)$/;"	v
begin	infra/pugixml/pugixml.h	/^		It begin() const { return _begin; }$/;"	f	class:pugi::xml_object_range
binary_op_t	infra/pugixml/pugixml.cpp	/^			binary_op_t(): asttype(ast_unknown), rettype(xpath_type_none), precedence(0)$/;"	f	struct:xpath_parser::binary_op_t
binary_op_t	infra/pugixml/pugixml.cpp	/^			binary_op_t(ast_type_t asttype_, xpath_value_type rettype_, int precedence_): asttype(asttype_), rettype(rettype_), precedence(precedence_)$/;"	f	struct:xpath_parser::binary_op_t
binary_op_t	infra/pugixml/pugixml.cpp	/^		struct binary_op_t$/;"	s	struct:xpath_parser	file:
block	infra/pugixml/pugixml.cpp	/^		xpath_memory_block block;$/;"	m	struct:xpath_query_impl	file:
blocks	infra/pugixml/pugixml.cpp	/^		xpath_memory_block blocks[2];$/;"	m	struct:xpath_stack_data	file:
boost	infra/pugixml/contrib/foreach.hpp	/^namespace boost$/;"	n
buf	infra/gzstream/gzstream.h	/^    gzstreambuf buf;$/;"	m	class:infra::gzstreambase
bufcapacity	infra/pugixml/pugixml.cpp	/^			bufcapacity = bufcapacitybytes \/ (sizeof(char_t) + 4)$/;"	e	enum:xml_buffered_writer::__anon8	file:
bufcapacitybytes	infra/pugixml/pugixml.cpp	/^			bufcapacitybytes =$/;"	e	enum:xml_buffered_writer::__anon8	file:
buffer	infra/gzstream/gzstream.h	/^    char             buffer[bufferSize]; \/\/ data buffer$/;"	m	class:infra::gzstreambuf
buffer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    char* buffer;$/;"	m	struct:xml_memory_writer	file:
buffer	infra/pugixml/pugixml.cpp	/^		char_t buffer[bufcapacity];$/;"	m	class:xml_buffered_writer	file:
buffer	infra/pugixml/pugixml.cpp	/^		char_t* buffer;$/;"	m	struct:xml_extra_buffer	file:
buffer	infra/pugixml/pugixml.cpp	/^		const char_t* buffer;$/;"	m	struct:xml_document_struct	file:
bufferSize	infra/gzstream/gzstream.h	/^    static const int bufferSize = 47+256;    \/\/ size of data buff$/;"	m	class:infra::gzstreambuf
buffer_holder	infra/pugixml/pugixml.cpp	/^		buffer_holder(void* data_, void (*deleter_)(void*)): data(data_), deleter(deleter_)$/;"	f	struct:buffer_holder
buffer_holder	infra/pugixml/pugixml.cpp	/^	struct buffer_holder$/;"	s	file:
bufsize	infra/pugixml/pugixml.cpp	/^		size_t bufsize;$/;"	m	class:xml_buffered_writer	file:
busy_size	infra/pugixml/pugixml.cpp	/^		size_t busy_size;$/;"	m	struct:xml_memory_page	file:
c_str	infra/pugixml/pugixml.cpp	/^		const char_t* c_str() const$/;"	f	class:xpath_string
cacheBuySideQuote	base/Quote.h	/^inline void Quote::cacheBuySideQuote()$/;"	f	class:Quote
cacheSellSideQuote	base/Quote.h	/^inline void Quote::cacheSellSideQuote()$/;"	f	class:Quote
capacity	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    size_t capacity;$/;"	m	struct:xml_memory_writer	file:
char_t	infra/pugixml/docs/manual/dom.html	/^        <a name="char_t"><\/a><a name="string_t"><\/a>There is a special type, <code class="computeroutput"><span class="identifier">pugi<\/span><span class="special">::<\/span><span class="identifier">char_t<\/span><\/code>, that is defined as the character$/;"	a
char_t	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_string_to_number_scratch(char_t (&buffer)[32], const char_t* begin, const char_t* end, double* out_result)$/;"	v
char_t	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* get_variable_scratch(char_t (&buffer)[32], xpath_variable_set* set, const char_t* begin, const char_t* end)$/;"	v
char_t	infra/pugixml/pugixml.h	/^	typedef PUGIXML_CHAR char_t;$/;"	t	namespace:pugi
chartype_t	infra/pugixml/pugixml.cpp	/^	enum chartype_t$/;"	g	file:
chartype_table	infra/pugixml/pugixml.cpp	/^	static const unsigned char chartype_table[256] =$/;"	v	file:
chartypex_t	infra/pugixml/pugixml.cpp	/^	enum chartypex_t$/;"	g	file:
chartypex_table	infra/pugixml/pugixml.cpp	/^	static const unsigned char chartypex_table[256] =$/;"	v	file:
checkBuySideQuote	base/Quote.h	/^inline void Quote::checkBuySideQuote(Book *book)$/;"	f	class:Quote
checkSellSideQuote	base/Quote.h	/^inline void Quote::checkSellSideQuote(Book *book)$/;"	f	class:Quote
check_string_to_number_format	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool check_string_to_number_format(const char_t* string)$/;"	f
check_xml	infra/pugixml/docs/samples/load_error_handling.cpp	/^void check_xml(const char* source)$/;"	f
child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::child(const char_t* name_) const$/;"	f	class:pugi::xml_node
child_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::child_value() const$/;"	f	class:pugi::xml_node
child_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::child_value(const char_t* name_) const$/;"	f	class:pugi::xml_node
children	infra/pugixml/contrib/foreach.hpp	/^	inline xml_object_range<xml_node_iterator> children(const pugi::xml_node& node)$/;"	f	namespace:pugi
children	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_named_node_iterator> xml_node::children(const char_t* name_) const$/;"	f	class:pugi::xml_node
children	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_object_range<xml_node_iterator> xml_node::children() const$/;"	f	class:pugi::xml_node
clear	infra/judy/JudyL2Array.h	/^        void clear() {$/;"	f	class:judyL2Array
clear	infra/judy/JudyLArray.h	/^        clear( bool deleteContents ) {$/;"	f	class:judyLArray
clear	infra/judy/JudyLArray.h	/^        void clear() {$/;"	f	class:judyLArray
clear	infra/judy/JudyS2Array.h	/^        void clear() {$/;"	f	class:judyS2Array
clear	infra/judy/JudySArray.h	/^        void clear() {$/;"	f	class:judySArray
clearGapCache	base/Line.cpp	/^void Line::clearGapCache()$/;"	f	class:Line
clearSnapCache	base/Line.cpp	/^void Line::clearSnapCache()$/;"	f	class:Line
close	infra/gzstream/gzstream.cpp	/^gzstreambuf * gzstreambuf::close() {$/;"	f	class:infra::gzstreambuf
close	infra/gzstream/gzstream.cpp	/^void gzstreambase::close() {$/;"	f	class:infra::gzstreambase
code_traverse_base_data	infra/pugixml/docs/manual/access.html	/^        <a name="code_traverse_base_data"><\/a>This is an example of using these functions,$/;"	a
compare_eq	infra/pugixml/pugixml.cpp	/^		template <class Comp> static bool compare_eq(xpath_ast_node* lhs, xpath_ast_node* rhs, const xpath_context& c, const xpath_stack& stack, const Comp& comp)$/;"	f	class:xpath_ast_node	file:
compare_rel	infra/pugixml/pugixml.cpp	/^		template <class Comp> static bool compare_rel(xpath_ast_node* lhs, xpath_ast_node* rhs, const xpath_context& c, const xpath_stack& stack, const Comp& comp)$/;"	f	class:xpath_ast_node	file:
const_iterator	infra/pugixml/pugixml.h	/^		typedef It const_iterator;$/;"	t	class:pugi::xml_object_range
const_iterator	infra/pugixml/pugixml.h	/^		typedef const xpath_node* const_iterator;$/;"	t	class:pugi::xpath_node_set
const_pointer	base/Book.h	/^			typedef const T* const_pointer;$/;"	t	class:base::BookAlloc
const_reference	base/Book.h	/^			typedef const T& const_reference;$/;"	t	class:base::BookAlloc
construct	base/Book.h	/^			void construct (pointer p, const T& value) {$/;"	f	class:base::BookAlloc
construct	infra/pugixml/pugixml.cpp	/^		static xml_memory_page* construct(void* memory)$/;"	f	struct:xml_memory_page
contents	infra/pugixml/pugixml.cpp	/^		const xpath_lexer_string& contents() const$/;"	f	class:xpath_lexer
convert_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_buffer(char_t*& out_buffer, size_t& out_length, xml_encoding encoding, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer_endian_swap	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_buffer_endian_swap(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer_latin1	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_buffer_latin1(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size)$/;"	f
convert_buffer_latin1	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_buffer_latin1(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
convert_buffer_output	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t convert_buffer_output(char_t* \/* r_char *\/, uint8_t* r_u8, uint16_t* r_u16, uint32_t* r_u32, const char_t* data, size_t length, xml_encoding encoding)$/;"	f
convert_buffer_output	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t convert_buffer_output(char_t* r_char, uint8_t* r_u8, uint16_t* r_u16, uint32_t* r_u32, const char_t* data, size_t length, xml_encoding encoding)$/;"	f
convert_buffer_utf16	infra/pugixml/pugixml.cpp	/^	template <typename opt_swap> PUGI__FN bool convert_buffer_utf16(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, opt_swap)$/;"	f
convert_buffer_utf32	infra/pugixml/pugixml.cpp	/^	template <typename opt_swap> PUGI__FN bool convert_buffer_utf32(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, opt_swap)$/;"	f
convert_buffer_utf8	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_buffer_utf8(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size)$/;"	f
convert_number_to_boolean	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_number_to_boolean(double value)$/;"	f
convert_number_to_mantissa_exponent	infra/pugixml/pugixml.cpp	/^	PUGI__FN void convert_number_to_mantissa_exponent(double value, char* buffer, size_t buffer_size, char** out_mantissa, int* out_exponent)$/;"	f
convert_number_to_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_string convert_number_to_string(double value, xpath_allocator* alloc)$/;"	f
convert_number_to_string_special	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* convert_number_to_string_special(double value)$/;"	f
convert_path_heap	infra/pugixml/pugixml.cpp	/^	PUGI__FN char* convert_path_heap(const wchar_t* str)$/;"	f
convert_string_to_number	infra/pugixml/pugixml.cpp	/^	PUGI__FN double convert_string_to_number(const char_t* string)$/;"	f
convert_utf_endian_swap	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN void convert_utf_endian_swap(T* result, const T* data, size_t length)$/;"	f
convert_wchar_endian_swap	infra/pugixml/pugixml.cpp	/^	PUGI__FN void convert_wchar_endian_swap(wchar_t* result, const wchar_t* data, size_t length)$/;"	f
copy_backwards	infra/pugixml/pugixml.cpp	/^	template <typename I> void copy_backwards(I begin, I end, I target)$/;"	f
counter	infra/pugixml/pugixml.cpp	/^		typedef utf16_counter counter;$/;"	t	struct:wchar_selector	file:
counter	infra/pugixml/pugixml.cpp	/^		typedef utf32_counter counter;$/;"	t	struct:wchar_selector	file:
cpair	infra/judy/JudyL2Array.h	/^        typedef judyl2KVpair< JudyKey, cvector * > cpair;$/;"	t	class:judyL2Array
cpair	infra/judy/JudyS2Array.h	/^        typedef judys2KVpair< cvector * > cpair;$/;"	t	class:judyS2Array
create	infra/pugixml/pugixml.cpp	/^		static xml_stream_chunk* create()$/;"	f	struct:xml_stream_chunk
create	infra/pugixml/pugixml.cpp	/^		static xpath_query_impl* create()$/;"	f	struct:xpath_query_impl
create	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::create()$/;"	f	class:pugi::xml_document
createFeedHandlers	base/MarketDataApplication.cpp	/^void MarketDataApplication::createFeedHandlers(const pugi::xml_node &configNode)$/;"	f	class:MarketDataApplication
createLineGroups	base/FeedHandler.cpp	/^void FeedHandler::createLineGroups(const pugi::xml_node &configNode)$/;"	f	class:FeedHandler
createLineIPs	base/Line.cpp	/^void Line::createLineIPs(const pugi::xml_node &lineNode)$/;"	f	class:Line
createLines	base/LineGroup.cpp	/^void LineGroup::createLines(const pugi::xml_node &lineGroupNode)$/;"	f	class:LineGroup
createNetworkReaders	base/MarketDataApplication.cpp	/^void MarketDataApplication::createNetworkReaders(const pugi::xml_node &configNode)$/;"	f	class:MarketDataApplication
ct_parse_attr	infra/pugixml/pugixml.cpp	/^		ct_parse_attr = 2,		\/\/ \\0, &, \\r, ', "$/;"	e	enum:chartype_t	file:
ct_parse_attr_ws	infra/pugixml/pugixml.cpp	/^		ct_parse_attr_ws = 4,	\/\/ \\0, &, \\r, ', ", \\n, tab$/;"	e	enum:chartype_t	file:
ct_parse_cdata	infra/pugixml/pugixml.cpp	/^		ct_parse_cdata = 16,	\/\/ \\0, ], >, \\r$/;"	e	enum:chartype_t	file:
ct_parse_comment	infra/pugixml/pugixml.cpp	/^		ct_parse_comment = 32,	\/\/ \\0, -, >, \\r$/;"	e	enum:chartype_t	file:
ct_parse_pcdata	infra/pugixml/pugixml.cpp	/^		ct_parse_pcdata = 1,	\/\/ \\0, &, \\r, <$/;"	e	enum:chartype_t	file:
ct_space	infra/pugixml/pugixml.cpp	/^		ct_space = 8,			\/\/ \\r, \\n, space, tab$/;"	e	enum:chartype_t	file:
ct_start_symbol	infra/pugixml/pugixml.cpp	/^		ct_start_symbol = 128	\/\/ Any symbol > 127, a-z, A-Z, _, :$/;"	e	enum:chartype_t	file:
ct_symbol	infra/pugixml/pugixml.cpp	/^		ct_symbol = 64,			\/\/ Any symbol > 127, a-z, A-Z, 0-9, _, :, -, .$/;"	e	enum:chartype_t	file:
ctx_digit	infra/pugixml/pugixml.cpp	/^		ctx_digit = 8,			  \/\/ 0-9$/;"	e	enum:chartypex_t	file:
ctx_special_attr	infra/pugixml/pugixml.cpp	/^		ctx_special_attr = 2,     \/\/ Any symbol >= 0 and < 32 (except \\t), &, <, >, "$/;"	e	enum:chartypex_t	file:
ctx_special_pcdata	infra/pugixml/pugixml.cpp	/^		ctx_special_pcdata = 1,   \/\/ Any symbol >= 0 and < 32 (except \\t, \\r, \\n), &, <, >$/;"	e	enum:chartypex_t	file:
ctx_start_symbol	infra/pugixml/pugixml.cpp	/^		ctx_start_symbol = 4,	  \/\/ Any symbol > 127, a-z, A-Z, _$/;"	e	enum:chartypex_t	file:
ctx_symbol	infra/pugixml/pugixml.cpp	/^		ctx_symbol = 16			  \/\/ Any symbol > 127, a-z, A-Z, 0-9, _, -, .$/;"	e	enum:chartypex_t	file:
current	infra/pugixml/pugixml.cpp	/^		lexeme_t current() const$/;"	f	class:xpath_lexer
current_pos	infra/pugixml/pugixml.cpp	/^		const char_t* current_pos() const$/;"	f	class:xpath_lexer
custom_allocate	infra/pugixml/docs/samples/custom_memory_management.cpp	/^void* custom_allocate(size_t size)$/;"	f
custom_deallocate	infra/pugixml/docs/samples/custom_memory_management.cpp	/^void custom_deallocate(void* ptr)$/;"	f
cvector	infra/judy/JudyL2Array.h	/^        typedef const vector cvector;$/;"	t	class:judyL2Array
cvector	infra/judy/JudyS2Array.h	/^        typedef const vector cvector;$/;"	t	class:judyS2Array
data	infra/pugixml/pugixml.cpp	/^		T data[xml_memory_page_size \/ sizeof(T)];$/;"	m	struct:xml_stream_chunk	file:
data	infra/pugixml/pugixml.cpp	/^		char data[$/;"	m	struct:xpath_memory_block	file:
data	infra/pugixml/pugixml.cpp	/^		char data[1];$/;"	m	struct:xml_memory_page	file:
data	infra/pugixml/pugixml.cpp	/^		char_t* data(xpath_allocator* alloc)$/;"	f	class:xpath_string
data	infra/pugixml/pugixml.cpp	/^		void* data;$/;"	m	struct:buffer_holder	file:
data	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_text::data() const$/;"	f	class:pugi::xml_text
data_char	infra/pugixml/pugixml.cpp	/^			char_t data_char[bufcapacity];$/;"	m	union:xml_buffered_writer::__anon9	file:
data_u16	infra/pugixml/pugixml.cpp	/^			uint16_t data_u16[2 * bufcapacity];$/;"	m	union:xml_buffered_writer::__anon9	file:
data_u32	infra/pugixml/pugixml.cpp	/^			uint32_t data_u32[bufcapacity];$/;"	m	union:xml_buffered_writer::__anon9	file:
data_u8	infra/pugixml/pugixml.cpp	/^			uint8_t data_u8[4 * bufcapacity];$/;"	m	union:xml_buffered_writer::__anon9	file:
deallocate	base/Book.h	/^			void deallocate (pointer p, size_type num) {$/;"	f	class:base::BookAlloc
deallocate	infra/pugixml/pugixml.cpp	/^		static deallocation_function deallocate;$/;"	m	struct:xml_memory_management_function_storage	file:
deallocate	infra/pugixml/pugixml.cpp	/^	template <typename T> deallocation_function xml_memory_management_function_storage<T>::deallocate = default_deallocate;$/;"	m	class:xml_memory_management_function_storage	file:
deallocate_memory	infra/pugixml/pugixml.cpp	/^		void deallocate_memory(void* ptr, size_t size, xml_memory_page* page)$/;"	f	struct:xml_allocator
deallocate_page	infra/pugixml/pugixml.cpp	/^		static void deallocate_page(xml_memory_page* page)$/;"	f	struct:xml_allocator
deallocate_string	infra/pugixml/pugixml.cpp	/^		void deallocate_string(char_t* string)$/;"	f	struct:xml_allocator
deallocation_function	infra/pugixml/pugixml.h	/^	typedef void (*deallocation_function)(void* ptr);$/;"	t	namespace:pugi
decode_latin1_block	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_latin1_block(const uint8_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf16_block	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf16_block(const uint16_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf32_block	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf32_block(const uint32_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_utf8_block	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_utf8_block(const uint8_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block(const wchar_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block_impl	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block_impl(const uint16_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
decode_wchar_block_impl	infra/pugixml/pugixml.cpp	/^		static inline typename Traits::value_type decode_wchar_block_impl(const uint32_t* data, size_t size, typename Traits::value_type result)$/;"	f	struct:utf_decoder
default_allocate	infra/pugixml/pugixml.cpp	/^	PUGI__FN void* default_allocate(size_t size)$/;"	f
default_deallocate	infra/pugixml/pugixml.cpp	/^	PUGI__FN void default_deallocate(void* ptr)$/;"	f
deleteOrder	base/Book.cpp	/^void Book::deleteOrder(Order *order, bool modifyOrder)$/;"	f	class:Book
deleteOrder	base/Book.cpp	/^void Book::deleteOrder(Side side, double oldPx, uint64_t oldSize, bool modifyOrder)$/;"	f	class:Book
deleteOrder	base/PriceLevel.cpp	/^void PriceLevel::deleteOrder(Order *order)$/;"	f	class:PriceLevel
deleteOrder	base/PriceLevel.cpp	/^void PriceLevel::deleteOrder(uint64_t oldSize)$/;"	f	class:PriceLevel
delete_xpath_variable	infra/pugixml/pugixml.cpp	/^	PUGI__FN void delete_xpath_variable(xpath_value_type type, xpath_variable* var)$/;"	f
delete_xpath_variable	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN void delete_xpath_variable(T* var)$/;"	f
deleter	infra/pugixml/pugixml.cpp	/^		void (*deleter)(void*);$/;"	m	struct:buffer_holder	file:
depth	infra/judy/Judy.h	/^    unsigned int depth;       \/\/ number of Integers in a key, or zero for string keys$/;"	m	struct:__anon5
depth	infra/pugixml/pugixml.cpp	/^	PUGI__FN int xml_tree_walker::depth() const$/;"	f	class:pugi::xml_tree_walker
description	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char* xml_parse_result::description() const$/;"	f	class:pugi::xml_parse_result
description	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char* xpath_parse_result::description() const$/;"	f	class:pugi::xpath_parse_result
destroy	base/Book.h	/^			void destroy (pointer p) {$/;"	f	class:base::BookAlloc
destroy	infra/pugixml/pugixml.cpp	/^		static void destroy(void* ptr)$/;"	f	struct:xml_stream_chunk
destroy	infra/pugixml/pugixml.cpp	/^		static void destroy(void* ptr)$/;"	f	struct:xpath_query_impl
destroy	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::destroy()$/;"	f	class:pugi::xml_document
destroy_attribute	infra/pugixml/pugixml.cpp	/^	inline void destroy_attribute(xml_attribute_struct* a, xml_allocator& alloc)$/;"	f
destroy_node	infra/pugixml/pugixml.cpp	/^	inline void destroy_node(xml_node_struct* n, xml_allocator& alloc)$/;"	f
difference_type	base/Book.h	/^			typedef std::ptrdiff_t difference_type;$/;"	t	class:base::BookAlloc
difference_type	infra/pugixml/pugixml.h	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_attribute_iterator
difference_type	infra/pugixml/pugixml.h	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_named_node_iterator
difference_type	infra/pugixml/pugixml.h	/^		typedef ptrdiff_t difference_type;$/;"	t	class:pugi::xml_node_iterator
document_element	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_document::document_element() const$/;"	f	class:pugi::xml_document
document_order	infra/pugixml/pugixml.cpp	/^	PUGI__FN const void* document_order(const xpath_node& xnode)$/;"	f
document_order_comparator	infra/pugixml/pugixml.cpp	/^	struct document_order_comparator$/;"	s	file:
dummy_node_set	infra/pugixml/pugixml.cpp	/^	static const xpath_node_set dummy_node_set;$/;"	v	file:
duplicate_comparator	infra/pugixml/pugixml.cpp	/^	struct duplicate_comparator$/;"	s	file:
duplicate_string	infra/pugixml/pugixml.cpp	/^		static char_t* duplicate_string(const char_t* string, size_t length, xpath_allocator* alloc)$/;"	f	class:xpath_string	file:
duplicate_string	infra/pugixml/pugixml.cpp	/^		static char_t* duplicate_string(const char_t* string, xpath_allocator* alloc)$/;"	f	class:xpath_string	file:
email	infra/pugixml/docs/manual.html	/^        <a name="email"><\/a>If filing an issue is not possible due to privacy or$/;"	a
email	infra/pugixml/docs/quickstart.html	/^        <a name="email"><\/a>If filing an issue is not possible due to privacy or$/;"	a
empty	infra/containers/spsc/BoostSPSCQueue.h	/^		bool empty() const$/;"	f	class:infra::BoostSPSCQueue
empty	infra/containers/spsc/BoostSPSCQueue_with.h	/^		bool empty() const$/;"	f	class:infra::BoostSPSCQueue
empty	infra/pugixml/pugixml.cpp	/^		bool empty() const$/;"	f	class:xpath_node_set_raw
empty	infra/pugixml/pugixml.cpp	/^		bool empty() const$/;"	f	class:xpath_string
empty	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::empty() const$/;"	f	class:pugi::xml_attribute
empty	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::empty() const$/;"	f	class:pugi::xml_node
empty	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::empty() const$/;"	f	class:pugi::xml_text
empty	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_node_set::empty() const$/;"	f	class:pugi::xpath_node_set
encoding	infra/pugixml/pugixml.cpp	/^		xml_encoding encoding;$/;"	m	class:xml_buffered_writer	file:
encoding	infra/pugixml/pugixml.h	/^		xml_encoding encoding;$/;"	m	struct:pugi::xml_parse_result
encoding_auto	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_auto"><\/a><code class="literal">encoding_auto<\/code> means that pugixml will$/;"	a
encoding_auto	infra/pugixml/pugixml.h	/^		encoding_auto,		\/\/ Auto-detect input encoding using BOM or < \/ <? detection; use UTF8 if BOM is not found$/;"	e	enum:pugi::xml_encoding
encoding_latin1	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_latin1"><\/a><code class="literal">encoding_latin1<\/code> corresponds to ISO-8859-1$/;"	a
encoding_latin1	infra/pugixml/pugixml.h	/^		encoding_latin1$/;"	e	enum:pugi::xml_encoding
encoding_utf16	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf16"><\/a><code class="literal">encoding_utf16<\/code> corresponds to UTF-16$/;"	a
encoding_utf16	infra/pugixml/pugixml.h	/^		encoding_utf16,		\/\/ UTF16 with native endianness$/;"	e	enum:pugi::xml_encoding
encoding_utf16_be	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf16_be"><\/a><code class="literal">encoding_utf16_be<\/code> corresponds to$/;"	a
encoding_utf16_be	infra/pugixml/pugixml.h	/^		encoding_utf16_be,	\/\/ Big-endian UTF16$/;"	e	enum:pugi::xml_encoding
encoding_utf16_le	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf16_le"><\/a><code class="literal">encoding_utf16_le<\/code> corresponds to$/;"	a
encoding_utf16_le	infra/pugixml/pugixml.h	/^		encoding_utf16_le,	\/\/ Little-endian UTF16$/;"	e	enum:pugi::xml_encoding
encoding_utf32	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf32"><\/a><code class="literal">encoding_utf32<\/code> corresponds to UTF-32$/;"	a
encoding_utf32	infra/pugixml/pugixml.h	/^		encoding_utf32,		\/\/ UTF32 with native endianness$/;"	e	enum:pugi::xml_encoding
encoding_utf32_be	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf32_be"><\/a><code class="literal">encoding_utf32_be<\/code> corresponds to$/;"	a
encoding_utf32_be	infra/pugixml/pugixml.h	/^		encoding_utf32_be,	\/\/ Big-endian UTF32$/;"	e	enum:pugi::xml_encoding
encoding_utf32_le	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf32_le"><\/a><code class="literal">encoding_utf32_le<\/code> corresponds to$/;"	a
encoding_utf32_le	infra/pugixml/pugixml.h	/^		encoding_utf32_le,	\/\/ Little-endian UTF32$/;"	e	enum:pugi::xml_encoding
encoding_utf8	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_utf8"><\/a><code class="literal">encoding_utf8<\/code> corresponds to UTF-8 encoding$/;"	a
encoding_utf8	infra/pugixml/pugixml.h	/^		encoding_utf8,		\/\/ UTF8 encoding$/;"	e	enum:pugi::xml_encoding
encoding_wchar	infra/pugixml/docs/manual/loading.html	/^            <a name="encoding_wchar"><\/a><code class="literal">encoding_wchar<\/code> corresponds to the encoding$/;"	a
encoding_wchar	infra/pugixml/pugixml.h	/^		encoding_wchar,		\/\/ The same encoding wchar_t has (either UTF16 or UTF32)$/;"	e	enum:pugi::xml_encoding
end	infra/judy/JudyL2Array.h	/^        const cpair & end() {$/;"	f	class:judyL2Array
end	infra/judy/JudyLArray.h	/^        const pair & end() {$/;"	f	class:judyLArray
end	infra/judy/JudyS2Array.h	/^        const cpair & end() {$/;"	f	class:judyS2Array
end	infra/judy/JudySArray.h	/^        const pair & end() {$/;"	f	class:judySArray
end	infra/pugixml/pugixml.cpp	/^		char_t* end;$/;"	m	struct:gap	file:
end	infra/pugixml/pugixml.cpp	/^		const char_t* end;$/;"	m	struct:xpath_lexer_string	file:
end	infra/pugixml/pugixml.cpp	/^		xpath_node* end() const$/;"	f	class:xpath_node_set_raw
end	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool convert_string_to_number_scratch(char_t (&buffer)[32], const char_t* begin, const char_t* end, double* out_result)$/;"	v
end	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_tree_walker::end(xml_node&)$/;"	f	class:pugi::xml_tree_walker
end	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::iterator xml_node::end() const$/;"	f	class:pugi::xml_node
end	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::const_iterator xpath_node_set::end() const$/;"	f	class:pugi::xpath_node_set
end	infra/pugixml/pugixml.h	/^		It end() const { return _end; }$/;"	f	class:pugi::xml_object_range
endian_swap	infra/pugixml/pugixml.cpp	/^	inline uint16_t endian_swap(uint16_t value)$/;"	f
endian_swap	infra/pugixml/pugixml.cpp	/^	inline uint32_t endian_swap(uint32_t value)$/;"	f
equal_to	infra/pugixml/pugixml.cpp	/^	struct equal_to$/;"	s	file:
erase	base/Line.cpp	/^void Line::erase(uint64_t orderID) const$/;"	f	class:Line
error	infra/pugixml/pugixml.h	/^		const char* error;$/;"	m	struct:pugi::xpath_parse_result
error_handler	infra/pugixml/pugixml.cpp	/^		jmp_buf error_handler;$/;"	m	struct:xpath_stack_data	file:
error_handler	infra/pugixml/pugixml.cpp	/^		jmp_buf* error_handler;$/;"	m	class:xpath_allocator	file:
error_offset	infra/pugixml/pugixml.cpp	/^		char_t* error_offset;$/;"	m	struct:xml_parser	file:
error_status	infra/pugixml/pugixml.cpp	/^		xml_parse_status error_status;$/;"	m	struct:xml_parser	file:
eval_boolean	infra/pugixml/pugixml.cpp	/^		bool eval_boolean(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_node_set	infra/pugixml/pugixml.cpp	/^		xpath_node_set_raw eval_node_set(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_number	infra/pugixml/pugixml.cpp	/^		double eval_number(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_string	infra/pugixml/pugixml.cpp	/^		xpath_string eval_string(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
eval_string_concat	infra/pugixml/pugixml.cpp	/^		xpath_string eval_string_concat(const xpath_context& c, const xpath_stack& stack)$/;"	f	class:xpath_ast_node
evaluate_boolean	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_query::evaluate_boolean(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set xpath_query::evaluate_node_set(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_number	infra/pugixml/pugixml.cpp	/^	PUGI__FN double xpath_query::evaluate_number(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t xpath_query::evaluate_string(char_t* buffer, size_t capacity, const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN string_t xpath_query::evaluate_string(const xpath_node& n) const$/;"	f	class:pugi::xpath_query
evaluate_string_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_string evaluate_string_impl(xpath_query_impl* impl, const xpath_node& n, xpath_stack_data& sd)$/;"	f
extra_buffers	infra/pugixml/pugixml.cpp	/^		xml_extra_buffer* extra_buffers;$/;"	m	struct:xml_document_struct	file:
feedHandler	base/LineGroup.h	/^			const FeedHandler* feedHandler() const {return _feedHandler;}$/;"	f	class:base::LineGroup
feedHandlerConstructor	base/MarketDataApplication.cpp	/^FeedHandler* MarketDataApplication::feedHandlerConstructor(const pugi::xml_node& feedHandlerNode, const std::string &feedHandlerName)$/;"	f	class:MarketDataApplication
feedHandlerConstructors	base/MarketDataApplication.h	/^			static FeedHandlerConstructor *feedHandlerConstructors;$/;"	m	class:base::MarketDataApplication
file	infra/gzstream/gzstream.h	/^    gzFile           file;               \/\/ file handle for compressed file$/;"	m	class:infra::gzstreambuf
file	infra/pugixml/pugixml.h	/^		void* file;$/;"	m	class:pugi::xml_writer_file
find	base/Line.cpp	/^Order* Line::find(uint64_t orderID) const$/;"	f	class:Line
find	infra/judy/JudyL2Array.h	/^        cvector * find( JudyKey key ) {$/;"	f	class:judyL2Array
find	infra/judy/JudyLArray.h	/^        JudyValue find( JudyKey key ) {$/;"	f	class:judyLArray
find	infra/judy/JudyS2Array.h	/^        cvector * find( const char * key, unsigned int keyLen = 0 ) {$/;"	f	class:judyS2Array
find	infra/judy/JudySArray.h	/^        JudyValue find( const char * key, unsigned int keyLen = 0 ) {$/;"	f	class:judySArray
find	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::find(const char_t* name) const$/;"	f	class:pugi::xpath_variable_set
find_attribute	infra/pugixml/pugixml.h	/^		template <typename Predicate> xml_attribute find_attribute(Predicate pred) const$/;"	f	class:pugi::xml_node
find_char	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* find_char(const char_t* s, char_t c)$/;"	f
find_child	infra/pugixml/pugixml.h	/^		template <typename Predicate> xml_node find_child(Predicate pred) const$/;"	f	class:pugi::xml_node
find_child_by_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* attr_name, const char_t* attr_value) const$/;"	f	class:pugi::xml_node
find_child_by_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::find_child_by_attribute(const char_t* name_, const char_t* attr_name, const char_t* attr_value) const$/;"	f	class:pugi::xml_node
find_node	infra/pugixml/pugixml.h	/^		template <typename Predicate> xml_node find_node(Predicate pred) const$/;"	f	class:pugi::xml_node
find_substring	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* find_substring(const char_t* s, const char_t* p)$/;"	f
first	infra/pugixml/pugixml.cpp	/^		xpath_node first() const$/;"	f	class:xpath_node_set_raw
first	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node xpath_node_set::first() const$/;"	f	class:pugi::xpath_node_set
first_attribute	infra/pugixml/pugixml.cpp	/^		xml_attribute_struct*	first_attribute;		\/\/\/< First attribute$/;"	m	struct:pugi::xml_node_struct	file:
first_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::first_attribute() const$/;"	f	class:pugi::xml_node
first_child	infra/pugixml/pugixml.cpp	/^		xml_node_struct*		first_child;			\/\/\/< First child$/;"	m	struct:pugi::xml_node_struct	file:
first_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::first_child() const$/;"	f	class:pugi::xml_node
first_element_by_path	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::first_element_by_path(const char_t* path_, char_t delimiter) const$/;"	f	class:pugi::xml_node
flush	infra/pugixml/pugixml.cpp	/^		char_t* flush(char_t* s)$/;"	f	struct:gap
flush	infra/pugixml/pugixml.cpp	/^		void flush()$/;"	f	class:xml_buffered_writer
flush	infra/pugixml/pugixml.cpp	/^		void flush(const char_t* data, size_t size)$/;"	f	class:xml_buffered_writer
flush_buffer	infra/gzstream/gzstream.cpp	/^int gzstreambuf::flush_buffer() {$/;"	f	class:infra::gzstreambuf
for_each	infra/pugixml/docs/samples/traverse_walker.cpp	/^    virtual bool for_each(pugi::xml_node& node)$/;"	f	struct:simple_walker
format_default	infra/pugixml/docs/manual/saving.html	/^            <a name="format_default"><\/a><code class="literal">format_default<\/code> is the default set of$/;"	a
format_default	infra/pugixml/pugixml.h	/^	const unsigned int format_default = format_indent;$/;"	m	namespace:pugi
format_indent	infra/pugixml/docs/manual/saving.html	/^            <a name="format_indent"><\/a><code class="literal">format_indent<\/code> determines if all nodes$/;"	a
format_indent	infra/pugixml/pugixml.h	/^	const unsigned int format_indent = 0x01;$/;"	m	namespace:pugi
format_no_declaration	infra/pugixml/docs/manual/saving.html	/^            <a name="format_no_declaration"><\/a><code class="literal">format_no_declaration<\/code> disables$/;"	a
format_no_declaration	infra/pugixml/pugixml.h	/^	const unsigned int format_no_declaration = 0x08;$/;"	m	namespace:pugi
format_no_escapes	infra/pugixml/docs/manual/saving.html	/^            <a name="format_no_escapes"><\/a><code class="literal">format_no_escapes<\/code> disables output$/;"	a
format_no_escapes	infra/pugixml/pugixml.h	/^	const unsigned int format_no_escapes = 0x10;$/;"	m	namespace:pugi
format_raw	infra/pugixml/docs/manual/saving.html	/^            <a name="format_raw"><\/a><code class="literal">format_raw<\/code> switches between formatted and$/;"	a
format_raw	infra/pugixml/pugixml.h	/^	const unsigned int format_raw = 0x04;$/;"	m	namespace:pugi
format_save_file_text	infra/pugixml/docs/manual/saving.html	/^            <a name="format_save_file_text"><\/a><code class="literal">format_save_file_text<\/code> changes$/;"	a
format_save_file_text	infra/pugixml/pugixml.h	/^	const unsigned int format_save_file_text = 0x20;$/;"	m	namespace:pugi
format_write_bom	infra/pugixml/docs/manual/saving.html	/^            <a name="format_write_bom"><\/a><code class="literal">format_write_bom<\/code> enables Byte Order$/;"	a
format_write_bom	infra/pugixml/pugixml.h	/^	const unsigned int format_write_bom = 0x02;$/;"	m	namespace:pugi
freed_size	infra/pugixml/pugixml.cpp	/^		size_t freed_size;$/;"	m	struct:xml_memory_page	file:
front	infra/containers/spsc/BoostSPSCQueue.h	/^		const T* front() const$/;"	f	class:infra::BoostSPSCQueue
front	infra/containers/spsc/BoostSPSCQueue_with.h	/^		const T* front() const$/;"	f	class:infra::BoostSPSCQueue
full_size	infra/pugixml/pugixml.cpp	/^		uint16_t full_size; \/\/ 0 if string occupies whole page$/;"	m	struct:xml_memory_string_header	file:
gap	infra/pugixml/pugixml.cpp	/^		gap(): end(0), size(0)$/;"	f	struct:gap
gap	infra/pugixml/pugixml.cpp	/^	struct gap$/;"	s	file:
gen_nan	infra/pugixml/pugixml.cpp	/^	PUGI__FN double gen_nan()$/;"	f
get	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_text::get() const$/;"	f	class:pugi::xml_text
get	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xpath_variable* xpath_variable_set::get(const char_t* name) const$/;"	f	class:pugi::xpath_variable_set
get	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* xpath_variable_set::get(const char_t* name)$/;"	f	class:pugi::xpath_variable_set
getAttributeAsBool	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::getAttributeAsBool(const char_t* name_, bool def) const$/;"	f	class:pugi::xml_node
getAttributeAsCString	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::getAttributeAsCString(const char_t* name_, const char_t* defaultValue_, bool couldBeEmpty_, const char_t* validValues_) const$/;"	f	class:pugi::xml_node
getAttributeAsCString	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::getAttributeAsCString(const char_t* name_, const char_t* value_) const$/;"	f	class:pugi::xml_node
getAttributeAsDouble	infra/pugixml/pugixml.cpp	/^	PUGI__FN double xml_node::getAttributeAsDouble(const char_t* name_, double def) const$/;"	f	class:pugi::xml_node
getAttributeAsFloat	infra/pugixml/pugixml.cpp	/^	PUGI__FN float xml_node::getAttributeAsFloat(const char_t* name_, float def) const$/;"	f	class:pugi::xml_node
getAttributeAsInt	infra/pugixml/pugixml.cpp	/^	PUGI__FN int xml_node::getAttributeAsInt(const char_t* name_, int def) const$/;"	f	class:pugi::xml_node
getAttributeAsLlong	infra/pugixml/pugixml.cpp	/^	PUGI__FN long long xml_node::getAttributeAsLlong(const char_t* name_, long long def) const$/;"	f	class:pugi::xml_node
getAttributeAsString	infra/pugixml/pugixml.cpp	/^	PUGI__FN const std::string xml_node::getAttributeAsString(const char_t* name_, const char_t* defaultValue_, bool couldBeEmpty_, const char_t* validValues_) const$/;"	f	class:pugi::xml_node
getAttributeAsString	infra/pugixml/pugixml.cpp	/^	PUGI__FN const std::string xml_node::getAttributeAsString(const char_t* name_, const char_t* value_) const$/;"	f	class:pugi::xml_node
getAttributeAsUInt	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int xml_node::getAttributeAsUInt(const char_t* name_, unsigned int def) const$/;"	f	class:pugi::xml_node
getAttributeAsUllong	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned long long xml_node::getAttributeAsUllong(const char_t* name_, unsigned long long def) const$/;"	f	class:pugi::xml_node
getCallback	base/API.cpp	/^CallBacks getCallback(const std::string updateType)$/;"	f
getChannelString	base/Line.cpp	/^const char *base::getChannelString(base::ChannelType type)$/;"	f	class:base
getClientHandleForLogger	infra/logger/Logger.cpp	/^LoggerClientHandle *Logger::getClientHandleForLogger(Thread *thread)$/;"	f	class:Logger
getFeedHandler	base/MarketDataApplication.cpp	/^FeedHandler *MarketDataApplication::getFeedHandler(const char *feedHandlerName) const$/;"	f	class:MarketDataApplication
getFeedID	base/FeedHandler.cpp	/^FeedID FeedHandler::getFeedID(const std::string& feedHandlerType)$/;"	f	class:FeedHandler
getFeedType	base/FeedHandler.cpp	/^const char* FeedHandler::getFeedType(FeedID id)$/;"	f	class:FeedHandler
getIdSub	base/FeedHandler.cpp	/^Subscription* FeedHandler::getIdSub(uint64_t symbolID) $/;"	f	class:FeedHandler
getIdSub	base/LineGroup.cpp	/^Subscription* LineGroup::getIdSub(uint64_t symbolID)$/;"	f	class:LineGroup
getIdSub32	base/Line.cpp	/^Subscription* Line::getIdSub32(uint16_t offset)$/;"	f	class:Line
getLastValue	infra/judy/JudyL2Array.h	/^        vector * getLastValue() {$/;"	f	class:judyL2Array
getLastValue	infra/judy/JudyLArray.h	/^        JudyValue getLastValue() {$/;"	f	class:judyLArray
getLastValue	infra/judy/JudyS2Array.h	/^        vector * getLastValue() {$/;"	f	class:judyS2Array
getLastValue	infra/judy/JudySArray.h	/^        JudyValue getLastValue() {$/;"	f	class:judySArray
getLatency	base/BaseCommon.h	/^inline void getLatency(uint64_t *latencyArr, timespec &mt)$/;"	f	class:base::PlaybackMode
getLogFileHandle	infra/logger/Logger.cpp	/^const FILE *Logger::getLogFileHandle() const$/;"	f	class:Logger
getLogLevelString	infra/logger/Logger.cpp	/^const char *Logger::getLogLevelString(LogLevel level)$/;"	f	class:Logger
getLoggerInstance	base/MarketDataApplication.cpp	/^const Logger *MarketDataApplication::getLoggerInstance() const$/;"	f	class:MarketDataApplication
getLoggerInstance	infra/logger/Logger.cpp	/^Logger* Logger::getLoggerInstance(const std::string& appName, const MarketDataApplication *appInstance, pugi::xml_document& doc)$/;"	f	class:Logger
getLoggerLevelFromString	infra/logger/Logger.cpp	/^LogLevel Logger::getLoggerLevelFromString(std::string level)$/;"	f	class:Logger
getNetworkReader	base/MarketDataApplication.cpp	/^NetworkReader *MarketDataApplication::getNetworkReader(const char *readerName, const pugi::xml_node &configNode) const$/;"	f	class:MarketDataApplication
getParsedIPPort	base/Line.cpp	/^IP IP::getParsedIPPort(const MarketDataApplication *_appInstance, const pugi::xml_node &lineNode, const char *ipType)$/;"	f	class:IP
getParsedIPPort	base/Line.cpp	/^IP IP::getParsedIPPort(const MarketDataApplication *_appInstance, const pugi::xml_node &node, const char *ipType, const std::string ipString)$/;"	f	class:IP
getProductInfo	base/FeedHandler.cpp	/^ProductInfo* FeedHandler::getProductInfo(Line *line, uint32_t msgType, const char* symbol, uint64_t symbolID, const char *isin, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:FeedHandler
getProductInfo	base/FeedHandler.cpp	/^ProductInfo* FeedHandler::getProductInfo(Line *line, uint32_t msgType, uint64_t symbolID, const char* symbol, const char *isin, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:FeedHandler
getReadPtr	infra/containers/spsc/SPSCQueue.h	/^			std::shared_ptr<T> getReadPtr()$/;"	f	class:infra::SPSCQueue
getReadPtrBlockable	infra/containers/spsc/SPSCQueue.h	/^			std::shared_ptr<T> getReadPtrBlockable()$/;"	f	class:infra::SPSCQueue
getRecorder	base/MarketDataApplication.cpp	/^Recorder* MarketDataApplication::getRecorder() const$/;"	f	class:MarketDataApplication
getSymbolSub	base/FeedHandler.cpp	/^Subscription* FeedHandler::getSymbolSub(const char *symbol) $/;"	f	class:FeedHandler
getThreadID	infra/thread/Thread.cpp	/^long int Thread::getThreadID() const$/;"	f	class:Thread
getThreadMode	base/MarketDataApplication.cpp	/^BindThreads MarketDataApplication::getThreadMode(const char *mode)$/;"	f	class:MarketDataApplication
getValidIdIsinSymbolSub	base/FeedHandler.cpp	/^Subscription* FeedHandler::getValidIdIsinSymbolSub(uint64_t symbolID, const char* symbol, const char *isin)$/;"	f	class:FeedHandler
getWriterPtr	infra/containers/spsc/SPSCQueue.h	/^			T* getWriterPtr()$/;"	f	class:infra::SPSCQueue
getWriterPtrBlockable	infra/containers/spsc/SPSCQueue.h	/^			T* getWriterPtrBlockable()$/;"	f	class:infra::SPSCQueue
get_allocator	infra/pugixml/pugixml.cpp	/^	inline xml_allocator& get_allocator(const xml_node_struct* node)$/;"	f
get_boolean	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable::get_boolean() const$/;"	f	class:pugi::xpath_variable
get_buffer_encoding	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_encoding get_buffer_encoding(xml_encoding encoding, const void* contents, size_t size)$/;"	f
get_file_size	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_status get_file_size(FILE* file, size_t& out_result)$/;"	f
get_integer_base	infra/pugixml/pugixml.cpp	/^	PUGI__FN int get_integer_base(const char_t* value)$/;"	f
get_latin1_7bit_prefix_length	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t get_latin1_7bit_prefix_length(const uint8_t* data, size_t size)$/;"	f
get_memory_allocation_function	infra/pugixml/pugixml.cpp	/^	PUGI__FN allocation_function PUGIXML_FUNCTION get_memory_allocation_function()$/;"	f	namespace:pugi
get_memory_deallocation_function	infra/pugixml/pugixml.cpp	/^	PUGI__FN deallocation_function PUGIXML_FUNCTION get_memory_deallocation_function()$/;"	f	namespace:pugi
get_mutable_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool get_mutable_buffer(char_t*& out_buffer, size_t& out_length, const void* contents, size_t size, bool is_mutable)$/;"	f
get_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xpath_node_set& xpath_variable::get_node_set() const$/;"	f	class:pugi::xpath_variable
get_number	infra/pugixml/pugixml.cpp	/^	PUGI__FN double xpath_variable::get_number() const$/;"	f	class:pugi::xpath_variable
get_strconv_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN strconv_attribute_t get_strconv_attribute(unsigned int optmask)$/;"	f
get_strconv_pcdata	infra/pugixml/pugixml.cpp	/^	PUGI__FN strconv_pcdata_t get_strconv_pcdata(unsigned int optmask)$/;"	f
get_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xpath_variable::get_string() const$/;"	f	class:pugi::xpath_variable
get_valid_length	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t get_valid_length(const char_t* data, size_t length)$/;"	f
get_value_bool	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool get_value_bool(const char_t* value, bool def)$/;"	f
get_value_double	infra/pugixml/pugixml.cpp	/^	PUGI__FN double get_value_double(const char_t* value, double def)$/;"	f
get_value_float	infra/pugixml/pugixml.cpp	/^	PUGI__FN float get_value_float(const char_t* value, float def)$/;"	f
get_value_int	infra/pugixml/pugixml.cpp	/^	PUGI__FN int get_value_int(const char_t* value, int def)$/;"	f
get_value_llong	infra/pugixml/pugixml.cpp	/^	PUGI__FN long long get_value_llong(const char_t* value, long long def)$/;"	f
get_value_uint	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int get_value_uint(const char_t* value, unsigned int def)$/;"	f
get_value_ullong	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned long long get_value_ullong(const char_t* value, unsigned long long def)$/;"	f
get_wchar_encoding	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_encoding get_wchar_encoding()$/;"	f
get_write_encoding	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_encoding get_write_encoding(xml_encoding encoding)$/;"	f
get_write_native_encoding	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_encoding get_write_native_encoding()$/;"	f
globalClock	base/BaseCommon.h	/^inline timespec globalClock() \/\/\/< Return current time $/;"	f	class:base::PlaybackMode
guess_buffer_encoding	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_encoding guess_buffer_encoding(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)$/;"	f
gzstreambase	infra/gzstream/gzstream.cpp	/^gzstreambase::gzstreambase( const char* name, int mode) {$/;"	f	class:infra::gzstreambase
gzstreambase	infra/gzstream/gzstream.h	/^    gzstreambase() { init(&buf); }$/;"	f	class:infra::gzstreambase
gzstreambase	infra/gzstream/gzstream.h	/^class gzstreambase : virtual public std::ios {$/;"	c	namespace:infra
gzstreambuf	infra/gzstream/gzstream.h	/^    gzstreambuf() : opened(0) {$/;"	f	class:infra::gzstreambuf
gzstreambuf	infra/gzstream/gzstream.h	/^class gzstreambuf : public std::streambuf {$/;"	c	namespace:infra
hasInterest	base/Line.cpp	/^bool Line::hasInterest(CallBacks callback) const$/;"	f	class:Line
hasStrictInterest	base/Line.cpp	/^bool Line::hasStrictInterest(CallBacks callback) const$/;"	f	class:Line
has_declaration	infra/pugixml/pugixml.cpp	/^	inline bool has_declaration(const xml_node& node)$/;"	f
has_element_node_siblings	infra/pugixml/pugixml.cpp	/^		static bool has_element_node_siblings(xml_node_struct* node)$/;"	f	struct:xml_parser
hash_string	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int hash_string(const char_t* str)$/;"	f
hash_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t xml_attribute::hash_value() const$/;"	f	class:pugi::xml_attribute
hash_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t xml_node::hash_value() const$/;"	f	class:pugi::xml_node
head_	infra/containers/spsc/BoostSPSCQueue.h	/^		std::atomic<uint64_t> head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
head_	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::atomic<uint64_t> head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
head_	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		uint64_t head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
header	infra/pugixml/pugixml.cpp	/^		uintptr_t header;$/;"	m	struct:pugi::xml_attribute_struct	file:
header	infra/pugixml/pugixml.cpp	/^		uintptr_t header;$/;"	m	struct:pugi::xml_node_struct	file:
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:latin1_writer
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf16_counter
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf32_counter
high	infra/pugixml/pugixml.cpp	/^		static value_type high(value_type result, uint32_t)$/;"	f	struct:utf8_counter
ifStringIsISIN	base/FeedHandler.cpp	/^bool ifStringIsISIN(const char *str)$/;"	f
ifStringIsNum	base/FeedHandler.cpp	/^bool ifStringIsNum(const char *str)$/;"	f
ifStringIsRegEx	base/FeedHandler.cpp	/^bool ifStringIsRegEx(const char *str)$/;"	f
igzstream	infra/gzstream/gzstream.h	/^    igzstream( const char* name, int open_mode = std::ios::in)$/;"	f	class:infra::igzstream
igzstream	infra/gzstream/gzstream.h	/^    igzstream() : std::istream( &buf) {} $/;"	f	class:infra::igzstream
igzstream	infra/gzstream/gzstream.h	/^class igzstream : public gzstreambase, public std::istream {$/;"	c	namespace:infra
infra	infra/InfraCommon.h	/^namespace infra $/;"	n
infra	infra/containers/spsc/BoostSPSCQueue.h	/^namespace infra $/;"	n
infra	infra/containers/spsc/BoostSPSCQueue_with.h	/^namespace infra $/;"	n
infra	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^namespace infra $/;"	n
infra	infra/containers/spsc/SPSCQueue.h	/^namespace infra $/;"	n
infra	infra/gzstream/gzstream.cpp	/^namespace infra {$/;"	n	file:
infra	infra/gzstream/gzstream.h	/^namespace infra {$/;"	n
infra	infra/lock/Lock.h	/^namespace infra$/;"	n
infra	infra/logger/Logger.h	/^namespace infra$/;"	n
infra	infra/socket/Socket.h	/^namespace infra$/;"	n
infra	infra/thread/Thread.h	/^namespace infra $/;"	n
infra	infra/utils/StringUtils.h	/^namespace infra $/;"	n
init	base/Order.h	/^inline void Order::init(Line *line, Subscription *sub, OrderPool *orderPool, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double px, uint32_t size, Side side, uint64_t orderID)$/;"	f	class:Order
insert	base/Line.cpp	/^void Line::insert(uint64_t orderID, Order *order)$/;"	f	class:Line
insert	infra/judy/JudyL2Array.h	/^        bool insert( JudyKey key, JudyValue value ) {$/;"	f	class:judyL2Array
insert	infra/judy/JudyL2Array.h	/^        bool insert( JudyKey key, const vector & values, bool overwrite = false ) {$/;"	f	class:judyL2Array
insert	infra/judy/JudyLArray.h	/^        bool insert( JudyKey key, JudyValue value ) {$/;"	f	class:judyLArray
insert	infra/judy/JudyS2Array.h	/^        bool insert( const char * key, JudyValue value, unsigned int keyLen = 0 ) {$/;"	f	class:judyS2Array
insert	infra/judy/JudyS2Array.h	/^        bool insert( const char * key, const vector & values, unsigned int keyLen = 0, bool overwrite = false ) {$/;"	f	class:judyS2Array
insert	infra/judy/JudySArray.h	/^        bool insert( const char * key, JudyValue value, unsigned int keyLen = 0 ) {$/;"	f	class:judySArray
insert_attribute_after	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_attribute_after(const char_t* name_, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_attribute_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_attribute_before(const char_t* name_, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_child_after	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_after(const char_t* name_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_after	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_after(xml_node_type type_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_before(const char_t* name_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_child_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_child_before(xml_node_type type_, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_copy_after	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_copy_after(const xml_attribute& proto, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_copy_after	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_copy_after(const xml_node& proto, const xml_node& node)$/;"	f	class:pugi::xml_node
insert_copy_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::insert_copy_before(const xml_attribute& proto, const xml_attribute& attr)$/;"	f	class:pugi::xml_node
insert_copy_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::insert_copy_before(const xml_node& proto, const xml_node& node)$/;"	f	class:pugi::xml_node
insertion_sort	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred, typename T> void insertion_sort(I begin, I end, const Pred& pred, T*)$/;"	f
internal_object	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_struct* xml_attribute::internal_object() const$/;"	f	class:pugi::xml_attribute
internal_object	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_struct* xml_node::internal_object() const$/;"	f	class:pugi::xml_node
isActive	infra/thread/Thread.cpp	/^bool Thread::isActive() const$/;"	f	class:Thread
isEmpty	infra/judy/JudyL2Array.h	/^        bool isEmpty() {$/;"	f	class:judyL2Array
isEmpty	infra/judy/JudyLArray.h	/^        bool isEmpty() {$/;"	f	class:judyLArray
isEmpty	infra/judy/JudyS2Array.h	/^        bool isEmpty() {$/;"	f	class:judyS2Array
isEmpty	infra/judy/JudySArray.h	/^        bool isEmpty() {$/;"	f	class:judySArray
isSingledToStop	infra/thread/Thread.cpp	/^bool Thread::isSingledToStop() const$/;"	f	class:Thread
isStopped	infra/thread/Thread.cpp	/^bool Thread::isStopped() const$/;"	f	class:Thread
is_little_endian	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool is_little_endian()$/;"	f
is_nan	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool is_nan(double value)$/;"	f
is_open	infra/gzstream/gzstream.h	/^    int is_open() { return opened; }$/;"	f	class:infra::gzstreambuf
is_posinv	infra/pugixml/pugixml.cpp	/^		bool is_posinv()$/;"	f	class:xpath_ast_node
is_text_node	infra/pugixml/pugixml.cpp	/^	inline bool is_text_node(xml_node_struct* node)$/;"	f
iterator	infra/pugixml/pugixml.h	/^		typedef It iterator;$/;"	t	class:pugi::xml_object_range
iterator	infra/pugixml/pugixml.h	/^		typedef xml_node_iterator iterator;$/;"	t	class:pugi::xml_node
iterator_category	infra/pugixml/pugixml.h	/^		typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:pugi::xml_attribute_iterator
iterator_category	infra/pugixml/pugixml.h	/^		typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:pugi::xml_named_node_iterator
iterator_category	infra/pugixml/pugixml.h	/^		typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:pugi::xml_node_iterator
judyL2Array	infra/judy/JudyL2Array.h	/^        explicit judyL2Array( const judyL2Array< JudyKey, JudyValue > & other ): _maxLevels( other._maxLevels ),$/;"	f	class:judyL2Array
judyL2Array	infra/judy/JudyL2Array.h	/^        judyL2Array(): _maxLevels( sizeof( JudyKey ) ), _depth( 1 ), _lastSlot( 0 ), _success( true ) {$/;"	f	class:judyL2Array
judyL2Array	infra/judy/JudyL2Array.h	/^class judyL2Array {$/;"	c
judyLArray	infra/judy/JudyLArray.h	/^        explicit judyLArray( const judyLArray< JudyKey, JudyValue > & other ): _maxLevels( other._maxLevels ),$/;"	f	class:judyLArray
judyLArray	infra/judy/JudyLArray.h	/^        judyLArray(): _maxLevels( sizeof( JudyKey ) ), _depth( 1 ), _lastSlot( 0 ), _success( true ) {$/;"	f	class:judyLArray
judyLArray	infra/judy/JudyLArray.h	/^class judyLArray {$/;"	c
judyS2Array	infra/judy/JudyS2Array.h	/^        explicit judyS2Array( const judyS2Array< JudyValue > & other ): _maxKeyLen( other._maxKeyLen ), _success( other._success ) {$/;"	f	class:judyS2Array
judyS2Array	infra/judy/JudyS2Array.h	/^        judyS2Array( unsigned int maxKeyLen ): _maxKeyLen( maxKeyLen ), _lastSlot( 0 ), _success( true ) {$/;"	f	class:judyS2Array
judyS2Array	infra/judy/JudyS2Array.h	/^class judyS2Array {$/;"	c
judySArray	infra/judy/JudySArray.h	/^        explicit judySArray( const judySArray< JudyValue > & other ): _maxKeyLen( other._maxKeyLen ), _success( other._success ) {$/;"	f	class:judySArray
judySArray	infra/judy/JudySArray.h	/^        judySArray( unsigned int maxKeyLen ): _maxKeyLen( maxKeyLen ), _success( true ) {$/;"	f	class:judySArray
judySArray	infra/judy/JudySArray.h	/^class judySArray {$/;"	c
judy_abort	infra/judy/Judy.cpp	/^void judy_abort( char * msg ) {$/;"	f
judy_abort	infra/judy/JudyCore.cpp	/^void judy_abort( char * msg ) {$/;"	f
judy_alloc	infra/judy/Judy.cpp	/^void * judy_alloc( Judy * judy, unsigned int type ) {$/;"	f
judy_alloc	infra/judy/JudyCore.cpp	/^void * judy_alloc( Judy * judy, unsigned int type ) {$/;"	f
judy_cell	infra/judy/Judy.cpp	/^JudySlot * judy_cell( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judy_cell	infra/judy/JudyCore.cpp	/^JudySlot * judy_cell( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judy_clone	infra/judy/Judy.cpp	/^Judy * judy_clone( Judy * judy ) {$/;"	f
judy_clone	infra/judy/JudyCore.cpp	/^Judy * judy_clone( Judy * judy ) {$/;"	f
judy_close	infra/judy/Judy.cpp	/^void judy_close( Judy * judy ) {$/;"	f
judy_close	infra/judy/JudyCore.cpp	/^void judy_close( Judy * judy ) {$/;"	f
judy_data	infra/judy/Judy.cpp	/^void * judy_data( Judy * judy, unsigned int amt )$/;"	f
judy_data	infra/judy/JudyCore.cpp	/^void * judy_data( Judy * judy, unsigned int amt )$/;"	f
judy_del	infra/judy/Judy.cpp	/^JudySlot * judy_del( Judy * judy ) {$/;"	f
judy_del	infra/judy/JudyCore.cpp	/^JudySlot * judy_del( Judy * judy ) {$/;"	f
judy_end	infra/judy/Judy.cpp	/^JudySlot * judy_end( Judy * judy ) {$/;"	f
judy_end	infra/judy/JudyCore.cpp	/^JudySlot * judy_end( Judy * judy ) {$/;"	f
judy_first	infra/judy/Judy.cpp	/^JudySlot * judy_first( Judy * judy, JudySlot next, unsigned int off, unsigned int depth ) {$/;"	f
judy_first	infra/judy/JudyCore.cpp	/^JudySlot * judy_first( Judy * judy, JudySlot next, unsigned int off, unsigned int depth ) {$/;"	f
judy_free	infra/judy/Judy.cpp	/^void judy_free( Judy * judy, void * block, int type ) {$/;"	f
judy_free	infra/judy/JudyCore.cpp	/^void judy_free( Judy * judy, void * block, int type ) {$/;"	f
judy_key	infra/judy/Judy.cpp	/^unsigned int judy_key( Judy * judy, unsigned char * buff, unsigned int max ) {$/;"	f
judy_key	infra/judy/JudyCore.cpp	/^unsigned int judy_key( Judy * judy, unsigned char * buff, unsigned int max ) {$/;"	f
judy_last	infra/judy/Judy.cpp	/^JudySlot * judy_last( Judy * judy, JudySlot next, unsigned int off, unsigned int depth ) {$/;"	f
judy_last	infra/judy/JudyCore.cpp	/^JudySlot * judy_last( Judy * judy, JudySlot next, unsigned int off, unsigned int depth ) {$/;"	f
judy_nxt	infra/judy/Judy.cpp	/^JudySlot * judy_nxt( Judy * judy ) {$/;"	f
judy_nxt	infra/judy/JudyCore.cpp	/^JudySlot * judy_nxt( Judy * judy ) {$/;"	f
judy_open	infra/judy/Judy.cpp	/^Judy * judy_open( unsigned int max, unsigned int depth ) {$/;"	f
judy_open	infra/judy/JudyCore.cpp	/^Judy * judy_open( unsigned int max, unsigned int depth ) {$/;"	f
judy_promote	infra/judy/Judy.cpp	/^JudySlot * judy_promote( Judy * judy, JudySlot * next, int idx, judyvalue value, int keysize ) {$/;"	f
judy_promote	infra/judy/JudyCore.cpp	/^JudySlot * judy_promote( Judy * judy, JudySlot * next, int idx, judyvalue value, int keysize ) {$/;"	f
judy_prv	infra/judy/Judy.cpp	/^JudySlot * judy_prv( Judy * judy ) {$/;"	f
judy_prv	infra/judy/JudyCore.cpp	/^JudySlot * judy_prv( Judy * judy ) {$/;"	f
judy_radix	infra/judy/Judy.cpp	/^void judy_radix( Judy * judy, JudySlot * radix, unsigned char * old, int start, int slot, int keysize, unsigned char key, unsigned int depth ) {$/;"	f
judy_radix	infra/judy/JudyCore.cpp	/^void judy_radix( Judy * judy, JudySlot * radix, unsigned char * old, int start, int slot, int keysize, unsigned char key, unsigned int depth ) {$/;"	f
judy_slot	infra/judy/Judy.cpp	/^JudySlot * judy_slot( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judy_slot	infra/judy/JudyCore.cpp	/^JudySlot * judy_slot( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judy_splitnode	infra/judy/Judy.cpp	/^void judy_splitnode( Judy * judy, JudySlot * next, unsigned int size, unsigned int keysize, unsigned int depth ) {$/;"	f
judy_splitnode	infra/judy/JudyCore.cpp	/^void judy_splitnode( Judy * judy, JudySlot * next, unsigned int size, unsigned int keysize, unsigned int depth ) {$/;"	f
judy_splitspan	infra/judy/Judy.cpp	/^void judy_splitspan( Judy * judy, JudySlot * next, unsigned char * base ) {$/;"	f
judy_splitspan	infra/judy/JudyCore.cpp	/^void judy_splitspan( Judy * judy, JudySlot * next, unsigned char * base ) {$/;"	f
judy_strt	infra/judy/Judy.cpp	/^JudySlot * judy_strt( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judy_strt	infra/judy/JudyCore.cpp	/^JudySlot * judy_strt( Judy * judy, const unsigned char * buff, unsigned int max ) {$/;"	f
judyl2KVpair	infra/judy/JudyL2Array.h	/^struct judyl2KVpair {$/;"	s
judylKVpair	infra/judy/JudyLArray.h	/^struct judylKVpair {$/;"	s
judys2KVpair	infra/judy/JudyS2Array.h	/^struct judys2KVpair {$/;"	s
judysKVpair	infra/judy/JudySArray.h	/^struct judysKVpair {$/;"	s
judyvalue	infra/judy/Judy.h	/^typedef unsigned int judyvalue;$/;"	t
judyvalue	infra/judy/Judy.h	/^typedef unsigned long long judyvalue;$/;"	t
key	infra/judy/JudyL2Array.h	/^    JudyKey key;$/;"	m	struct:judyl2KVpair
key	infra/judy/JudyLArray.h	/^    JudyKey key;$/;"	m	struct:judylKVpair
key	infra/judy/JudyS2Array.h	/^    unsigned char * key;$/;"	m	struct:judys2KVpair
key	infra/judy/JudySArray.h	/^    unsigned char * key;$/;"	m	struct:judysKVpair
kv	infra/judy/JudyL2Array.h	/^        cpair kv;$/;"	m	class:judyL2Array
kv	infra/judy/JudyS2Array.h	/^        cpair kv;$/;"	m	class:judyS2Array
last_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::last_attribute() const$/;"	f	class:pugi::xml_node
last_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::last_child() const$/;"	f	class:pugi::xml_node
latin1_writer	infra/pugixml/pugixml.cpp	/^	struct latin1_writer$/;"	s	file:
length	infra/pugixml/pugixml.cpp	/^		size_t length() const$/;"	f	class:xpath_string
less	infra/pugixml/pugixml.cpp	/^	struct less$/;"	s	file:
less_equal	infra/pugixml/pugixml.cpp	/^	struct less_equal$/;"	s	file:
level	infra/judy/Judy.h	/^    unsigned int level;       \/\/ current height of stack$/;"	m	struct:__anon5
level	infra/logger/Logger.h	/^			LogLevel level() const { return _level;}$/;"	f	class:infra::Logger
level	infra/logger/Logger.h	/^			inline LogLevel level() const { return _level;}$/;"	f	class:infra::LoggerClientHandle
lex_axis_attribute	infra/pugixml/pugixml.cpp	/^		lex_axis_attribute,$/;"	e	enum:lexeme_t	file:
lex_close_brace	infra/pugixml/pugixml.cpp	/^		lex_close_brace,$/;"	e	enum:lexeme_t	file:
lex_close_square_brace	infra/pugixml/pugixml.cpp	/^		lex_close_square_brace,$/;"	e	enum:lexeme_t	file:
lex_comma	infra/pugixml/pugixml.cpp	/^		lex_comma,$/;"	e	enum:lexeme_t	file:
lex_dot	infra/pugixml/pugixml.cpp	/^		lex_dot,$/;"	e	enum:lexeme_t	file:
lex_double_colon	infra/pugixml/pugixml.cpp	/^		lex_double_colon,$/;"	e	enum:lexeme_t	file:
lex_double_dot	infra/pugixml/pugixml.cpp	/^		lex_double_dot,$/;"	e	enum:lexeme_t	file:
lex_double_slash	infra/pugixml/pugixml.cpp	/^		lex_double_slash,$/;"	e	enum:lexeme_t	file:
lex_eof	infra/pugixml/pugixml.cpp	/^		lex_eof$/;"	e	enum:lexeme_t	file:
lex_equal	infra/pugixml/pugixml.cpp	/^		lex_equal,$/;"	e	enum:lexeme_t	file:
lex_greater	infra/pugixml/pugixml.cpp	/^		lex_greater,$/;"	e	enum:lexeme_t	file:
lex_greater_or_equal	infra/pugixml/pugixml.cpp	/^		lex_greater_or_equal,$/;"	e	enum:lexeme_t	file:
lex_less	infra/pugixml/pugixml.cpp	/^		lex_less,$/;"	e	enum:lexeme_t	file:
lex_less_or_equal	infra/pugixml/pugixml.cpp	/^		lex_less_or_equal,$/;"	e	enum:lexeme_t	file:
lex_minus	infra/pugixml/pugixml.cpp	/^		lex_minus,$/;"	e	enum:lexeme_t	file:
lex_multiply	infra/pugixml/pugixml.cpp	/^		lex_multiply,$/;"	e	enum:lexeme_t	file:
lex_none	infra/pugixml/pugixml.cpp	/^		lex_none = 0,$/;"	e	enum:lexeme_t	file:
lex_not_equal	infra/pugixml/pugixml.cpp	/^		lex_not_equal,$/;"	e	enum:lexeme_t	file:
lex_number	infra/pugixml/pugixml.cpp	/^		lex_number,$/;"	e	enum:lexeme_t	file:
lex_open_brace	infra/pugixml/pugixml.cpp	/^		lex_open_brace,$/;"	e	enum:lexeme_t	file:
lex_open_square_brace	infra/pugixml/pugixml.cpp	/^		lex_open_square_brace,$/;"	e	enum:lexeme_t	file:
lex_plus	infra/pugixml/pugixml.cpp	/^		lex_plus,$/;"	e	enum:lexeme_t	file:
lex_quoted_string	infra/pugixml/pugixml.cpp	/^		lex_quoted_string,$/;"	e	enum:lexeme_t	file:
lex_slash	infra/pugixml/pugixml.cpp	/^		lex_slash,$/;"	e	enum:lexeme_t	file:
lex_string	infra/pugixml/pugixml.cpp	/^		lex_string,$/;"	e	enum:lexeme_t	file:
lex_union	infra/pugixml/pugixml.cpp	/^		lex_union,$/;"	e	enum:lexeme_t	file:
lex_var_ref	infra/pugixml/pugixml.cpp	/^		lex_var_ref,$/;"	e	enum:lexeme_t	file:
lexeme_t	infra/pugixml/pugixml.cpp	/^	enum lexeme_t$/;"	g	file:
lineGroupLoop	base/LineGroup.cpp	/^void LineGroup::lineGroupLoop()$/;"	f	class:LineGroup
load	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(const char_t* contents, unsigned int options)$/;"	f	class:pugi::xml_document
load	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(std::basic_istream<char, std::char_traits<char> >& stream, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load(std::basic_istream<wchar_t, std::char_traits<wchar_t> >& stream, unsigned int options)$/;"	f	class:pugi::xml_document
load_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer(const void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_buffer_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result load_buffer_impl(xml_document_struct* doc, xml_node_struct* root, void* contents, size_t size, unsigned int options, xml_encoding encoding, bool is_mutable, bool own, char_t** out_buffer)$/;"	f
load_buffer_inplace	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer_inplace(void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_buffer_inplace_own	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_buffer_inplace_own(void* contents, size_t size, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_file(const char* path_, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result xml_document::load_file(const wchar_t* path_, unsigned int options, xml_encoding encoding)$/;"	f	class:pugi::xml_document
load_file_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result load_file_impl(xml_document& doc, FILE* file, unsigned int options, xml_encoding encoding)$/;"	f
load_preprocess	infra/pugixml/docs/samples/include.cpp	/^bool load_preprocess(pugi::xml_document& doc, const char* path)$/;"	f
load_stream_data_noseek	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_status load_stream_data_noseek(std::basic_istream<T>& stream, void** out_buffer, size_t* out_size)$/;"	f
load_stream_data_seek	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_status load_stream_data_seek(std::basic_istream<T>& stream, void** out_buffer, size_t* out_size)$/;"	f
load_stream_impl	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN xml_parse_result load_stream_impl(xml_document& doc, std::basic_istream<T>& stream, unsigned int options, xml_encoding encoding)$/;"	f
local_name	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* local_name(const xpath_node& node)$/;"	f
logAndPut	infra/logger/Logger.cpp	/^void LoggerClientHandle::logAndPut(LogLevel LEVEL, const char *FILENAME, uint32_t LINE, const char *func, const char *FORMAT, ...)$/;"	f	class:LoggerClientHandle
logConsole	infra/logger/Logger.h	25;"	d
logConstructor	infra/logger/Logger.h	29;"	d
logMessage	infra/logger/Logger.h	33;"	d
loggerClient	infra/thread/Thread.cpp	/^LoggerClientHandle *Thread::loggerClient() const$/;"	f	class:Thread
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:latin1_writer
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf16_writer
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf32_writer
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf8_counter
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t ch)$/;"	f	struct:utf8_writer
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t)$/;"	f	struct:utf16_counter
low	infra/pugixml/pugixml.cpp	/^		static value_type low(value_type result, uint32_t)$/;"	f	struct:utf32_counter
main	infra/pugixml/docs/samples/custom_memory_management.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/include.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/load_error_handling.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/load_file.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/load_memory.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/load_options.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/load_stream.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/modify_add.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/modify_base.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/modify_remove.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_custom_writer.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_declaration.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_file.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_options.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_stream.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/save_subtree.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/text.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/traverse_base.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/traverse_iter.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/traverse_predicate.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/traverse_rangefor.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/traverse_walker.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/xpath_error.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/xpath_query.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/xpath_select.cpp	/^int main()$/;"	f
main	infra/pugixml/docs/samples/xpath_variables.cpp	/^int main()$/;"	f
make_parse_result	infra/pugixml/pugixml.cpp	/^	inline xml_parse_result make_parse_result(xml_parse_status status, ptrdiff_t offset = 0)$/;"	f
manual.access	infra/pugixml/docs/manual/access.html	/^<a name="manual.access"><\/a><a class="link" href="access.html" title="Accessing document data">Accessing document data<\/a>$/;"	a
manual.access.attrdata	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.attrdata"><\/a><a class="link" href="access.html#manual.access.attrdata" title="Getting attribute data">Getting attribute data<\/a>$/;"	a
manual.access.basic	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.basic"><\/a><a class="link" href="access.html#manual.access.basic" title="Basic traversal functions">Basic traversal functions<\/a>$/;"	a
manual.access.contents	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.contents"><\/a><a class="link" href="access.html#manual.access.contents" title="Contents-based traversal functions">Contents-based traversal functions<\/a>$/;"	a
manual.access.iterators	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.iterators"><\/a><a class="link" href="access.html#manual.access.iterators" title="Traversing node\/attribute lists via iterators">Traversing node\/attribute lists$/;"	a
manual.access.misc	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.misc"><\/a><a class="link" href="access.html#manual.access.misc" title="Miscellaneous functions">Miscellaneous functions<\/a>$/;"	a
manual.access.nodedata	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.nodedata"><\/a><a class="link" href="access.html#manual.access.nodedata" title="Getting node data">Getting node data<\/a>$/;"	a
manual.access.predicate	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.predicate"><\/a><a class="link" href="access.html#manual.access.predicate" title="Searching for nodes\/attributes with predicates">Searching for nodes\/attributes$/;"	a
manual.access.rangefor	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.rangefor"><\/a><a class="link" href="access.html#manual.access.rangefor" title="Range-based for-loop support">Range-based for-loop support<\/a>$/;"	a
manual.access.text	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.text"><\/a><a class="link" href="access.html#manual.access.text" title="Working with text contents">Working with text contents<\/a>$/;"	a
manual.access.walker	infra/pugixml/docs/manual/access.html	/^<a name="manual.access.walker"><\/a><a class="link" href="access.html#manual.access.walker" title="Recursive traversal with xml_tree_walker">Recursive traversal with xml_tree_walker<\/a>$/;"	a
manual.apiref	infra/pugixml/docs/manual/apiref.html	/^<a name="manual.apiref"><\/a><a class="link" href="apiref.html" title="API Reference">API Reference<\/a>$/;"	a
manual.changes	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes"><\/a><a class="link" href="changes.html" title="Changelog">Changelog<\/a>$/;"	a
manual.changes.15_07_2006___version_0_1	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.15_07_2006___version_0_1"><\/a><\/span><a class="link" href="changes.html#manual.changes.15_07_2006___version_0_1">15.07.2006$/;"	a
manual.changes.17_09_2009___version_0_42	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.17_09_2009___version_0_42"><\/a><\/span><a class="link" href="changes.html#manual.changes.17_09_2009___version_0_42">17.09.2009$/;"	a
manual.changes.18_01_2009___version_0_4	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.18_01_2009___version_0_4"><\/a><\/span><a class="link" href="changes.html#manual.changes.18_01_2009___version_0_4">18.01.2009$/;"	a
manual.changes.1_05_2012___version_1_2	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.1_05_2012___version_1_2"><\/a><\/span><a class="link" href="changes.html#manual.changes.1_05_2012___version_1_2">1.05.2012$/;"	a
manual.changes.1_07_2010___version_0_9	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.1_07_2010___version_0_9"><\/a><\/span><a class="link" href="changes.html#manual.changes.1_07_2010___version_0_9">1.07.2010$/;"	a
manual.changes.1_11_2010___version_1_0	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.1_11_2010___version_1_0"><\/a><\/span><a class="link" href="changes.html#manual.changes.1_11_2010___version_1_0">1.11.2010$/;"	a
manual.changes.21_02_2007___version_0_3	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.21_02_2007___version_0_3"><\/a><\/span><a class="link" href="changes.html#manual.changes.21_02_2007___version_0_3">21.02.2007$/;"	a
manual.changes.27_02_2014___version_1_4	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.27_02_2014___version_1_4"><\/a><\/span><a class="link" href="changes.html#manual.changes.27_02_2014___version_1_4">27.02.2014$/;"	a
manual.changes.31_10_2007___version_0_34	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.31_10_2007___version_0_34"><\/a><\/span><a class="link" href="changes.html#manual.changes.31_10_2007___version_0_34">31.10.2007$/;"	a
manual.changes.6_11_2006___version_0_2	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.6_11_2006___version_0_2"><\/a><\/span><a class="link" href="changes.html#manual.changes.6_11_2006___version_0_2">6.11.2006$/;"	a
manual.changes.8_02_2009___version_0_41	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.8_02_2009___version_0_41"><\/a><\/span><a class="link" href="changes.html#manual.changes.8_02_2009___version_0_41">8.02.2009$/;"	a
manual.changes.8_11_2009___version_0_5	infra/pugixml/docs/manual/changes.html	/^      <span class="phrase"><a name="manual.changes.8_11_2009___version_0_5"><\/a><\/span><a class="link" href="changes.html#manual.changes.8_11_2009___version_0_5">8.11.2009$/;"	a
manual.changes.h0	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h0"><\/a>$/;"	a
manual.changes.h1	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h1"><\/a>$/;"	a
manual.changes.h10	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h10"><\/a>$/;"	a
manual.changes.h11	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h11"><\/a>$/;"	a
manual.changes.h2	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h2"><\/a>$/;"	a
manual.changes.h3	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h3"><\/a>$/;"	a
manual.changes.h4	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h4"><\/a>$/;"	a
manual.changes.h5	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h5"><\/a>$/;"	a
manual.changes.h6	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h6"><\/a>$/;"	a
manual.changes.h7	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h7"><\/a>$/;"	a
manual.changes.h8	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h8"><\/a>$/;"	a
manual.changes.h9	infra/pugixml/docs/manual/changes.html	/^<a name="manual.changes.h9"><\/a>$/;"	a
manual.dom	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom"><\/a><a class="link" href="dom.html" title="Document object model">Document object model<\/a>$/;"	a
manual.dom.cpp	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.cpp"><\/a><a class="link" href="dom.html#manual.dom.cpp" title="C++ interface">C++ interface<\/a>$/;"	a
manual.dom.exception	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.exception"><\/a><a class="link" href="dom.html#manual.dom.exception" title="Exception guarantees">Exception guarantees<\/a>$/;"	a
manual.dom.memory	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.memory"><\/a><a class="link" href="dom.html#manual.dom.memory" title="Memory management">Memory management<\/a>$/;"	a
manual.dom.memory.custom	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.memory.custom"><\/a><a class="link" href="dom.html#manual.dom.memory.custom" title="Custom memory allocation\/deallocation functions">Custom memory allocation\/deallocation$/;"	a
manual.dom.memory.internals	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.memory.internals"><\/a><a class="link" href="dom.html#manual.dom.memory.internals" title="Document memory management internals">Document memory management$/;"	a
manual.dom.memory.tuning	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.memory.tuning"><\/a><a class="link" href="dom.html#manual.dom.memory.tuning" title="Memory consumption tuning">Memory consumption tuning<\/a>$/;"	a
manual.dom.thread	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.thread"><\/a><a class="link" href="dom.html#manual.dom.thread" title="Thread-safety guarantees">Thread-safety guarantees<\/a>$/;"	a
manual.dom.tree	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.tree"><\/a><a class="link" href="dom.html#manual.dom.tree" title="Tree structure">Tree structure<\/a>$/;"	a
manual.dom.unicode	infra/pugixml/docs/manual/dom.html	/^<a name="manual.dom.unicode"><\/a><a class="link" href="dom.html#manual.dom.unicode" title="Unicode interface">Unicode interface<\/a>$/;"	a
manual.install	infra/pugixml/docs/manual/install.html	/^<a name="manual.install"><\/a><a class="link" href="install.html" title="Installation">Installation<\/a>$/;"	a
manual.install.building	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building"><\/a><a class="link" href="install.html#manual.install.building" title="Building pugixml">Building pugixml<\/a>$/;"	a
manual.install.building.config	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building.config"><\/a><a class="link" href="install.html#manual.install.building.config" title="Additional configuration options">Additional configuration$/;"	a
manual.install.building.embed	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building.embed"><\/a><a class="link" href="install.html#manual.install.building.embed" title="Building pugixml as a part of another static library\/executable">Building pugixml as$/;"	a
manual.install.building.header	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building.header"><\/a><a name="PUGIXML_HEADER_ONLY"><\/a><a class="link" href="install.html#manual.install.building.header" title="Using pugixml in header-only mode">Using$/;"	a
manual.install.building.shared	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building.shared"><\/a><a class="link" href="install.html#manual.install.building.shared" title="Building pugixml as a standalone shared library">Building pugixml as$/;"	a
manual.install.building.static	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.building.static"><\/a><a class="link" href="install.html#manual.install.building.static" title="Building pugixml as a standalone static library">Building pugixml as$/;"	a
manual.install.getting	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.getting"><\/a><a class="link" href="install.html#manual.install.getting" title="Getting pugixml">Getting pugixml<\/a>$/;"	a
manual.install.getting.git	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.getting.git"><\/a><a class="link" href="install.html#manual.install.getting.git" title="Git repository">Git repository<\/a>$/;"	a
manual.install.getting.source	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.getting.source"><\/a><a class="link" href="install.html#manual.install.getting.source" title="Source distributions">Source distributions<\/a>$/;"	a
manual.install.getting.subversion	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.getting.subversion"><\/a><a class="link" href="install.html#manual.install.getting.subversion" title="Subversion repository">Subversion repository<\/a>$/;"	a
manual.install.portability	infra/pugixml/docs/manual/install.html	/^<a name="manual.install.portability"><\/a><a class="link" href="install.html#manual.install.portability" title="Portability">Portability<\/a>$/;"	a
manual.loading	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading"><\/a><a class="link" href="loading.html" title="Loading document">Loading document<\/a>$/;"	a
manual.loading.encoding	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.encoding"><\/a><a class="link" href="loading.html#manual.loading.encoding" title="Encodings">Encodings<\/a>$/;"	a
manual.loading.errors	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.errors"><\/a><a class="link" href="loading.html#manual.loading.errors" title="Handling parsing errors">Handling parsing errors<\/a>$/;"	a
manual.loading.file	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.file"><\/a><a class="link" href="loading.html#manual.loading.file" title="Loading document from file">Loading document from file<\/a>$/;"	a
manual.loading.memory	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.memory"><\/a><a class="link" href="loading.html#manual.loading.memory" title="Loading document from memory">Loading document from memory<\/a>$/;"	a
manual.loading.options	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.options"><\/a><a class="link" href="loading.html#manual.loading.options" title="Parsing options">Parsing options<\/a>$/;"	a
manual.loading.stream	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.stream"><\/a><a class="link" href="loading.html#manual.loading.stream" title="Loading document from C++ IOstreams">Loading document from C++ IOstreams<\/a>$/;"	a
manual.loading.w3c	infra/pugixml/docs/manual/loading.html	/^<a name="manual.loading.w3c"><\/a><a class="link" href="loading.html#manual.loading.w3c" title="Conformance to W3C specification">Conformance to W3C specification<\/a>$/;"	a
manual.modify	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify"><\/a><a class="link" href="modify.html" title="Modifying document data">Modifying document data<\/a>$/;"	a
manual.modify.add	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.add"><\/a><a class="link" href="modify.html#manual.modify.add" title="Adding nodes\/attributes">Adding nodes\/attributes<\/a>$/;"	a
manual.modify.attrdata	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.attrdata"><\/a><a class="link" href="modify.html#manual.modify.attrdata" title="Setting attribute data">Setting attribute data<\/a>$/;"	a
manual.modify.clone	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.clone"><\/a><a class="link" href="modify.html#manual.modify.clone" title="Cloning nodes\/attributes">Cloning nodes\/attributes<\/a>$/;"	a
manual.modify.fragments	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.fragments"><\/a><a class="link" href="modify.html#manual.modify.fragments" title="Assembling document from fragments">Assembling document from fragments<\/a>$/;"	a
manual.modify.nodedata	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.nodedata"><\/a><a class="link" href="modify.html#manual.modify.nodedata" title="Setting node data">Setting node data<\/a>$/;"	a
manual.modify.remove	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.remove"><\/a><a class="link" href="modify.html#manual.modify.remove" title="Removing nodes\/attributes">Removing nodes\/attributes<\/a>$/;"	a
manual.modify.text	infra/pugixml/docs/manual/modify.html	/^<a name="manual.modify.text"><\/a><a class="link" href="modify.html#manual.modify.text" title="Working with text contents">Working with text contents<\/a>$/;"	a
manual.overview	infra/pugixml/docs/manual.html	/^<a name="manual.overview"><\/a><a class="link" href="manual.html#manual.overview" title="Overview">Overview<\/a>$/;"	a
manual.overview.feedback	infra/pugixml/docs/manual.html	/^<a name="manual.overview.feedback"><\/a><a class="link" href="manual.html#manual.overview.feedback" title="Feedback">Feedback<\/a>$/;"	a
manual.overview.introduction	infra/pugixml/docs/manual.html	/^<a name="manual.overview.introduction"><\/a><a class="link" href="manual.html#manual.overview.introduction" title="Introduction">Introduction<\/a>$/;"	a
manual.overview.license	infra/pugixml/docs/manual.html	/^<a name="manual.overview.license"><\/a><a class="link" href="manual.html#manual.overview.license" title="License">License<\/a>$/;"	a
manual.overview.thanks	infra/pugixml/docs/manual.html	/^<a name="manual.overview.thanks"><\/a><a class="link" href="manual.html#manual.overview.thanks" title="Acknowledgments">Acknowledgments<\/a>$/;"	a
manual.saving	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving"><\/a><a class="link" href="saving.html" title="Saving document">Saving document<\/a>$/;"	a
manual.saving.declaration	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.declaration"><\/a><a class="link" href="saving.html#manual.saving.declaration" title="Customizing document declaration">Customizing document declaration<\/a>$/;"	a
manual.saving.encoding	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.encoding"><\/a><a class="link" href="saving.html#manual.saving.encoding" title="Encodings">Encodings<\/a>$/;"	a
manual.saving.file	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.file"><\/a><a class="link" href="saving.html#manual.saving.file" title="Saving document to a file">Saving document to a file<\/a>$/;"	a
manual.saving.options	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.options"><\/a><a class="link" href="saving.html#manual.saving.options" title="Output options">Output options<\/a>$/;"	a
manual.saving.stream	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.stream"><\/a><a class="link" href="saving.html#manual.saving.stream" title="Saving document to C++ IOstreams">Saving document to C++ IOstreams<\/a>$/;"	a
manual.saving.subtree	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.subtree"><\/a><a class="link" href="saving.html#manual.saving.subtree" title="Saving a single subtree">Saving a single subtree<\/a>$/;"	a
manual.saving.writer	infra/pugixml/docs/manual/saving.html	/^<a name="manual.saving.writer"><\/a><a class="link" href="saving.html#manual.saving.writer" title="Saving document via writer interface">Saving document via writer interface<\/a>$/;"	a
manual.toc	infra/pugixml/docs/manual/toc.html	/^<a name="manual.toc"><\/a><a class="link" href="toc.html" title="Table of Contents">Table of Contents<\/a>$/;"	a
manual.xpath	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath"><\/a><a class="link" href="xpath.html" title="XPath">XPath<\/a>$/;"	a
manual.xpath.errors	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.errors"><\/a><a class="link" href="xpath.html#manual.xpath.errors" title="Error handling">Error handling<\/a>$/;"	a
manual.xpath.query	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.query"><\/a><a class="link" href="xpath.html#manual.xpath.query" title="Using query objects">Using query objects<\/a>$/;"	a
manual.xpath.select	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.select"><\/a><a class="link" href="xpath.html#manual.xpath.select" title="Selecting nodes via XPath expression">Selecting nodes via XPath expression<\/a>$/;"	a
manual.xpath.types	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.types"><\/a><a class="link" href="xpath.html#manual.xpath.types" title="XPath types">XPath types<\/a>$/;"	a
manual.xpath.variables	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.variables"><\/a><a class="link" href="xpath.html#manual.xpath.variables" title="Using variables">Using variables<\/a>$/;"	a
manual.xpath.w3c	infra/pugixml/docs/manual/xpath.html	/^<a name="manual.xpath.w3c"><\/a><a class="link" href="xpath.html#manual.xpath.w3c" title="Conformance to W3C specification">Conformance to W3C specification<\/a>$/;"	a
max	infra/judy/Judy.h	/^    unsigned int max;         \/\/ max height of stack$/;"	m	struct:__anon5
max_size	base/Book.h	/^			size_type max_size () const throw() {$/;"	f	class:base::BookAlloc
median	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred> void median(I first, I middle, I last, const Pred& pred)$/;"	f
median3	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred> void median3(I first, I middle, I last, const Pred& pred)$/;"	f
memory	infra/pugixml/pugixml.cpp	/^		void* memory;$/;"	m	struct:xml_memory_page	file:
min_element	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred> I min_element(I begin, I end, const Pred& pred)$/;"	f
mode	infra/gzstream/gzstream.h	/^    int              mode;               \/\/ I\/O mode$/;"	m	class:infra::gzstreambuf
modifyOrder	base/Book.cpp	/^void Book::modifyOrder(Order *order)$/;"	f	class:Book
modifyOrder	base/Book.cpp	/^void Book::modifyOrder(Side side, double px, double oldPx, uint64_t size, uint64_t oldSize)$/;"	f	class:Book
modifyOrder	base/PriceLevel.cpp	/^void PriceLevel::modifyOrder(Order *order)$/;"	f	class:PriceLevel
modifyOrder	base/PriceLevel.cpp	/^void PriceLevel::modifyOrder(uint64_t size, uint64_t oldSize)$/;"	f	class:PriceLevel
mostRecentPair	infra/judy/JudyL2Array.h	/^        inline const cpair & mostRecentPair() {$/;"	f	class:judyL2Array
mostRecentPair	infra/judy/JudyLArray.h	/^        inline const pair & mostRecentPair() {$/;"	f	class:judyLArray
mostRecentPair	infra/judy/JudyS2Array.h	/^        inline const cpair & mostRecentPair() {$/;"	f	class:judyS2Array
mostRecentPair	infra/judy/JudySArray.h	/^        inline const pair & mostRecentPair() {$/;"	f	class:judySArray
n	infra/pugixml/pugixml.cpp	/^		xpath_node n;$/;"	m	struct:xpath_context	file:
name	infra/pugixml/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_boolean	file:
name	infra/pugixml/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_node_set	file:
name	infra/pugixml/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_number	file:
name	infra/pugixml/pugixml.cpp	/^		char_t name[1];$/;"	m	struct:xpath_variable_string	file:
name	infra/pugixml/pugixml.cpp	/^		char_t*					name;					\/\/\/< Pointer to element name.$/;"	m	struct:pugi::xml_node_struct	file:
name	infra/pugixml/pugixml.cpp	/^		char_t* name;	\/\/\/< Pointer to attribute name.$/;"	m	struct:pugi::xml_attribute_struct	file:
name	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::name() const$/;"	f	class:pugi::xml_attribute
name	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::name() const$/;"	f	class:pugi::xml_node
name	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xpath_variable::name() const$/;"	f	class:pugi::xpath_variable
namespace_uri	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xml_attribute& attr, const xml_node& parent)$/;"	f
namespace_uri	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xml_node& node)$/;"	f
namespace_uri	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* namespace_uri(const xpath_node& node)$/;"	f
namespace_uri_predicate	infra/pugixml/pugixml.cpp	/^		namespace_uri_predicate(const char_t* name)$/;"	f	struct:namespace_uri_predicate
namespace_uri_predicate	infra/pugixml/pugixml.cpp	/^	struct namespace_uri_predicate$/;"	s	file:
narrow_stream	infra/pugixml/pugixml.h	/^		std::basic_ostream<char, std::char_traits<char> >* narrow_stream;$/;"	m	class:pugi::xml_writer_stream
need_endian_swap_utf	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool need_endian_swap_utf(xml_encoding le, xml_encoding re)$/;"	f
networkReader	base/LineGroup.cpp	/^NetworkReader *LineGroup::networkReader() const$/;"	f	class:LineGroup
networkReaderLoop	base/NetworkReader.cpp	/^void NetworkReader::networkReaderLoop()$/;"	f	class:NetworkReader
networkReaderLoopFile	base/NetworkReader.cpp	/^void NetworkReader::networkReaderLoopFile()$/;"	f	class:NetworkReader
new_xpath_variable	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* new_xpath_variable(xpath_value_type type, const char_t* name)$/;"	f
new_xpath_variable	infra/pugixml/pugixml.cpp	/^	template <typename T> PUGI__FN T* new_xpath_variable(const char_t* name)$/;"	f
next	infra/containers/spsc/BoostSPSCQueue.h	/^		uint64_t next(uint64_t current)$/;"	f	class:infra::BoostSPSCQueue
next	infra/containers/spsc/BoostSPSCQueue_with.h	/^		uint64_t next(uint64_t current)$/;"	f	class:infra::BoostSPSCQueue
next	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		uint64_t next(uint64_t current)$/;"	f	class:infra::BoostSPSCQueue
next	infra/judy/Judy.h	/^    JudySlot next;            \/\/ judy object$/;"	m	struct:__anon4
next	infra/judy/Judy.h	/^    unsigned int next;        \/\/ next available offset$/;"	m	struct:__anon3
next	infra/judy/JudyL2Array.h	/^        const cpair & next() {$/;"	f	class:judyL2Array
next	infra/judy/JudyLArray.h	/^        const pair & next() {$/;"	f	class:judyLArray
next	infra/judy/JudyS2Array.h	/^        const cpair & next() {$/;"	f	class:judyS2Array
next	infra/judy/JudySArray.h	/^        const pair & next() {$/;"	f	class:judySArray
next	infra/pugixml/pugixml.cpp	/^		void next()$/;"	f	class:xpath_lexer
next	infra/pugixml/pugixml.cpp	/^		xml_extra_buffer* next;$/;"	m	struct:xml_extra_buffer	file:
next	infra/pugixml/pugixml.cpp	/^		xml_memory_page* next;$/;"	m	struct:xml_memory_page	file:
next	infra/pugixml/pugixml.cpp	/^		xml_stream_chunk* next;$/;"	m	struct:xml_stream_chunk	file:
next	infra/pugixml/pugixml.cpp	/^		xpath_memory_block* next;$/;"	m	struct:xpath_memory_block	file:
next_attribute	infra/pugixml/pugixml.cpp	/^		xml_attribute_struct* next_attribute;	\/\/\/< Next attribute$/;"	m	struct:pugi::xml_attribute_struct	file:
next_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_attribute::next_attribute() const$/;"	f	class:pugi::xml_attribute
next_sibling	infra/pugixml/pugixml.cpp	/^		xml_node_struct*		next_sibling;			\/\/\/< Right brother$/;"	m	struct:pugi::xml_node_struct	file:
next_sibling	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::next_sibling() const$/;"	f	class:pugi::xml_node
next_sibling	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::next_sibling(const char_t* name_) const$/;"	f	class:pugi::xml_node
node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xpath_node::node() const$/;"	f	class:pugi::xpath_node
node_cdata	infra/pugixml/docs/manual/dom.html	/^            Character data nodes (<a name="node_cdata"><\/a><code class="literal">node_cdata<\/code>) represent$/;"	a
node_cdata	infra/pugixml/pugixml.h	/^		node_cdata,			\/\/ Character data, i.e. '<![CDATA[text]]>'$/;"	e	enum:pugi::xml_node_type
node_comment	infra/pugixml/docs/manual/dom.html	/^            Comment nodes (<a name="node_comment"><\/a><code class="literal">node_comment<\/code>) represent$/;"	a
node_comment	infra/pugixml/pugixml.h	/^		node_comment,		\/\/ Comment tag, i.e. '<!-- text -->'$/;"	e	enum:pugi::xml_node_type
node_declaration	infra/pugixml/docs/manual/dom.html	/^            Declaration node (<a name="node_declaration"><\/a><code class="literal">node_declaration<\/code>)$/;"	a
node_declaration	infra/pugixml/pugixml.h	/^		node_declaration,	\/\/ Document declaration, i.e. '<?xml version="1.0"?>'$/;"	e	enum:pugi::xml_node_type
node_doctype	infra/pugixml/docs/manual/dom.html	/^            Document type declaration node (<a name="node_doctype"><\/a><code class="literal">node_doctype<\/code>)$/;"	a
node_doctype	infra/pugixml/pugixml.h	/^		node_doctype		\/\/ Document type declaration, i.e. '<!DOCTYPE doc>'$/;"	e	enum:pugi::xml_node_type
node_document	infra/pugixml/docs/manual/dom.html	/^            Document node (<a name="node_document"><\/a><code class="literal">node_document<\/code>) - this$/;"	a
node_document	infra/pugixml/pugixml.h	/^		node_document,		\/\/ A document tree's absolute root$/;"	e	enum:pugi::xml_node_type
node_element	infra/pugixml/docs/manual/dom.html	/^            Element\/tag node (<a name="node_element"><\/a><code class="literal">node_element<\/code>) - this$/;"	a
node_element	infra/pugixml/pugixml.h	/^		node_element,		\/\/ Element tag, i.e. '<node\/>'$/;"	e	enum:pugi::xml_node_type
node_height	infra/pugixml/pugixml.cpp	/^	PUGI__FN unsigned int node_height(xml_node n)$/;"	f
node_is_ancestor	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool node_is_ancestor(xml_node parent, xml_node node)$/;"	f
node_is_before	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool node_is_before(xml_node ln, unsigned int lh, xml_node rn, unsigned int rh)$/;"	f
node_null	infra/pugixml/docs/manual/dom.html	/^        <a name="node_null"><\/a>There is a special value of <code class="computeroutput"><span class="identifier">xml_node<\/span><\/code>$/;"	a
node_null	infra/pugixml/pugixml.h	/^		node_null,			\/\/ Empty (null) node handle$/;"	e	enum:pugi::xml_node_type
node_output	infra/pugixml/pugixml.cpp	/^	PUGI__FN void node_output(xml_buffered_writer& writer, const xml_node& node, const char_t* indent, unsigned int flags, unsigned int depth)$/;"	f
node_output_attributes	infra/pugixml/pugixml.cpp	/^	PUGI__FN void node_output_attributes(xml_buffered_writer& writer, const xml_node& node, unsigned int flags)$/;"	f
node_pcdata	infra/pugixml/docs/manual/dom.html	/^            Plain character data nodes (<a name="node_pcdata"><\/a><code class="literal">node_pcdata<\/code>)$/;"	a
node_pcdata	infra/pugixml/pugixml.h	/^		node_pcdata,		\/\/ Plain character data, i.e. 'text'$/;"	e	enum:pugi::xml_node_type
node_pi	infra/pugixml/docs/manual/dom.html	/^            Processing instruction node (<a name="node_pi"><\/a><code class="literal">node_pi<\/code>) represent$/;"	a
node_pi	infra/pugixml/pugixml.h	/^		node_pi,			\/\/ Processing instruction, i.e. '<?name?>'$/;"	e	enum:pugi::xml_node_type
node_to_buffer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^char* node_to_buffer(pugi::xml_node node, char* buffer, size_t size)$/;"	f
node_to_buffer_heap	infra/pugixml/docs/samples/save_custom_writer.cpp	/^char* node_to_buffer_heap(pugi::xml_node node)$/;"	f
node_to_string	infra/pugixml/docs/samples/save_custom_writer.cpp	/^std::string node_to_string(pugi::xml_node node)$/;"	f
node_types	infra/pugixml/docs/samples/traverse_walker.cpp	/^const char* node_types[] =$/;"	v
nodetest	infra/pugixml/pugixml.cpp	/^			const char_t* nodetest;$/;"	m	union:xpath_ast_node::__anon10	file:
nodetest_all	infra/pugixml/pugixml.cpp	/^		nodetest_all,$/;"	e	enum:nodetest_t	file:
nodetest_all_in_namespace	infra/pugixml/pugixml.cpp	/^		nodetest_all_in_namespace$/;"	e	enum:nodetest_t	file:
nodetest_name	infra/pugixml/pugixml.cpp	/^		nodetest_name,$/;"	e	enum:nodetest_t	file:
nodetest_none	infra/pugixml/pugixml.cpp	/^		nodetest_none,$/;"	e	enum:nodetest_t	file:
nodetest_pi	infra/pugixml/pugixml.cpp	/^		nodetest_pi,$/;"	e	enum:nodetest_t	file:
nodetest_t	infra/pugixml/pugixml.cpp	/^	enum nodetest_t$/;"	g	file:
nodetest_type_comment	infra/pugixml/pugixml.cpp	/^		nodetest_type_comment,$/;"	e	enum:nodetest_t	file:
nodetest_type_node	infra/pugixml/pugixml.cpp	/^		nodetest_type_node,$/;"	e	enum:nodetest_t	file:
nodetest_type_pi	infra/pugixml/pugixml.cpp	/^		nodetest_type_pi,$/;"	e	enum:nodetest_t	file:
nodetest_type_text	infra/pugixml/pugixml.cpp	/^		nodetest_type_text,$/;"	e	enum:nodetest_t	file:
normalize_space	infra/pugixml/pugixml.cpp	/^	PUGI__FN void normalize_space(char_t* buffer)$/;"	f
not_equal_to	infra/pugixml/pugixml.cpp	/^	struct not_equal_to$/;"	s	file:
number	infra/pugixml/pugixml.cpp	/^			double number;$/;"	m	union:xpath_ast_node::__anon10	file:
numeric	base/BaseCommon.cpp	/^uint64_t ID::numeric() const $/;"	f	class:ID
off	infra/judy/Judy.h	/^    unsigned int off;         \/\/ offset within key$/;"	m	struct:__anon4
offset	infra/pugixml/pugixml.h	/^		ptrdiff_t offset;$/;"	m	struct:pugi::xml_parse_result
offset	infra/pugixml/pugixml.h	/^		ptrdiff_t offset;$/;"	m	struct:pugi::xpath_parse_result
offset_debug	infra/pugixml/pugixml.cpp	/^	PUGI__FN ptrdiff_t xml_node::offset_debug() const$/;"	f	class:pugi::xml_node
ogzstream	infra/gzstream/gzstream.h	/^    ogzstream( const char* name, int mode = std::ios::out)$/;"	f	class:infra::ogzstream
ogzstream	infra/gzstream/gzstream.h	/^    ogzstream() : std::ostream( &buf) {}$/;"	f	class:infra::ogzstream
ogzstream	infra/gzstream/gzstream.h	/^class ogzstream : public gzstreambase, public std::ostream {$/;"	c	namespace:infra
onBook	base/API.cpp	/^void LineAPI::onBook(const Book *book)$/;"	f	class:LineAPI
onCustom	base/API.cpp	/^void LineAPI::onCustom(const Custom *custom)$/;"	f	class:LineAPI
onFeedStarted	base/API.cpp	/^void FeedAPI::onFeedStarted(const FeedHandler *feedHandler)$/;"	f	class:FeedAPI
onFeedStopped	base/API.cpp	/^void FeedAPI::onFeedStopped(const FeedHandler *feedHandler)$/;"	f	class:FeedAPI
onLineGroupStarted	base/API.cpp	/^void LineGroupAPI::onLineGroupStarted(const LineGroup *lineGroup)$/;"	f	class:LineGroupAPI
onLineGroupStopped	base/API.cpp	/^void LineGroupAPI::onLineGroupStopped(const LineGroup *lineGroup)$/;"	f	class:LineGroupAPI
onLineStarted	base/API.cpp	/^void LineAPI::onLineStarted(const Line *pLine)$/;"	f	class:LineAPI
onLineStopped	base/API.cpp	/^void LineAPI::onLineStopped(const Line *pLine)$/;"	f	class:LineAPI
onOrder	base/API.cpp	/^void LineAPI::onOrder(const Order *order)$/;"	f	class:LineAPI
onPacketEnd	base/API.cpp	/^void LineAPI::onPacketEnd(const Line *pLine)$/;"	f	class:LineAPI
onPacketStart	base/API.cpp	/^void LineAPI::onPacketStart(const Line *pLine)$/;"	f	class:LineAPI
onProductInfo	base/API.cpp	/^void LineAPI::onProductInfo(const ProductInfo *product)$/;"	f	class:LineAPI
onQuote	base/API.cpp	/^void LineAPI::onQuote(const Quote *quote)$/;"	f	class:LineAPI
onStatus	base/API.cpp	/^void LineAPI::onStatus(const Status *status)$/;"	f	class:LineAPI
onTrade	base/API.cpp	/^void LineAPI::onTrade(const Trade *trade, const Order *order)$/;"	f	class:LineAPI
open	infra/gzstream/gzstream.cpp	/^gzstreambuf* gzstreambuf::open( const char* name, int open_mode) {$/;"	f	class:infra::gzstreambuf
open	infra/gzstream/gzstream.cpp	/^void gzstreambase::open( const char* name, int open_mode) {$/;"	f	class:infra::gzstreambase
open	infra/gzstream/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::in) {$/;"	f	class:infra::igzstream
open	infra/gzstream/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::out) {$/;"	f	class:infra::ogzstream
open_file_wide	infra/pugixml/pugixml.cpp	/^	PUGI__FN FILE* open_file_wide(const wchar_t* path, const wchar_t* mode)$/;"	f
opened	infra/gzstream/gzstream.h	/^    char             opened;             \/\/ open\/close state of stream$/;"	m	class:infra::gzstreambuf
operator !	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator!() const$/;"	f	class:pugi::xml_attribute
operator !	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator!() const$/;"	f	class:pugi::xml_node
operator !	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::operator!() const$/;"	f	class:pugi::xml_text
operator !	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator!() const$/;"	f	class:pugi::xpath_node
operator !	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_query::operator!() const$/;"	f	class:pugi::xpath_query
operator !=	base/Book.h	/^	bool operator!= (const BookAlloc<T1>&,$/;"	f	namespace:base
operator !=	base/Line.cpp	/^bool IP::operator != (const IP &rhs) const$/;"	f	class:IP
operator !=	infra/pugixml/pugixml.cpp	/^		bool operator!=(const xpath_string& o) const$/;"	f	class:xpath_string
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator!=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute_iterator::operator!=(const xml_attribute_iterator& rhs) const$/;"	f	class:pugi::xml_attribute_iterator
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_named_node_iterator::operator!=(const xml_named_node_iterator& rhs) const$/;"	f	class:pugi::xml_named_node_iterator
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator!=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node_iterator::operator!=(const xml_node_iterator& rhs) const$/;"	f	class:pugi::xml_node_iterator
operator !=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator!=(const xpath_node& n) const$/;"	f	class:pugi::xpath_node
operator &&	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_attribute& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator&&(const xml_text& lhs, bool rhs)$/;"	f	namespace:pugi
operator &&	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator&&(const xpath_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator ()	infra/pugixml/docs/samples/traverse_predicate.cpp	/^    bool operator()(pugi::xml_attribute attr) const$/;"	f	struct:allow_remote_predicate
operator ()	infra/pugixml/docs/samples/traverse_predicate.cpp	/^    bool operator()(pugi::xml_node node) const$/;"	f	struct:allow_remote_predicate
operator ()	infra/pugixml/pugixml.cpp	/^		bool operator()(const xml_attribute& a) const$/;"	f	struct:namespace_uri_predicate
operator ()	infra/pugixml/pugixml.cpp	/^		bool operator()(const xpath_node& lhs, const xpath_node& rhs) const$/;"	f	struct:document_order_comparator
operator ()	infra/pugixml/pugixml.cpp	/^		bool operator()(const xpath_node& lhs, const xpath_node& rhs) const$/;"	f	struct:duplicate_comparator
operator ()	infra/pugixml/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:equal_to
operator ()	infra/pugixml/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:less
operator ()	infra/pugixml/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:less_equal
operator ()	infra/pugixml/pugixml.cpp	/^		template <typename T> bool operator()(const T& lhs, const T& rhs) const$/;"	f	struct:not_equal_to
operator *	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute_iterator::operator*() const$/;"	f	class:pugi::xml_attribute_iterator
operator *	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node& xml_named_node_iterator::operator*() const$/;"	f	class:pugi::xml_named_node_iterator
operator *	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node& xml_node_iterator::operator*() const$/;"	f	class:pugi::xml_node_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_attribute_iterator& xml_attribute_iterator::operator++()$/;"	f	class:pugi::xml_attribute_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_named_node_iterator& xml_named_node_iterator::operator++()$/;"	f	class:pugi::xml_named_node_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_node_iterator& xml_node_iterator::operator++()$/;"	f	class:pugi::xml_node_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator xml_attribute_iterator::operator++(int)$/;"	f	class:pugi::xml_attribute_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator xml_named_node_iterator::operator++(int)$/;"	f	class:pugi::xml_named_node_iterator
operator ++	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_iterator xml_node_iterator::operator++(int)$/;"	f	class:pugi::xml_node_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_attribute_iterator& xml_attribute_iterator::operator--()$/;"	f	class:pugi::xml_attribute_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_named_node_iterator& xml_named_node_iterator::operator--()$/;"	f	class:pugi::xml_named_node_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xml_node_iterator& xml_node_iterator::operator--()$/;"	f	class:pugi::xml_node_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator xml_attribute_iterator::operator--(int)$/;"	f	class:pugi::xml_attribute_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator xml_named_node_iterator::operator--(int)$/;"	f	class:pugi::xml_named_node_iterator
operator --	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_iterator xml_node_iterator::operator--(int)$/;"	f	class:pugi::xml_node_iterator
operator ->	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute* xml_attribute_iterator::operator->() const$/;"	f	class:pugi::xml_attribute_iterator
operator ->	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node* xml_named_node_iterator::operator->() const$/;"	f	class:pugi::xml_named_node_iterator
operator ->	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node* xml_node_iterator::operator->() const$/;"	f	class:pugi::xml_node_iterator
operator <	base/Line.cpp	/^bool IP::operator < (const IP &rhs) const$/;"	f	class:IP
operator <	base/Line.h	/^		bool operator < (const SeqRange &rhs) const$/;"	f	class:base::SeqRange
operator <	infra/logger/Logger.cpp	/^inline bool operator < (const timespec &lhs, const timespec &rhs)$/;"	f
operator <	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator<(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator <	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator<(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator <=	infra/logger/Logger.cpp	/^inline bool operator <= (const timespec &lhs, const timespec &rhs)$/;"	f
operator <=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator<=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator <=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator<=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(bool rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(double rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(int rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(long long rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(unsigned int rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute& xml_attribute::operator=(unsigned long long rhs)$/;"	f	class:pugi::xml_attribute
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(bool rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(const char_t* rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(double rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(int rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(long long rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(unsigned int rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text& xml_text::operator=(unsigned long long rhs)$/;"	f	class:pugi::xml_text
operator =	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set& xpath_node_set::operator=(const xpath_node_set& ns)$/;"	f	class:pugi::xpath_node_set
operator ==	base/Book.h	/^	bool operator== (const BookAlloc<T1>&,$/;"	f	namespace:base
operator ==	base/Line.cpp	/^bool IP::operator == (const IP &rhs) const$/;"	f	class:IP
operator ==	infra/pugixml/pugixml.cpp	/^		bool operator==(const char_t* other) const$/;"	f	struct:xpath_lexer_string
operator ==	infra/pugixml/pugixml.cpp	/^		bool operator==(const xpath_string& o) const$/;"	f	class:xpath_string
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator==(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute_iterator::operator==(const xml_attribute_iterator& rhs) const$/;"	f	class:pugi::xml_attribute_iterator
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_named_node_iterator::operator==(const xml_named_node_iterator& rhs) const$/;"	f	class:pugi::xml_named_node_iterator
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator==(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node_iterator::operator==(const xml_node_iterator& rhs) const$/;"	f	class:pugi::xml_node_iterator
operator ==	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_node::operator==(const xpath_node& n) const$/;"	f	class:pugi::xpath_node
operator >	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator>(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator >	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator>(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator >=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::operator>=(const xml_attribute& r) const$/;"	f	class:pugi::xml_attribute
operator >=	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::operator>=(const xml_node& r) const$/;"	f	class:pugi::xml_node
operator []	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xpath_node& xpath_node_set::operator[](size_t index) const$/;"	f	class:pugi::xpath_node_set
operator bool	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result::operator bool() const$/;"	f	class:pugi::xml_parse_result
operator bool	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_parse_result::operator bool() const$/;"	f	class:pugi::xpath_parse_result
operator xml_attribute::unspecified_bool_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute::operator xml_attribute::unspecified_bool_type() const$/;"	f	class:pugi::xml_attribute
operator xml_node::unspecified_bool_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::operator xml_node::unspecified_bool_type() const$/;"	f	class:pugi::xml_node
operator xml_text::unspecified_bool_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text::operator xml_text::unspecified_bool_type() const$/;"	f	class:pugi::xml_text
operator xpath_node::unspecified_bool_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node::operator xpath_node::unspecified_bool_type() const$/;"	f	class:pugi::xpath_node
operator xpath_query::unspecified_bool_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_query::operator xpath_query::unspecified_bool_type() const$/;"	f	class:pugi::xpath_query
operator ||	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_attribute& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_node& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator||(const xml_text& lhs, bool rhs)$/;"	f	namespace:pugi
operator ||	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool operator||(const xpath_node& lhs, bool rhs)$/;"	f	namespace:pugi
opt_false	infra/pugixml/pugixml.cpp	/^	struct opt_false$/;"	s	file:
opt_true	infra/pugixml/pugixml.cpp	/^	struct opt_true$/;"	s	file:
other	base/Book.h	/^					typedef BookAlloc<U> other;$/;"	t	struct:base::BookAlloc::rebind
overflow	infra/gzstream/gzstream.cpp	/^int gzstreambuf::overflow( int c) { \/\/ used for output buffer only$/;"	f	class:infra::gzstreambuf
pPacketQueue	base/Line.cpp	/^BoostSPSCQueue<Packet> *PacketAddress::pPacketQueue() const$/;"	f	class:PacketAddress
packetData	base/Packet.h	/^			char *packetData()$/;"	f	class:base::Packet
packetDataLen	base/Packet.h	/^			uint32_t packetDataLen()$/;"	f	class:base::Packet
packetQueue	base/LineGroup.h	/^			BoostSPSCQueue<Packet> *packetQueue() const$/;"	f	class:base::LineGroup
page_offset	infra/pugixml/pugixml.cpp	/^		uint16_t page_offset; \/\/ offset from page->data$/;"	m	struct:xml_memory_string_header	file:
pair	infra/judy/JudyL2Array.h	/^        typedef judyl2KVpair< JudyKey, vector * > pair;$/;"	t	class:judyL2Array
pair	infra/judy/JudyLArray.h	/^        typedef judylKVpair< JudyKey, JudyValue > pair;$/;"	t	class:judyLArray
pair	infra/judy/JudyS2Array.h	/^        typedef judys2KVpair< vector * > pair;$/;"	t	class:judyS2Array
pair	infra/judy/JudySArray.h	/^        typedef judysKVpair< JudyValue > pair;$/;"	t	class:judySArray
parent	infra/pugixml/pugixml.cpp	/^		xml_node_struct*		parent;					\/\/\/< Pointer to parent$/;"	m	struct:pugi::xml_node_struct	file:
parent	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::parent() const$/;"	f	class:pugi::xml_node
parent	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xpath_node::parent() const$/;"	f	class:pugi::xpath_node
parse	base/ReferenceFileReader.h	/^        parse(ReferenceFileRowField *rowFields, unsigned int noOfFields, char delimeter, ProductInfos)$/;"	f	class:ReferenceFileReader
parse	infra/pugixml/pugixml.cpp	/^			static binary_op_t parse(xpath_lexer& lexer)$/;"	f	struct:xpath_parser::binary_op_t
parse	infra/pugixml/pugixml.cpp	/^		static char_t* parse(char_t* s)$/;"	f	struct:strconv_pcdata_impl
parse	infra/pugixml/pugixml.cpp	/^		static xml_parse_result parse(char_t* buffer, size_t length, xml_document_struct* xmldoc, xml_node_struct* root, unsigned int optmsk)$/;"	f	struct:xml_parser
parse	infra/pugixml/pugixml.cpp	/^		static xpath_ast_node* parse(const char_t* query, xpath_variable_set* variables, xpath_allocator* alloc, xpath_parse_result* result)$/;"	f	struct:xpath_parser
parse	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse()$/;"	f	struct:xpath_parser
parseFuncMap	base/Line.h	/^			MessageFunc parseFuncMap[256];\/\/ = {{nullptr, false, 0}};$/;"	m	class:base::Line
parse_axis_name	infra/pugixml/pugixml.cpp	/^		axis_t parse_axis_name(const xpath_lexer_string& name, bool& specified)$/;"	f	struct:xpath_parser
parse_cdata	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_cdata"><\/a><code class="literal">parse_cdata<\/code> determines if CDATA sections$/;"	a
parse_cdata	infra/pugixml/pugixml.h	/^	const unsigned int parse_cdata = 0x0004;$/;"	m	namespace:pugi
parse_comments	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_comments"><\/a><code class="literal">parse_comments<\/code> determines if comments$/;"	a
parse_comments	infra/pugixml/pugixml.h	/^	const unsigned int parse_comments = 0x0002;$/;"	m	namespace:pugi
parse_declaration	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_declaration"><\/a><code class="literal">parse_declaration<\/code> determines if XML$/;"	a
parse_declaration	infra/pugixml/pugixml.h	/^	const unsigned int parse_declaration = 0x0100;$/;"	m	namespace:pugi
parse_default	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_default"><\/a><code class="literal">parse_default<\/code> is the default set of flags,$/;"	a
parse_default	infra/pugixml/pugixml.h	/^	const unsigned int parse_default = parse_cdata | parse_escapes | parse_wconv_attribute | parse_eol;$/;"	m	namespace:pugi
parse_doctype	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_doctype"><\/a><code class="literal">parse_doctype<\/code> determines if XML document$/;"	a
parse_doctype	infra/pugixml/pugixml.h	/^	const unsigned int parse_doctype = 0x0200;$/;"	m	namespace:pugi
parse_doctype_group	infra/pugixml/pugixml.cpp	/^		char_t* parse_doctype_group(char_t* s, char_t endch, bool toplevel)$/;"	f	struct:xml_parser
parse_doctype_ignore	infra/pugixml/pugixml.cpp	/^		char_t* parse_doctype_ignore(char_t* s)$/;"	f	struct:xml_parser
parse_doctype_primitive	infra/pugixml/pugixml.cpp	/^		char_t* parse_doctype_primitive(char_t* s)$/;"	f	struct:xml_parser
parse_eol	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_eol"><\/a><code class="literal">parse_eol<\/code> determines if EOL handling (that$/;"	a
parse_eol	infra/pugixml/pugixml.cpp	/^		static char_t* parse_eol(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_eol	infra/pugixml/pugixml.h	/^	const unsigned int parse_eol = 0x0020;$/;"	m	namespace:pugi
parse_escapes	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_escapes"><\/a><code class="literal">parse_escapes<\/code> determines if character$/;"	a
parse_escapes	infra/pugixml/pugixml.h	/^	const unsigned int parse_escapes = 0x0010;$/;"	m	namespace:pugi
parse_exclamation	infra/pugixml/pugixml.cpp	/^		char_t* parse_exclamation(char_t* s, xml_node_struct* cursor, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse_expression	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_expression()$/;"	f	struct:xpath_parser
parse_expression_rec	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_expression_rec(xpath_ast_node* lhs, int limit)$/;"	f	struct:xpath_parser
parse_filter_expression	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_filter_expression()$/;"	f	struct:xpath_parser
parse_fragment	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_fragment"><\/a><code class="literal">parse_fragment<\/code> determines if document$/;"	a
parse_fragment	infra/pugixml/pugixml.h	/^	const unsigned int parse_fragment = 0x1000;$/;"	m	namespace:pugi
parse_full	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_full"><\/a><code class="literal">parse_full<\/code> is the set of flags which adds$/;"	a
parse_full	infra/pugixml/pugixml.h	/^	const unsigned int parse_full = parse_default | parse_pi | parse_comments | parse_declaration | parse_doctype;$/;"	m	namespace:pugi
parse_function	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_function(const xpath_lexer_string& name, size_t argc, xpath_ast_node* args[2])$/;"	f	struct:xpath_parser
parse_function_helper	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_function_helper(ast_type_t type0, ast_type_t type1, size_t argc, xpath_ast_node* args[2])$/;"	f	struct:xpath_parser
parse_location_path	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_location_path()$/;"	f	struct:xpath_parser
parse_minimal	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_minimal"><\/a><code class="literal">parse_minimal<\/code> has all options turned$/;"	a
parse_minimal	infra/pugixml/pugixml.h	/^	const unsigned int parse_minimal = 0x0000;$/;"	m	namespace:pugi
parse_node_test_type	infra/pugixml/pugixml.cpp	/^		nodetest_t parse_node_test_type(const xpath_lexer_string& name)$/;"	f	struct:xpath_parser
parse_path_or_unary_expression	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_path_or_unary_expression()$/;"	f	struct:xpath_parser
parse_pi	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_pi"><\/a><code class="literal">parse_pi<\/code> determines if processing instructions$/;"	a
parse_pi	infra/pugixml/pugixml.h	/^	const unsigned int parse_pi = 0x0001;$/;"	m	namespace:pugi
parse_primary_expression	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_primary_expression()$/;"	f	struct:xpath_parser
parse_question	infra/pugixml/pugixml.cpp	/^		char_t* parse_question(char_t* s, xml_node_struct*& ref_cursor, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse_relative_location_path	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_relative_location_path(xpath_ast_node* set)$/;"	f	struct:xpath_parser
parse_simple	infra/pugixml/pugixml.cpp	/^		static char_t* parse_simple(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_skip_bom	infra/pugixml/pugixml.cpp	/^		static char_t* parse_skip_bom(char_t* s)$/;"	f	struct:xml_parser
parse_step	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* parse_step(xpath_ast_node* set)$/;"	f	struct:xpath_parser
parse_tree	infra/pugixml/pugixml.cpp	/^		char_t* parse_tree(char_t* s, xml_node_struct* root, unsigned int optmsk, char_t endch)$/;"	f	struct:xml_parser
parse_trim_pcdata	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_trim_pcdata"><\/a><code class="literal">parse_trim_pcdata<\/code> determines if leading$/;"	a
parse_trim_pcdata	infra/pugixml/pugixml.h	/^	const unsigned int parse_trim_pcdata = 0x0800;$/;"	m	namespace:pugi
parse_wconv	infra/pugixml/pugixml.cpp	/^		static char_t* parse_wconv(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_wconv_attribute	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_wconv_attribute"><\/a><code class="literal">parse_wconv_attribute<\/code> determines$/;"	a
parse_wconv_attribute	infra/pugixml/pugixml.h	/^	const unsigned int parse_wconv_attribute = 0x0040;$/;"	m	namespace:pugi
parse_wnorm	infra/pugixml/pugixml.cpp	/^		static char_t* parse_wnorm(char_t* s, char_t end_quote)$/;"	f	struct:strconv_attribute_impl
parse_wnorm_attribute	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_wnorm_attribute"><\/a><code class="literal">parse_wnorm_attribute<\/code> determines$/;"	a
parse_wnorm_attribute	infra/pugixml/pugixml.h	/^	const unsigned int parse_wnorm_attribute = 0x0080;$/;"	m	namespace:pugi
parse_ws_pcdata	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_ws_pcdata"><\/a><code class="literal">parse_ws_pcdata<\/code> determines if PCDATA$/;"	a
parse_ws_pcdata	infra/pugixml/pugixml.h	/^	const unsigned int parse_ws_pcdata = 0x0008;$/;"	m	namespace:pugi
parse_ws_pcdata_single	infra/pugixml/docs/manual/loading.html	/^            <a name="parse_ws_pcdata_single"><\/a><code class="literal">parse_ws_pcdata_single<\/code> determines$/;"	a
parse_ws_pcdata_single	infra/pugixml/pugixml.h	/^	const unsigned int parse_ws_pcdata_single = 0x0400;$/;"	m	namespace:pugi
partition	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred> void partition(I begin, I middle, I end, const Pred& pred, I* out_eqbeg, I* out_eqend)$/;"	f
path	infra/pugixml/pugixml.cpp	/^	PUGI__FN string_t xml_node::path(char_t delimiter) const$/;"	f	class:pugi::xml_node
playbackMode	base/BaseCommon.cpp	/^PlaybackMode playbackMode(const std::string &strMode)$/;"	f
playbackModeToStr	base/BaseCommon.cpp	/^const char* playbackModeToStr(const PlaybackMode mode)$/;"	f
pointer	base/Book.h	/^			typedef T*       pointer;$/;"	t	class:base::BookAlloc
pointer	infra/pugixml/pugixml.h	/^		typedef xml_attribute* pointer;$/;"	t	class:pugi::xml_attribute_iterator
pointer	infra/pugixml/pugixml.h	/^		typedef xml_node* pointer;$/;"	t	class:pugi::xml_named_node_iterator
pointer	infra/pugixml/pugixml.h	/^		typedef xml_node* pointer;$/;"	t	class:pugi::xml_node_iterator
pop	infra/containers/spsc/BoostSPSCQueue.h	/^		T* pop()$/;"	f	class:infra::BoostSPSCQueue
pop	infra/containers/spsc/BoostSPSCQueue.h	/^		bool pop(T & value)$/;"	f	class:infra::BoostSPSCQueue
pop	infra/containers/spsc/BoostSPSCQueue_with.h	/^		bool pop(T & value)$/;"	f	class:infra::BoostSPSCQueue
popDeleter	infra/containers/spsc/BoostSPSCQueue.h	/^		void popDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
popDeleter	infra/containers/spsc/BoostSPSCQueue_with.h	/^		void popDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
popDeleter	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		void popDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
popPtr	infra/containers/spsc/BoostSPSCQueue.h	/^		std::shared_ptr<T> popPtr()$/;"	f	class:infra::BoostSPSCQueue
popPtr	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::shared_ptr<T> popPtr()$/;"	f	class:infra::BoostSPSCQueue
popPtr	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		std::shared_ptr<T> popPtr()$/;"	f	class:infra::BoostSPSCQueue
popPtrSpin	infra/containers/spsc/BoostSPSCQueue.h	/^		std::shared_ptr<T> popPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
popPtrSpin	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::shared_ptr<T> popPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
popPtrSpin	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		std::shared_ptr<T> popPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
popSpin	infra/containers/spsc/BoostSPSCQueue.h	/^		std::shared_ptr<T> popSpin()$/;"	f	class:infra::BoostSPSCQueue
position	infra/pugixml/pugixml.cpp	/^		size_t position, size;$/;"	m	struct:xpath_context	file:
precedence	infra/pugixml/pugixml.cpp	/^			int precedence;$/;"	m	struct:xpath_parser::binary_op_t	file:
prefix	infra/pugixml/pugixml.cpp	/^		const char_t* prefix;$/;"	m	struct:namespace_uri_predicate	file:
prefix_length	infra/pugixml/pugixml.cpp	/^		size_t prefix_length;$/;"	m	struct:namespace_uri_predicate	file:
prepend_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::prepend_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
prepend_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_child(const char_t* name_)$/;"	f	class:pugi::xml_node
prepend_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_child(xml_node_type type_)$/;"	f	class:pugi::xml_node
prepend_copy	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_node::prepend_copy(const xml_attribute& proto)$/;"	f	class:pugi::xml_node
prepend_copy	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::prepend_copy(const xml_node& proto)$/;"	f	class:pugi::xml_node
preprocess	infra/pugixml/docs/samples/include.cpp	/^bool preprocess(pugi::xml_node node)$/;"	f
prev	infra/pugixml/pugixml.cpp	/^		xml_memory_page* prev;$/;"	m	struct:xml_memory_page	file:
prev_attribute_c	infra/pugixml/pugixml.cpp	/^		xml_attribute_struct* prev_attribute_c;	\/\/\/< Previous attribute (cyclic list)$/;"	m	struct:pugi::xml_attribute_struct	file:
prev_sibling_c	infra/pugixml/pugixml.cpp	/^		xml_node_struct*		prev_sibling_c;			\/\/\/< Left brother (cyclic list)$/;"	m	struct:pugi::xml_node_struct	file:
previous	infra/judy/JudyL2Array.h	/^        const cpair & previous() {$/;"	f	class:judyL2Array
previous	infra/judy/JudyLArray.h	/^        const pair & previous() {$/;"	f	class:judyLArray
previous	infra/judy/JudyS2Array.h	/^        const cpair & previous() {$/;"	f	class:judyS2Array
previous	infra/judy/JudySArray.h	/^        const pair & previous() {$/;"	f	class:judySArray
previous_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute xml_attribute::previous_attribute() const$/;"	f	class:pugi::xml_attribute
previous_sibling	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::previous_sibling() const$/;"	f	class:pugi::xml_node
previous_sibling	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::previous_sibling(const char_t* name_) const$/;"	f	class:pugi::xml_node
print	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_node::print(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const$/;"	f	class:pugi::xml_node
print	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_node::print(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags, unsigned int depth) const$/;"	f	class:pugi::xml_node
print	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_node::print(xml_writer& writer, const char_t* indent, unsigned int flags, xml_encoding encoding, unsigned int depth) const$/;"	f	class:pugi::xml_node
printInFile	infra/logger/Logger.cpp	/^void Logger::printInFile(LogLevel LEVEL, const char *FILENAME, uint32_t LINE, const char *func, const char *FORMAT, ...)$/;"	f	class:Logger
printLatency	base/LineGroup.cpp	/^void LineGroup::printLatency(const Thread *_thread, const char *latencyType, const uint64_t *arr) const$/;"	f	class:LineGroup
printStats	base/FeedHandler.cpp	/^void FeedHandler::printStats(const Thread *_thread) const$/;"	f	class:FeedHandler
printStats	base/Line.cpp	/^void Line::printStats(const Thread *_thread) const$/;"	f	class:Line
printStats	base/LineGroup.cpp	/^void LineGroup::printStats(const Thread *_thread) const$/;"	f	class:LineGroup
printStats	base/MarketDataApplication.cpp	/^void MarketDataApplication::printStats()$/;"	f	class:MarketDataApplication
print_doc	infra/pugixml/docs/samples/load_stream.cpp	/^void print_doc(const char* message, const pugi::xml_document& doc, const pugi::xml_parse_result& result)$/;"	f
print_stacktrace	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^static inline void print_stacktrace(FILE *out = stderr, unsigned int max_frames =15)$/;"	f	namespace:infra
process	base/Line.cpp	/^int32_t Line::process() $/;"	f	class:Line
processFunc	base/Line.cpp	/^	, _processPacket(processFunc)$/;"	v
processGapCache	base/Line.cpp	/^void Line::processGapCache()$/;"	f	class:Line
processMainLinePacket	base/Line.cpp	/^int32_t Line::processMainLinePacket()$/;"	f	class:Line
processPacket	base/Line.cpp	/^void Line::processPacket()$/;"	f	class:Line
processSnapCache	base/Line.cpp	/^void Line::processSnapCache()$/;"	f	class:Line
processSnapshotPacket	base/Line.cpp	/^int32_t Line::processSnapshotPacket()$/;"	f	class:Line
pugi	infra/InfraCommon.h	/^namespace pugi $/;"	n
pugi	infra/pugixml/contrib/foreach.hpp	/^namespace pugi$/;"	n
pugi	infra/pugixml/pugixml.cpp	/^namespace pugi$/;"	n	file:
pugi	infra/pugixml/pugixml.h	/^namespace pugi$/;"	n
push	infra/containers/spsc/BoostSPSCQueue.h	/^		T* push()$/;"	f	class:infra::BoostSPSCQueue
push	infra/containers/spsc/BoostSPSCQueue.h	/^		bool push(const T & value)$/;"	f	class:infra::BoostSPSCQueue
push	infra/containers/spsc/BoostSPSCQueue_with.h	/^		bool push(const T & value)$/;"	f	class:infra::BoostSPSCQueue
push	infra/pugixml/pugixml.cpp	/^		void push(char_t*& s, size_t count)$/;"	f	struct:gap
pushDeleter	infra/containers/spsc/BoostSPSCQueue.h	/^		void pushDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
pushDeleter	infra/containers/spsc/BoostSPSCQueue_with.h	/^		void pushDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
pushDeleter	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		void pushDeleter()$/;"	f	class:infra::BoostSPSCQueueElement
pushPtr	infra/containers/spsc/BoostSPSCQueue.h	/^		std::shared_ptr<T> pushPtr()$/;"	f	class:infra::BoostSPSCQueue
pushPtr	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::shared_ptr<T> pushPtr()$/;"	f	class:infra::BoostSPSCQueue
pushPtr	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		std::shared_ptr<T> pushPtr()$/;"	f	class:infra::BoostSPSCQueue
pushPtrSpin	infra/containers/spsc/BoostSPSCQueue.h	/^		std::shared_ptr<T> pushPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
pushPtrSpin	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::shared_ptr<T> pushPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
pushPtrSpin	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		std::shared_ptr<T> pushPtrSpin()$/;"	f	class:infra::BoostSPSCQueue
pushSpin	infra/containers/spsc/BoostSPSCQueue.h	/^		T* pushSpin()$/;"	f	class:infra::BoostSPSCQueue
push_back	infra/pugixml/pugixml.cpp	/^		void push_back(const xpath_node& node, xpath_allocator* alloc)$/;"	f	class:xpath_node_set_raw
qualified_name	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* qualified_name(const xpath_node& node)$/;"	f
quickstart.main	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main"><\/a><a class="link" href="quickstart.html#quickstart.main" title="pugixml 1.4 quick start guide">pugixml 1.4 quick start guide<\/a>$/;"	a
quickstart.main.access	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.access"><\/a><a class="link" href="quickstart.html#quickstart.main.access" title="Accessing document data">Accessing document data<\/a>$/;"	a
quickstart.main.dom	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.dom"><\/a><a class="link" href="quickstart.html#quickstart.main.dom" title="Document object model">Document object model<\/a>$/;"	a
quickstart.main.feedback	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.feedback"><\/a><a class="link" href="quickstart.html#quickstart.main.feedback" title="Feedback">Feedback<\/a>$/;"	a
quickstart.main.install	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.install"><\/a><a class="link" href="quickstart.html#quickstart.main.install" title="Installation">Installation<\/a>$/;"	a
quickstart.main.introduction	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.introduction"><\/a><a class="link" href="quickstart.html#quickstart.main.introduction" title="Introduction">Introduction<\/a>$/;"	a
quickstart.main.license	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.license"><\/a><a class="link" href="quickstart.html#quickstart.main.license" title="License">License<\/a>$/;"	a
quickstart.main.loading	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.loading"><\/a><a class="link" href="quickstart.html#quickstart.main.loading" title="Loading document">Loading document<\/a>$/;"	a
quickstart.main.modify	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.modify"><\/a><a class="link" href="quickstart.html#quickstart.main.modify" title="Modifying document data">Modifying document data<\/a>$/;"	a
quickstart.main.saving	infra/pugixml/docs/quickstart.html	/^<a name="quickstart.main.saving"><\/a><a class="link" href="quickstart.html#quickstart.main.saving" title="Saving document">Saving document<\/a>$/;"	a
range_const_iterator	infra/pugixml/contrib/foreach.hpp	/^	template<> struct range_const_iterator<pugi::xml_document>$/;"	s	namespace:boost
range_const_iterator	infra/pugixml/contrib/foreach.hpp	/^	template<> struct range_const_iterator<pugi::xml_node>$/;"	s	namespace:boost
range_mutable_iterator	infra/pugixml/contrib/foreach.hpp	/^	template<> struct range_mutable_iterator<pugi::xml_document>$/;"	s	namespace:boost
range_mutable_iterator	infra/pugixml/contrib/foreach.hpp	/^	template<> struct range_mutable_iterator<pugi::xml_node>$/;"	s	namespace:boost
rdbuf	infra/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return &buf; }$/;"	f	class:infra::gzstreambase
rdbuf	infra/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:infra::igzstream
rdbuf	infra/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:infra::ogzstream
reRequestMissedPacket	base/Line.cpp	/^void Line::reRequestMissedPacket()$/;"	f	class:Line
reRequestSnap	base/Line.cpp	/^void Line::reRequestSnap()$/;"	f	class:Line
readPacket	base/NetworkReader.cpp	/^int32_t NetworkReader::readPacket(Recording *recording)$/;"	f	class:NetworkReader
readSocket	infra/socket/Socket.cpp	/^int32_t Socket::readSocket(char *buffer, uint32_t size)$/;"	f	class:Socket
reallocate	infra/pugixml/pugixml.cpp	/^		void* reallocate(void* ptr, size_t old_size, size_t new_size)$/;"	f	class:xpath_allocator
rebind	base/Book.h	/^				struct rebind {$/;"	s	class:base::BookAlloc
recorderLoop	base/Recorder.cpp	/^void* Recorder::recorderLoop()$/;"	f	class:Recorder
recursive_copy_skip	infra/pugixml/pugixml.cpp	/^	PUGI__FN void recursive_copy_skip(xml_node& dest, const xml_node& source, const xml_node& skip)$/;"	f
recycleElement	infra/containers/spsc/SPSCQueue.h	/^			void recycleElement(T *element)$/;"	f	class:infra::SPSCQueue
reference	base/Book.h	/^			typedef T&       reference;$/;"	t	class:base::BookAlloc
reference	infra/pugixml/pugixml.h	/^		typedef xml_attribute& reference;$/;"	t	class:pugi::xml_attribute_iterator
reference	infra/pugixml/pugixml.h	/^		typedef xml_node& reference;$/;"	t	class:pugi::xml_named_node_iterator
reference	infra/pugixml/pugixml.h	/^		typedef xml_node& reference;$/;"	t	class:pugi::xml_node_iterator
refreshTime	base/MarketDataApplication.cpp	/^void MarketDataApplication::refreshTime()$/;"	f	class:MarketDataApplication
registerCallbacks	base/FeedHandler.cpp	/^void FeedHandler::registerCallbacks(CallBacks callbacks)$/;"	f	class:FeedHandler
registerCallbacks	base/FeedHandler.cpp	/^void FeedHandler::registerCallbacks(std::string updateTypes)$/;"	f	class:FeedHandler
registerCallbacks	base/Line.cpp	/^void Line::registerCallbacks(CallBacks callbacks)$/;"	f	class:Line
registerCallbacks	base/LineGroup.cpp	/^void LineGroup::registerCallbacks(CallBacks callbacks)$/;"	f	class:LineGroup
registerFeedConstructors	base/MarketDataApplication.cpp	/^bool MarketDataApplication::registerFeedConstructors(FeedID feedID, FeedHandlerConstructor feedHandlerConstructor)$/;"	f	class:MarketDataApplication
registerLineGroup	base/NetworkReader.cpp	/^void NetworkReader::registerLineGroup(LineGroup *lg)$/;"	f	class:NetworkReader
registerNetworkReader	base/Recorder.cpp	/^BoostSPSCQueue<Packet>* Recorder::registerNetworkReader(const NetworkReader *nr)$/;"	f	class:Recorder
release	infra/pugixml/pugixml.cpp	/^		void release()$/;"	f	class:xpath_allocator
release	infra/pugixml/pugixml.cpp	/^		void* release()$/;"	f	struct:buffer_holder
remove	base/Order.h	/^inline void Order::remove(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:Order
removeEntry	infra/judy/JudyL2Array.h	/^        bool removeEntry( JudyKey key ) {$/;"	f	class:judyL2Array
removeEntry	infra/judy/JudyLArray.h	/^        bool removeEntry( JudyKey * key ) {$/;"	f	class:judyLArray
removeEntry	infra/judy/JudyS2Array.h	/^        bool removeEntry( const char * key ) {$/;"	f	class:judyS2Array
removeEntry	infra/judy/JudySArray.h	/^        bool removeEntry( const char * key ) {$/;"	f	class:judySArray
removeIPFromNetworkReader	base/NetworkReader.cpp	/^void NetworkReader::removeIPFromNetworkReader(const PacketAddress* pPacketAddress)$/;"	f	class:NetworkReader
remove_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_attribute(const char_t* name_)$/;"	f	class:pugi::xml_node
remove_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_attribute(const xml_attribute& a)$/;"	f	class:pugi::xml_node
remove_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_child(const char_t* name_)$/;"	f	class:pugi::xml_node
remove_child	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::remove_child(const xml_node& n)$/;"	f	class:pugi::xml_node
remove_duplicates	infra/pugixml/pugixml.cpp	/^		void remove_duplicates()$/;"	f	class:xpath_node_set_raw
reset	base/Line.cpp	/^void Line::reset()$/;"	f	class:Line
reset	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::reset()$/;"	f	class:pugi::xml_document
reset	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::reset(const xml_document& proto)$/;"	f	class:pugi::xml_document
result	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    size_t result;$/;"	m	struct:xml_memory_writer	file:
result	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    std::string result;$/;"	m	struct:xml_string_writer	file:
result	infra/pugixml/pugixml.cpp	/^		xpath_allocator result;$/;"	m	struct:xpath_stack_data	file:
result	infra/pugixml/pugixml.cpp	/^		xpath_allocator* result;$/;"	m	struct:xpath_stack	file:
result	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xpath_parse_result& xpath_exception::result() const$/;"	f	class:pugi::xpath_exception
result	infra/pugixml/pugixml.cpp	/^	PUGI__FN const xpath_parse_result& xpath_query::result() const$/;"	f	class:pugi::xpath_query
rettype	infra/pugixml/pugixml.cpp	/^			xpath_value_type rettype;$/;"	m	struct:xpath_parser::binary_op_t	file:
rettype	infra/pugixml/pugixml.cpp	/^		xpath_value_type rettype() const$/;"	f	class:xpath_ast_node
return_type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_value_type xpath_query::return_type() const$/;"	f	class:pugi::xpath_query
reuse	infra/judy/Judy.h	/^    void ** reuse[8];         \/\/ reuse judy blocks$/;"	m	struct:__anon5
reverse	infra/pugixml/pugixml.cpp	/^	template <typename I> void reverse(I begin, I end)$/;"	f
revert	infra/pugixml/pugixml.cpp	/^		void revert(const xpath_allocator& state)$/;"	f	class:xpath_allocator
ring_	infra/containers/spsc/BoostSPSCQueue.h	/^		T ring_[Size];$/;"	m	class:infra::BoostSPSCQueue
ring_	infra/containers/spsc/BoostSPSCQueue_with.h	/^		T ring_[Size];$/;"	m	class:infra::BoostSPSCQueue
ring_	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		T ring_[Size];$/;"	m	class:infra::BoostSPSCQueue
root	infra/judy/Judy.h	/^    JudySlot root[1];         \/\/ root of judy array$/;"	m	struct:__anon5
root	infra/pugixml/pugixml.cpp	/^		xpath_ast_node* root;$/;"	m	struct:xpath_query_impl	file:
root	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node xml_node::root() const$/;"	f	class:pugi::xml_node
round_nearest	infra/pugixml/pugixml.cpp	/^	PUGI__FN double round_nearest(double value)$/;"	f
round_nearest_nzero	infra/pugixml/pugixml.cpp	/^	PUGI__FN double round_nearest_nzero(double value)$/;"	f
s	infra/pugixml/docs/quickstart.html	/^        functions (<a href="samples\/load_memory.cpp" target="_top">samples\/load_memory.cpp<\/a>);$/;"	f
s	infra/pugixml/docs/quickstart.html	/^        functions (<a href="samples\/traverse_base.cpp" target="_top">samples\/traverse_base.cpp<\/a>):$/;"	f
save	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::save(std::basic_ostream<char, std::char_traits<char> >& stream, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::save(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream, const char_t* indent, unsigned int flags) const$/;"	f	class:pugi::xml_document
save	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_document::save(xml_writer& writer, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_document::save_file(const char* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_document::save_file(const wchar_t* path_, const char_t* indent, unsigned int flags, xml_encoding encoding) const$/;"	f	class:pugi::xml_document
save_file_impl	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool save_file_impl(const xml_document& doc, FILE* file, const char_t* indent, unsigned int flags, xml_encoding encoding)$/;"	f
scratch	infra/pugixml/pugixml.cpp	/^		} scratch;$/;"	m	class:xml_buffered_writer	typeref:union:xml_buffered_writer::__anon9	file:
seg	infra/judy/Judy.h	/^    JudySeg * seg;            \/\/ current judy allocator$/;"	m	struct:__anon5
seg	infra/judy/Judy.h	/^    void * seg;               \/\/ next used allocator$/;"	m	struct:__anon3
select_nodes	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set xml_node::select_nodes(const char_t* query, xpath_variable_set* variables) const$/;"	f	class:pugi::xml_node
select_nodes	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set xml_node::select_nodes(const xpath_query& query) const$/;"	f	class:pugi::xml_node
select_single_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node xml_node::select_single_node(const char_t* query, xpath_variable_set* variables) const$/;"	f	class:pugi::xml_node
select_single_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node xml_node::select_single_node(const xpath_query& query) const$/;"	f	class:pugi::xml_node
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(bool rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(const char_t* rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(double rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(int rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(long long rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(unsigned int rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_text::set(unsigned long long rhs)$/;"	f	class:pugi::xml_text
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(bool value)$/;"	f	class:pugi::xpath_variable
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(const char_t* value)$/;"	f	class:pugi::xpath_variable
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(const xpath_node_set& value)$/;"	f	class:pugi::xpath_variable
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable::set(double value)$/;"	f	class:pugi::xpath_variable
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, bool value)$/;"	f	class:pugi::xpath_variable_set
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, const char_t* value)$/;"	f	class:pugi::xpath_variable_set
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, const xpath_node_set& value)$/;"	f	class:pugi::xpath_variable_set
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xpath_variable_set::set(const char_t* name, double value)$/;"	f	class:pugi::xpath_variable_set
set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable* get_variable_scratch(char_t (&buffer)[32], xpath_variable_set* set, const char_t* begin, const char_t* end)$/;"	v
setLastValue	infra/judy/JudyL2Array.h	/^        void setLastValue( vector * value ) {$/;"	f	class:judyL2Array
setLastValue	infra/judy/JudyLArray.h	/^        void setLastValue( JudyValue value ) {$/;"	f	class:judyLArray
setLastValue	infra/judy/JudyS2Array.h	/^        void setLastValue( vector * value ) {$/;"	f	class:judyS2Array
setLastValue	infra/judy/JudySArray.h	/^        void setLastValue( JudyValue value ) {$/;"	f	class:judySArray
setLoggerInstance	base/MarketDataApplication.h	/^			void setLoggerInstance(Logger *logger)	\/\/\/< set the logger instance in Logger constructor$/;"	f	class:base::MarketDataApplication
setPacketDataLen	base/Packet.h	/^			void setPacketDataLen(uint32_t packetDataLen)$/;"	f	class:base::Packet
set_memory_management_functions	infra/pugixml/docs/manual/dom.html	/^          <a name="set_memory_management_functions"><\/a><a name="get_memory_allocation_function"><\/a><a name="get_memory_deallocation_function"><\/a>You can use the following accessor$/;"	a
set_memory_management_functions	infra/pugixml/pugixml.cpp	/^	PUGI__FN void PUGIXML_FUNCTION set_memory_management_functions(allocation_function allocate, deallocation_function deallocate)$/;"	f	namespace:pugi
set_name	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_name(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
set_name	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::set_name(const char_t* rhs)$/;"	f	class:pugi::xml_node
set_next	infra/pugixml/pugixml.cpp	/^		void set_next(xpath_ast_node* value)$/;"	f	class:xpath_ast_node
set_right	infra/pugixml/pugixml.cpp	/^		void set_right(xpath_ast_node* value)$/;"	f	class:xpath_ast_node
set_type	infra/pugixml/pugixml.cpp	/^		void set_type(xpath_node_set::type_t value)$/;"	f	class:xpath_node_set_raw
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(bool rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(const char_t* rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(double rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(int rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(long long rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(unsigned int rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_attribute::set_value(unsigned long long rhs)$/;"	f	class:pugi::xml_attribute
set_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::set_value(const char_t* rhs)$/;"	f	class:pugi::xml_node
set_value_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_buffer(char_t*& dest, uintptr_t& header, uintptr_t header_mask, char (&buf)[128])$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, bool value)$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, double value)$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, int value)$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, long long value)$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, unsigned int value)$/;"	f
set_value_convert	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool set_value_convert(char_t*& dest, uintptr_t& header, uintptr_t header_mask, unsigned long long value)$/;"	f
signalToStop	infra/thread/Thread.cpp	/^void Thread::signalToStop()$/;"	f	class:Thread
simple_walker	infra/pugixml/docs/samples/traverse_walker.cpp	/^struct simple_walker: pugi::xml_tree_walker$/;"	s	file:
size	infra/pugixml/pugixml.cpp	/^		size_t position, size;$/;"	m	struct:xpath_context	file:
size	infra/pugixml/pugixml.cpp	/^		size_t size() const$/;"	f	class:xpath_node_set_raw
size	infra/pugixml/pugixml.cpp	/^		size_t size;$/;"	m	struct:gap	file:
size	infra/pugixml/pugixml.cpp	/^		size_t size;$/;"	m	struct:xml_stream_chunk	file:
size	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t xpath_node_set::size() const$/;"	f	class:pugi::xpath_node_set
size_type	base/Book.h	/^			typedef std::size_t    size_type;$/;"	t	class:base::BookAlloc
slot	infra/judy/Judy.h	/^    int slot;                 \/\/ slot within object$/;"	m	struct:__anon4
small_timeout	infra/pugixml/docs/samples/traverse_predicate.cpp	/^bool small_timeout(pugi::xml_node node)$/;"	f
socket	base/Line.cpp	/^Socket& PacketAddress::socket() const$/;"	f	class:PacketAddress
socketfd	infra/socket/Socket.h	/^			int32_t socketfd() const$/;"	f	class:infra::Socket
sort	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xpath_node_set::sort(bool reverse)$/;"	f	class:pugi::xpath_node_set
sort	infra/pugixml/pugixml.cpp	/^	template <typename I, typename Pred> void sort(I begin, I end, const Pred& pred)$/;"	f
sort_do	infra/pugixml/pugixml.cpp	/^		void sort_do()$/;"	f	class:xpath_node_set_raw
stack	infra/judy/Judy.h	/^    JudyStack stack[1];       \/\/ current cursor$/;"	m	struct:__anon5
stack	infra/pugixml/pugixml.cpp	/^		xpath_stack stack;$/;"	m	struct:xpath_stack_data	file:
start	base/FeedHandler.cpp	/^void FeedHandler::start(const Thread* _thread) const$/;"	f	class:FeedHandler
start	base/Line.cpp	/^void Line::start()$/;"	f	class:Line
start	base/LineGroup.cpp	/^void LineGroup::start()$/;"	f	class:LineGroup
start	base/MarketDataApplication.cpp	/^void MarketDataApplication::start()$/;"	f	class:MarketDataApplication
start	base/MarketDataApplication.cpp	/^void* MarketDataApplication::start(void *obj)$/;"	f	class:MarketDataApplication
start	base/NetworkReader.cpp	/^void NetworkReader::start()$/;"	f	class:NetworkReader
start	base/NetworkReader.cpp	/^void* NetworkReader::start(void *obj)$/;"	f	class:NetworkReader
start	base/Recorder.cpp	/^void Recorder::start()$/;"	f	class:Recorder
start	infra/thread/Thread.cpp	/^void Thread::start()$/;"	f	class:Thread
startFeedHandlers	base/MarketDataApplication.cpp	/^void MarketDataApplication::startFeedHandlers() const$/;"	f	class:MarketDataApplication
startLogger	infra/logger/Logger.cpp	/^void* Logger::startLogger(void *arg)$/;"	f	class:Logger
startNetworkReaders	base/MarketDataApplication.cpp	/^void MarketDataApplication::startNetworkReaders() const$/;"	f	class:MarketDataApplication
startWrapper	infra/thread/Thread.cpp	/^void Thread::startWrapper()$/;"	f	class:Thread
start_routine	infra/thread/Thread.h	/^	typedef void* (*start_routine)(void *);$/;"	t	namespace:infra
starts_with	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool starts_with(const char_t* string, const char_t* pattern)$/;"	f
state	infra/pugixml/pugixml.cpp	/^		const char_t* state() const$/;"	f	class:xpath_lexer
state	infra/thread/Thread.cpp	/^ThreadState Thread::state() const$/;"	f	class:Thread
stateName	infra/thread/Thread.cpp	/^const char* Thread::stateName() const$/;"	f	class:Thread
status	infra/pugixml/pugixml.h	/^		xml_parse_status status;$/;"	m	struct:pugi::xml_parse_result
status_append_invalid_root	infra/pugixml/docs/manual/modify.html	/^        <a name="status_append_invalid_root"><\/a>Since <code class="computeroutput"><span class="identifier">append_buffer<\/span><\/code>$/;"	a
status_append_invalid_root	infra/pugixml/pugixml.h	/^		status_append_invalid_root,	\/\/ Unable to append nodes since root type is not node_element or node_document (exclusive to xml_node::append_buffer)$/;"	e	enum:pugi::xml_parse_status
status_bad_attribute	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_attribute"><\/a><code class="literal">status_bad_attribute<\/code> means that$/;"	a
status_bad_attribute	infra/pugixml/pugixml.h	/^		status_bad_attribute,		\/\/ Parsing error occurred while parsing element attribute$/;"	e	enum:pugi::xml_parse_status
status_bad_cdata	infra/pugixml/pugixml.h	/^		status_bad_cdata,			\/\/ Parsing error occurred while parsing CDATA section$/;"	e	enum:pugi::xml_parse_status
status_bad_comment	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_comment"><\/a><code class="literal">status_bad_comment<\/code>, <a name="status_bad_cdata"><\/a><code class="literal">status_bad_cdata<\/code>,$/;"	a
status_bad_comment	infra/pugixml/pugixml.h	/^		status_bad_comment,			\/\/ Parsing error occurred while parsing comment$/;"	e	enum:pugi::xml_parse_status
status_bad_doctype	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_doctype"><\/a><code class="literal">status_bad_doctype<\/code> and <a name="status_bad_pcdata"><\/a><code class="literal">status_bad_pcdata<\/code>$/;"	a
status_bad_doctype	infra/pugixml/pugixml.h	/^		status_bad_doctype,			\/\/ Parsing error occurred while parsing document type declaration$/;"	e	enum:pugi::xml_parse_status
status_bad_end_element	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_end_element"><\/a><code class="literal">status_bad_end_element<\/code> means$/;"	a
status_bad_end_element	infra/pugixml/pugixml.h	/^		status_bad_end_element,		\/\/ Parsing error occurred while parsing end element tag$/;"	e	enum:pugi::xml_parse_status
status_bad_pcdata	infra/pugixml/pugixml.h	/^		status_bad_pcdata,			\/\/ Parsing error occurred while parsing PCDATA section$/;"	e	enum:pugi::xml_parse_status
status_bad_pi	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_pi"><\/a><code class="literal">status_bad_pi<\/code> means that parsing stopped$/;"	a
status_bad_pi	infra/pugixml/pugixml.h	/^		status_bad_pi,				\/\/ Parsing error occurred while parsing document declaration\/processing instruction$/;"	e	enum:pugi::xml_parse_status
status_bad_start_element	infra/pugixml/docs/manual/loading.html	/^            <a name="status_bad_start_element"><\/a><code class="literal">status_bad_start_element<\/code> means$/;"	a
status_bad_start_element	infra/pugixml/pugixml.h	/^		status_bad_start_element,	\/\/ Parsing error occurred while parsing start element tag$/;"	e	enum:pugi::xml_parse_status
status_end_element_mismatch	infra/pugixml/docs/manual/loading.html	/^            <a name="status_end_element_mismatch"><\/a><code class="literal">status_end_element_mismatch<\/code>$/;"	a
status_end_element_mismatch	infra/pugixml/pugixml.h	/^		status_end_element_mismatch,\/\/ There was a mismatch of start-end tags (closing tag had incorrect name, some tag was not closed or there was an excessive closing tag)$/;"	e	enum:pugi::xml_parse_status
status_file_not_found	infra/pugixml/docs/manual/loading.html	/^            <a name="status_file_not_found"><\/a><code class="literal">status_file_not_found<\/code> is only$/;"	a
status_file_not_found	infra/pugixml/pugixml.h	/^		status_file_not_found,		\/\/ File was not found during load_file()$/;"	e	enum:pugi::xml_parse_status
status_internal_error	infra/pugixml/docs/manual/loading.html	/^            <a name="status_internal_error"><\/a><code class="literal">status_internal_error<\/code> means that$/;"	a
status_internal_error	infra/pugixml/pugixml.h	/^		status_internal_error,		\/\/ Internal error occurred$/;"	e	enum:pugi::xml_parse_status
status_io_error	infra/pugixml/docs/manual/loading.html	/^            <a name="status_io_error"><\/a><code class="literal">status_io_error<\/code> is returned by <code class="computeroutput"><span class="identifier">load_file<\/span><\/code> function and by <code class="computeroutput"><span class="identifier">load<\/span><\/code> functions with <code class="computeroutput"><span class="identifier">std<\/span><span class="special">::<\/span><span class="identifier">istream<\/span><\/code>\/<code class="computeroutput"><span class="identifier">std<\/span><span class="special">::<\/span><span class="identifier">wstream<\/span><\/code> arguments; it means that some$/;"	a
status_io_error	infra/pugixml/pugixml.h	/^		status_io_error,			\/\/ Error reading from file\/stream$/;"	e	enum:pugi::xml_parse_status
status_no_document_element	infra/pugixml/docs/manual/loading.html	/^            <a name="status_no_document_element"><\/a><code class="literal">status_no_document_element<\/code>$/;"	a
status_no_document_element	infra/pugixml/pugixml.h	/^		status_no_document_element	\/\/ Parsing resulted in a document without element nodes$/;"	e	enum:pugi::xml_parse_status
status_ok	infra/pugixml/docs/manual/loading.html	/^            <a name="status_ok"><\/a><code class="literal">status_ok<\/code> means that no error was encountered$/;"	a
status_ok	infra/pugixml/pugixml.h	/^		status_ok = 0,				\/\/ No error$/;"	e	enum:pugi::xml_parse_status
status_out_of_memory	infra/pugixml/docs/manual/loading.html	/^            <a name="status_out_of_memory"><\/a><code class="literal">status_out_of_memory<\/code> means that$/;"	a
status_out_of_memory	infra/pugixml/pugixml.h	/^		status_out_of_memory,		\/\/ Could not allocate memory$/;"	e	enum:pugi::xml_parse_status
status_unrecognized_tag	infra/pugixml/docs/manual/loading.html	/^            <a name="status_unrecognized_tag"><\/a><code class="literal">status_unrecognized_tag<\/code> means$/;"	a
status_unrecognized_tag	infra/pugixml/pugixml.h	/^		status_unrecognized_tag,	\/\/ Parser could not determine tag type$/;"	e	enum:pugi::xml_parse_status
std	infra/pugixml/pugixml.cpp	/^namespace std$/;"	n	file:
std	infra/pugixml/pugixml.h	/^namespace std$/;"	n
step_do	infra/pugixml/pugixml.cpp	/^		template <class T> xpath_node_set_raw step_do(const xpath_context& c, const xpath_stack& stack, T v)$/;"	f	class:xpath_ast_node	file:
step_fill	infra/pugixml/pugixml.cpp	/^		template <class T> void step_fill(xpath_node_set_raw& ns, const xml_attribute& a, const xml_node& p, xpath_allocator* alloc, T v)$/;"	f	class:xpath_ast_node	file:
step_fill	infra/pugixml/pugixml.cpp	/^		template <class T> void step_fill(xpath_node_set_raw& ns, const xml_node& n, xpath_allocator* alloc, T)$/;"	f	class:xpath_ast_node	file:
step_push	infra/pugixml/pugixml.cpp	/^		void step_push(xpath_node_set_raw& ns, const xml_attribute& a, const xml_node& parent, xpath_allocator* alloc)$/;"	f	class:xpath_ast_node	file:
step_push	infra/pugixml/pugixml.cpp	/^		void step_push(xpath_node_set_raw& ns, const xml_node& n, xpath_allocator* alloc)$/;"	f	class:xpath_ast_node	file:
stop	base/FeedHandler.cpp	/^void FeedHandler::stop(const Thread* _thread) const$/;"	f	class:FeedHandler
stop	base/LineGroup.cpp	/^void LineGroup::stop()$/;"	f	class:LineGroup
stop	base/MarketDataApplication.cpp	/^void MarketDataApplication::stop()$/;"	f	class:MarketDataApplication
stop	base/NetworkReader.cpp	/^void NetworkReader::stop()$/;"	f	class:NetworkReader
stop	base/Recorder.cpp	/^void Recorder::stop()$/;"	f	class:Recorder
stop	infra/logger/Logger.cpp	/^void Logger::stop()$/;"	f	class:Logger
stop	infra/thread/Thread.cpp	/^void Thread::stop()$/;"	f	class:Thread
stopApp	base/MarketDataApplication.cpp	/^void MarketDataApplication::stopApp() const$/;"	f	class:MarketDataApplication
stopComponents	base/MarketDataApplication.cpp	/^void MarketDataApplication::stopComponents()$/;"	f	class:MarketDataApplication
strconv_attribute_impl	infra/pugixml/pugixml.cpp	/^	template <typename opt_escape> struct strconv_attribute_impl$/;"	s	file:
strconv_attribute_t	infra/pugixml/pugixml.cpp	/^	typedef char_t* (*strconv_attribute_t)(char_t*, char_t);$/;"	t	file:
strconv_cdata	infra/pugixml/pugixml.cpp	/^	PUGI__FN char_t* strconv_cdata(char_t* s, char_t endch)$/;"	f
strconv_comment	infra/pugixml/pugixml.cpp	/^	PUGI__FN char_t* strconv_comment(char_t* s, char_t endch)$/;"	f
strconv_escape	infra/pugixml/pugixml.cpp	/^	PUGI__FN char_t* strconv_escape(char_t* s, gap& g)$/;"	f
strconv_pcdata_impl	infra/pugixml/pugixml.cpp	/^	template <typename opt_trim, typename opt_eol, typename opt_escape> struct strconv_pcdata_impl$/;"	s	file:
strconv_pcdata_t	infra/pugixml/pugixml.cpp	/^	typedef char_t* (*strconv_pcdata_t)(char_t*);$/;"	t	file:
strcpy_insitu	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool strcpy_insitu(char_t*& dest, uintptr_t& header, uintptr_t header_mask, const char_t* source)$/;"	f
strcpy_insitu_allow	infra/pugixml/pugixml.cpp	/^	inline bool strcpy_insitu_allow(size_t length, uintptr_t allocated, char_t* target)$/;"	f
strequal	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool strequal(const char_t* src, const char_t* dst)$/;"	f
strequalrange	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool strequalrange(const char_t* lhs, const char_t* rhs, size_t count)$/;"	f
string	infra/pugixml/pugixml.cpp	/^			const char_t* string;$/;"	m	union:xpath_ast_node::__anon10	file:
string_t	infra/pugixml/pugixml.h	/^	typedef std::basic_string<PUGIXML_CHAR, std::char_traits<PUGIXML_CHAR>, std::allocator<PUGIXML_CHAR> > string_t;$/;"	t	namespace:pugi
string_value	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_string string_value(const xpath_node& na, xpath_allocator* alloc)$/;"	f
strlength	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t strlength(const char_t* s)$/;"	f
strlength_wide	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t strlength_wide(const wchar_t* s)$/;"	f
subscribe	base/FeedHandler.cpp	/^int32_t FeedHandler::subscribe(const char *symbol, Subscription **retSub)$/;"	f	class:FeedHandler
subscribe	base/FeedHandler.cpp	/^int32_t FeedHandler::subscribe(const uint64_t symbolID, Subscription **retSub)$/;"	f	class:FeedHandler
subscribe	base/MarketDataApplication.cpp	/^int32_t MarketDataApplication::subscribe(const char *feedName, const char *symbol, Subscription **sub) const$/;"	f	class:MarketDataApplication
subscribe	base/MarketDataApplication.cpp	/^int32_t MarketDataApplication::subscribe(const char *feedName, const uint64_t symbolID, Subscription **sub) const$/;"	f	class:MarketDataApplication
success	infra/judy/JudyL2Array.h	/^        bool success() {$/;"	f	class:judyL2Array
success	infra/judy/JudyLArray.h	/^        bool success() {$/;"	f	class:judyLArray
success	infra/judy/JudyS2Array.h	/^        bool success() {$/;"	f	class:judyS2Array
success	infra/judy/JudySArray.h	/^        bool success() {$/;"	f	class:judySArray
swap	infra/pugixml/pugixml.cpp	/^	template <typename T> void swap(T& lhs, T& rhs)$/;"	f
sync	infra/gzstream/gzstream.cpp	/^int gzstreambuf::sync() {$/;"	f	class:infra::gzstreambuf
tail_	infra/containers/spsc/BoostSPSCQueue.h	/^		std::atomic<uint64_t> head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
tail_	infra/containers/spsc/BoostSPSCQueue_with.h	/^		std::atomic<uint64_t> head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
tail_	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		uint64_t head_, tail_;$/;"	m	class:infra::BoostSPSCQueue
temp	infra/pugixml/pugixml.cpp	/^		xpath_allocator temp;$/;"	m	struct:xpath_stack_data	file:
temp	infra/pugixml/pugixml.cpp	/^		xpath_allocator* temp;$/;"	m	struct:xpath_stack	file:
text	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text xml_node::text() const$/;"	f	class:pugi::xml_node
text_output	infra/pugixml/pugixml.cpp	/^	PUGI__FN void text_output(xml_buffered_writer& writer, const char_t* s, chartypex_t type, unsigned int flags)$/;"	f
text_output_cdata	infra/pugixml/pugixml.cpp	/^	PUGI__FN void text_output_cdata(xml_buffered_writer& writer, const char_t* s)$/;"	f
text_output_escaped	infra/pugixml/pugixml.cpp	/^	PUGI__FN void text_output_escaped(xml_buffered_writer& writer, const char_t* s, chartypex_t type)$/;"	f
thread	infra/logger/Logger.cpp	/^Thread *Logger::thread() const$/;"	f	class:Logger
throw_error	infra/pugixml/pugixml.cpp	/^		void throw_error(const char* message)$/;"	f	struct:xpath_parser
throw_error_oom	infra/pugixml/pugixml.cpp	/^		void throw_error_oom()$/;"	f	struct:xpath_parser
toString	base/Line.cpp	/^const std::string IP::toString() const$/;"	f	class:IP
toString	base/Line.cpp	/^const std::string PacketAddress::toString() const$/;"	f	class:PacketAddress
to_string	base/BaseCommon.cpp	/^std::string ID::to_string() const$/;"	f	class:ID
tokenize	infra/utils/StringUtils.cpp	/^extern "C" std::vector<std::string> tokenize(std::string str, const char *delimeters)$/;"	f
tolower_ascii	infra/pugixml/pugixml.cpp	/^	PUGI__FN char_t tolower_ascii(char_t ch)$/;"	f
trademarks	infra/pugixml/docs/manual/install.html	/^          Visual Studio<a href="#ftn.trademarks" class="footnote" name="trademarks"><sup class="footnote">[1]<\/sup><\/a>, Apple Xcode, Code::Blocks or any other IDE, just add <code class="filename">pugixml.cpp<\/code> to$/;"	a
trademarks	infra/pugixml/docs/quickstart.html	/^        Studio<a href="#ftn.trademarks" class="footnote" name="trademarks"><sup class="footnote">[1]<\/sup><\/a>,$/;"	a
translate	infra/pugixml/pugixml.cpp	/^	PUGI__FN void translate(char_t* buffer, const char_t* from, const char_t* to)$/;"	f
traverse	infra/pugixml/pugixml.cpp	/^	PUGI__FN bool xml_node::traverse(xml_tree_walker& walker)$/;"	f	class:pugi::xml_node
truncate	infra/pugixml/pugixml.cpp	/^		void truncate(xpath_node* pos)$/;"	f	class:xpath_node_set_raw
truncate_zeros	infra/pugixml/pugixml.cpp	/^	PUGI__FN void truncate_zeros(char* begin, char* end)$/;"	f
try_imbue	infra/pugixml/docs/samples/load_stream.cpp	/^bool try_imbue(std::wistream& stream, const char* name)$/;"	f
type	base/BaseCommon.h	/^			IDType type() const {return _IDType;}$/;"	f	class:base::ID
type	base/Line.h	/^			int32_t type() const$/;"	f	class:base::IP
type	infra/pugixml/contrib/foreach.hpp	/^		typedef pugi::xml_document::iterator type;$/;"	t	struct:boost::range_const_iterator
type	infra/pugixml/contrib/foreach.hpp	/^		typedef pugi::xml_document::iterator type;$/;"	t	struct:boost::range_mutable_iterator
type	infra/pugixml/contrib/foreach.hpp	/^		typedef pugi::xml_node::iterator type;$/;"	t	struct:boost::range_const_iterator
type	infra/pugixml/contrib/foreach.hpp	/^		typedef pugi::xml_node::iterator type;$/;"	t	struct:boost::range_mutable_iterator
type	infra/pugixml/pugixml.cpp	/^		typedef uint16_t type;$/;"	t	struct:wchar_selector	file:
type	infra/pugixml/pugixml.cpp	/^		typedef uint32_t type;$/;"	t	struct:wchar_selector	file:
type	infra/pugixml/pugixml.cpp	/^		xpath_node_set::type_t type() const$/;"	f	class:xpath_node_set_raw
type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_type xml_node::type() const$/;"	f	class:pugi::xml_node
type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::type_t xpath_node_set::type() const$/;"	f	class:pugi::xpath_node_set
type	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_value_type xpath_variable::type() const$/;"	f	class:pugi::xpath_variable
type_sorted	infra/pugixml/pugixml.h	/^			type_sorted,			\/\/ Sorted by document order (ascending)$/;"	e	enum:pugi::xpath_node_set::type_t
type_sorted_reverse	infra/pugixml/pugixml.h	/^			type_sorted_reverse		\/\/ Sorted by document order (descending)$/;"	e	enum:pugi::xpath_node_set::type_t
type_t	infra/pugixml/pugixml.h	/^		enum type_t$/;"	g	class:pugi::xpath_node_set
type_unsorted	infra/pugixml/pugixml.h	/^			type_unsorted,			\/\/ Not ordered$/;"	e	enum:pugi::xpath_node_set::type_t
underflow	infra/gzstream/gzstream.cpp	/^int gzstreambuf::underflow() { \/\/ used for input buffer only$/;"	f	class:infra::gzstreambuf
unique	infra/pugixml/pugixml.cpp	/^	template <typename I> I unique(I begin, I end)$/;"	f
unspecified_bool_type	infra/pugixml/pugixml.h	/^		typedef void (*unspecified_bool_type)(xml_attribute***);$/;"	t	class:pugi::xml_attribute
unspecified_bool_type	infra/pugixml/pugixml.h	/^		typedef void (*unspecified_bool_type)(xml_node***);$/;"	t	class:pugi::xml_node
unspecified_bool_type	infra/pugixml/pugixml.h	/^		typedef void (*unspecified_bool_type)(xml_text***);$/;"	t	class:pugi::xml_text
unspecified_bool_type	infra/pugixml/pugixml.h	/^		typedef void (*unspecified_bool_type)(xpath_node***);$/;"	t	class:pugi::xpath_node
unspecified_bool_type	infra/pugixml/pugixml.h	/^		typedef void (*unspecified_bool_type)(xpath_query***);$/;"	t	class:pugi::xpath_query
unspecified_bool_xml_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_attribute(xml_attribute***)$/;"	f	namespace:pugi
unspecified_bool_xml_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_node(xml_node***)$/;"	f	namespace:pugi
unspecified_bool_xml_text	infra/pugixml/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xml_text(xml_text***)$/;"	f	namespace:pugi
unspecified_bool_xpath_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xpath_node(xpath_node***)$/;"	f	namespace:pugi
unspecified_bool_xpath_query	infra/pugixml/pugixml.cpp	/^	PUGI__FN static void unspecified_bool_xpath_query(xpath_query***)$/;"	f	namespace:pugi
update	base/Base.h	/^			inline void update(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, UpdateType type)$/;"	f	class:base::Base
update	base/Base.h	/^			inline void update(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:base::Base
update	base/Base.h	/^			inline void update(uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds)$/;"	f	class:base::Base
update	base/Status.h	/^inline void Status::update(Line *line, Subscription *sub, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, InstrState state)$/;"	f	class:Status
update	base/Trade.h	/^inline void Trade::update(Line *line, uint32_t msgType, uint64_t seqNo, uint32_t exSeconds, uint32_t exUSeconds, double px, uint32_t size, Side side, uint64_t tradeID)$/;"	f	class:Trade
updateIPVector	base/NetworkReader.cpp	/^void NetworkReader::updateIPVector()$/;"	f	class:NetworkReader
uses_heap	infra/pugixml/pugixml.cpp	/^		bool uses_heap() const$/;"	f	class:xpath_string
utf16_counter	infra/pugixml/pugixml.cpp	/^	struct utf16_counter$/;"	s	file:
utf16_writer	infra/pugixml/pugixml.cpp	/^	struct utf16_writer$/;"	s	file:
utf32_counter	infra/pugixml/pugixml.cpp	/^	struct utf32_counter$/;"	s	file:
utf32_writer	infra/pugixml/pugixml.cpp	/^	struct utf32_writer$/;"	s	file:
utf8_counter	infra/pugixml/pugixml.cpp	/^	struct utf8_counter$/;"	s	file:
utf8_writer	infra/pugixml/pugixml.cpp	/^	struct utf8_writer$/;"	s	file:
utf_decoder	infra/pugixml/pugixml.cpp	/^	template <typename Traits, typename opt_swap = opt_false> struct utf_decoder$/;"	s	file:
value	infra/judy/JudyL2Array.h	/^    vec value;$/;"	m	struct:judyl2KVpair
value	infra/judy/JudyLArray.h	/^    JudyValue value;$/;"	m	struct:judylKVpair
value	infra/judy/JudyS2Array.h	/^    JudyValue value;$/;"	m	struct:judys2KVpair
value	infra/judy/JudySArray.h	/^    JudyValue value;$/;"	m	struct:judysKVpair
value	infra/pugixml/pugixml.cpp	/^		bool value;$/;"	m	struct:xpath_variable_boolean	file:
value	infra/pugixml/pugixml.cpp	/^		char_t*					value;					\/\/\/< Pointer to any associated string data.$/;"	m	struct:pugi::xml_node_struct	file:
value	infra/pugixml/pugixml.cpp	/^		char_t*	value;	\/\/\/< Pointer to attribute value.$/;"	m	struct:pugi::xml_attribute_struct	file:
value	infra/pugixml/pugixml.cpp	/^		char_t* value;$/;"	m	struct:xpath_variable_string	file:
value	infra/pugixml/pugixml.cpp	/^		double value;$/;"	m	struct:xpath_variable_number	file:
value	infra/pugixml/pugixml.cpp	/^		enum { value = 0 };$/;"	e	enum:opt_false::__anon6	file:
value	infra/pugixml/pugixml.cpp	/^		enum { value = 1 };$/;"	e	enum:opt_true::__anon7	file:
value	infra/pugixml/pugixml.cpp	/^		xpath_node_set value;$/;"	m	struct:xpath_variable_node_set	file:
value	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_attribute::value() const$/;"	f	class:pugi::xml_attribute
value	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char_t* xml_node::value() const$/;"	f	class:pugi::xml_node
value_type	base/Book.h	/^			typedef T        value_type;$/;"	t	class:base::BookAlloc
value_type	infra/pugixml/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf16_counter	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf32_counter	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef size_t value_type;$/;"	t	struct:utf8_counter	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef uint16_t* value_type;$/;"	t	struct:utf16_writer	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef uint32_t* value_type;$/;"	t	struct:utf32_writer	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef uint8_t* value_type;$/;"	t	struct:latin1_writer	file:
value_type	infra/pugixml/pugixml.cpp	/^		typedef uint8_t* value_type;$/;"	t	struct:utf8_writer	file:
value_type	infra/pugixml/pugixml.h	/^		typedef xml_attribute value_type;$/;"	t	class:pugi::xml_attribute_iterator
value_type	infra/pugixml/pugixml.h	/^		typedef xml_node value_type;$/;"	t	class:pugi::xml_named_node_iterator
value_type	infra/pugixml/pugixml.h	/^		typedef xml_node value_type;$/;"	t	class:pugi::xml_node_iterator
variable	infra/pugixml/pugixml.cpp	/^			xpath_variable* variable;$/;"	m	union:xpath_ast_node::__anon10	file:
vector	infra/judy/JudyL2Array.h	/^        typedef std::vector< JudyValue > vector;$/;"	t	class:judyL2Array
vector	infra/judy/JudyS2Array.h	/^        typedef std::vector< JudyValue > vector;$/;"	t	class:judyS2Array
wchar_counter	infra/pugixml/pugixml.cpp	/^	typedef wchar_selector<sizeof(wchar_t)>::counter wchar_counter;$/;"	t	file:
wchar_selector	infra/pugixml/pugixml.cpp	/^	template <> struct wchar_selector<2>$/;"	s	file:
wchar_selector	infra/pugixml/pugixml.cpp	/^	template <> struct wchar_selector<4>$/;"	s	file:
wchar_writer	infra/pugixml/pugixml.cpp	/^	typedef wchar_selector<sizeof(wchar_t)>::writer wchar_writer;$/;"	t	file:
what	infra/pugixml/pugixml.cpp	/^	PUGI__FN const char* xpath_exception::what() const throw()$/;"	f	class:pugi::xpath_exception
wide_stream	infra/pugixml/pugixml.h	/^		std::basic_ostream<wchar_t, std::char_traits<wchar_t> >* wide_stream;$/;"	m	class:pugi::xml_writer_stream
widen_ascii	infra/pugixml/pugixml.cpp	/^	PUGI__FN void widen_ascii(wchar_t* dest, const char* source)$/;"	f
write	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    virtual void write(const void* data, size_t size)$/;"	f	struct:xml_memory_writer
write	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    virtual void write(const void* data, size_t size)$/;"	f	struct:xml_string_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0, char_t d1)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3, char_t d4)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(char_t d0, char_t d1, char_t d2, char_t d3, char_t d4, char_t d5)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(const char_t* data)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^		void write(const char_t* data, size_t length)$/;"	f	class:xml_buffered_writer
write	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_writer_file::write(const void* data, size_t size)$/;"	f	class:pugi::xml_writer_file
write	infra/pugixml/pugixml.cpp	/^	PUGI__FN void xml_writer_stream::write(const void* data, size_t size)$/;"	f	class:pugi::xml_writer_stream
writeLog	infra/logger/Logger.cpp	/^void Logger::writeLog(LogMessage *msg, uint32_t pid, uint32_t tid)$/;"	f	class:Logger
writer	infra/pugixml/pugixml.cpp	/^		typedef utf16_writer writer;$/;"	t	struct:wchar_selector	file:
writer	infra/pugixml/pugixml.cpp	/^		typedef utf32_writer writer;$/;"	t	struct:wchar_selector	file:
writer	infra/pugixml/pugixml.cpp	/^		xml_writer& writer;$/;"	m	class:xml_buffered_writer	file:
writtenElement	infra/containers/spsc/BoostSPSCQueue.h	/^		void writtenElement()$/;"	f	class:infra::BoostSPSCQueueElement
writtenElement	infra/containers/spsc/BoostSPSCQueue_with.h	/^		void writtenElement()$/;"	f	class:infra::BoostSPSCQueueElement
writtenElement	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		void writtenElement()$/;"	f	class:infra::BoostSPSCQueueElement
writtenElement	infra/containers/spsc/SPSCQueue.h	/^			void writtenElement()$/;"	f	class:infra::SPSCQueueElement
written_size	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    size_t written_size() const$/;"	f	struct:xml_memory_writer
xml_allocator	infra/pugixml/pugixml.cpp	/^		xml_allocator(xml_memory_page* root): _root(root), _busy_size(root->busy_size)$/;"	f	struct:xml_allocator
xml_allocator	infra/pugixml/pugixml.cpp	/^	struct xml_allocator$/;"	s	file:
xml_attribute	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_attribute"><\/a><code class="computeroutput"><span class="identifier">xml_attribute<\/span><\/code>$/;"	a
xml_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute::xml_attribute(): _attr(0)$/;"	f	class:pugi::xml_attribute
xml_attribute	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute::xml_attribute(xml_attribute_struct* attr): _attr(attr)$/;"	f	class:pugi::xml_attribute
xml_attribute	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_attribute$/;"	c	namespace:pugi
xml_attribute::as_int	infra/pugixml/docs/manual/access.html	/^        <a name="xml_attribute::as_int"><\/a><a name="xml_attribute::as_uint"><\/a><a name="xml_attribute::as_double"><\/a><a name="xml_attribute::as_float"><\/a><a name="xml_attribute::as_bool"><\/a><a name="xml_attribute::as_llong"><\/a><a name="xml_attribute::as_ullong"><\/a>In many cases attribute values have types$/;"	a
xml_attribute::as_string	infra/pugixml/docs/manual/access.html	/^        <a name="xml_attribute::as_string"><\/a>If you need a non-empty string if$/;"	a
xml_attribute::assign	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_attribute::assign"><\/a>For convenience, all <code class="computeroutput"><span class="identifier">set_value<\/span><\/code>$/;"	a
xml_attribute::comparison	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_attribute::comparison"><\/a><a name="xml_node::comparison"><\/a><code class="computeroutput"><span class="identifier">xml_node<\/span><\/code> and <code class="computeroutput"><span class="identifier">xml_attribute<\/span><\/code>$/;"	a
xml_attribute::ctor	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_attribute::ctor"><\/a><a name="xml_node::ctor"><\/a>Both <code class="computeroutput"><span class="identifier">xml_node<\/span><\/code> and <code class="computeroutput"><span class="identifier">xml_attribute<\/span><\/code>$/;"	a
xml_attribute::hash_value	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_attribute::hash_value"><\/a><a name="xml_node::hash_value"><\/a>If$/;"	a
xml_attribute::name	infra/pugixml/docs/manual/access.html	/^        <a name="xml_attribute::name"><\/a><a name="xml_attribute::value"><\/a>All$/;"	a
xml_attribute::set_name	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_attribute::set_name"><\/a><a name="xml_attribute::set_value"><\/a>All$/;"	a
xml_attribute::unspecified_bool_type	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_attribute::unspecified_bool_type"><\/a><a name="xml_node::unspecified_bool_type"><\/a><a name="xml_attribute::empty"><\/a><a name="xml_node::empty"><\/a>Finally handles$/;"	a
xml_attribute_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator()$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator(const xml_attribute& attr, const xml_node& parent): _wrap(attr), _parent(parent)$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_attribute_iterator::xml_attribute_iterator(xml_attribute_struct* ref, xml_node_struct* parent): _wrap(ref), _parent(parent)$/;"	f	class:pugi::xml_attribute_iterator
xml_attribute_iterator	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_attribute_iterator$/;"	c	namespace:pugi
xml_attribute_struct	infra/pugixml/pugixml.cpp	/^		xml_attribute_struct(impl::xml_memory_page* page): header(reinterpret_cast<uintptr_t>(page)), name(0), value(0), prev_attribute_c(0), next_attribute(0)$/;"	f	struct:pugi::xml_attribute_struct
xml_attribute_struct	infra/pugixml/pugixml.cpp	/^	struct xml_attribute_struct$/;"	s	namespace:pugi	file:
xml_buffered_writer	infra/pugixml/pugixml.cpp	/^		xml_buffered_writer(xml_writer& writer_, xml_encoding user_encoding): writer(writer_), bufsize(0), encoding(get_write_encoding(user_encoding))$/;"	f	class:xml_buffered_writer
xml_buffered_writer	infra/pugixml/pugixml.cpp	/^	class xml_buffered_writer$/;"	c	file:
xml_document	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_document"><\/a><a name="xml_document::document_element"><\/a><code class="computeroutput"><span class="identifier">xml_document<\/span><\/code> is the owner of the entire$/;"	a
xml_document	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_document::xml_document(): _buffer(0)$/;"	f	class:pugi::xml_document
xml_document	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_document: public xml_node$/;"	c	namespace:pugi
xml_document::ctor	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_document::ctor"><\/a><a name="xml_document::dtor"><\/a><a name="xml_document::reset"><\/a>Default constructor of <code class="computeroutput"><span class="identifier">xml_document<\/span><\/code>$/;"	a
xml_document::load_buffer	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_document::load_buffer"><\/a><a name="xml_document::load_buffer_inplace"><\/a><a name="xml_document::load_buffer_inplace_own"><\/a>Sometimes XML data should be$/;"	a
xml_document::load_file	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_document::load_file"><\/a><a name="xml_document::load_file_wide"><\/a>The$/;"	a
xml_document::load_stream	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_document::load_stream"><\/a>To enhance interoperability, pugixml$/;"	a
xml_document::load_string	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_document::load_string"><\/a>There is also a simple helper function$/;"	a
xml_document::save	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_document::save"><\/a><a name="xml_writer"><\/a><a name="xml_writer::write"><\/a>All$/;"	a
xml_document::save_file	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_document::save_file"><\/a><a name="xml_document::save_file_wide"><\/a>If$/;"	a
xml_document::save_stream	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_document::save_stream"><\/a>To enhance interoperability pugixml$/;"	a
xml_document_struct	infra/pugixml/pugixml.cpp	/^		xml_document_struct(xml_memory_page* page): xml_node_struct(page, node_document), xml_allocator(page), buffer(0), extra_buffers(0)$/;"	f	struct:xml_document_struct
xml_document_struct	infra/pugixml/pugixml.cpp	/^	struct xml_document_struct: public xml_node_struct, public xml_allocator$/;"	s	file:
xml_encoding	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_encoding"><\/a>pugixml supports all popular Unicode encodings$/;"	a
xml_encoding	infra/pugixml/pugixml.h	/^	enum xml_encoding$/;"	g	namespace:pugi
xml_extra_buffer	infra/pugixml/pugixml.cpp	/^	struct xml_extra_buffer$/;"	s	file:
xml_memory	infra/pugixml/pugixml.cpp	/^	typedef xml_memory_management_function_storage<int> xml_memory;$/;"	t	file:
xml_memory_management_function_storage	infra/pugixml/pugixml.cpp	/^	struct xml_memory_management_function_storage$/;"	s	file:
xml_memory_page	infra/pugixml/pugixml.cpp	/^	struct xml_memory_page$/;"	s	file:
xml_memory_page_alignment	infra/pugixml/pugixml.cpp	/^	static const uintptr_t xml_memory_page_alignment = 32;$/;"	v	file:
xml_memory_page_name_allocated_mask	infra/pugixml/pugixml.cpp	/^	static const uintptr_t xml_memory_page_name_allocated_mask = 16;$/;"	v	file:
xml_memory_page_pointer_mask	infra/pugixml/pugixml.cpp	/^	static const uintptr_t xml_memory_page_pointer_mask = ~(xml_memory_page_alignment - 1);$/;"	v	file:
xml_memory_page_size	infra/pugixml/pugixml.cpp	/^	static const size_t xml_memory_page_size =$/;"	v	file:
xml_memory_page_type_mask	infra/pugixml/pugixml.cpp	/^	static const uintptr_t xml_memory_page_type_mask = 7;$/;"	v	file:
xml_memory_page_value_allocated_mask	infra/pugixml/pugixml.cpp	/^	static const uintptr_t xml_memory_page_value_allocated_mask = 8;$/;"	v	file:
xml_memory_string_header	infra/pugixml/pugixml.cpp	/^	struct xml_memory_string_header$/;"	s	file:
xml_memory_writer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    xml_memory_writer(): buffer(0), capacity(0), result(0)$/;"	f	struct:xml_memory_writer
xml_memory_writer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^    xml_memory_writer(char* buffer, size_t capacity): buffer(buffer), capacity(capacity), result(0)$/;"	f	struct:xml_memory_writer
xml_memory_writer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^struct xml_memory_writer: pugi::xml_writer$/;"	s	file:
xml_named_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator::xml_named_node_iterator(): _name(0)$/;"	f	class:pugi::xml_named_node_iterator
xml_named_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator::xml_named_node_iterator(const xml_node& node, const char_t* name): _wrap(node), _parent(node.parent()), _name(name)$/;"	f	class:pugi::xml_named_node_iterator
xml_named_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_named_node_iterator::xml_named_node_iterator(xml_node_struct* ref, xml_node_struct* parent, const char_t* name): _wrap(ref), _parent(parent), _name(name)$/;"	f	class:pugi::xml_named_node_iterator
xml_named_node_iterator	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_named_node_iterator$/;"	c	namespace:pugi
xml_node	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_node"><\/a><a name="xml_node::type"><\/a><code class="computeroutput"><span class="identifier">xml_node<\/span><\/code>$/;"	a
xml_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::xml_node(): _root(0)$/;"	f	class:pugi::xml_node
xml_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node::xml_node(xml_node_struct* p): _root(p)$/;"	f	class:pugi::xml_node
xml_node	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_node$/;"	c	namespace:pugi
xml_node::append_buffer	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_node::append_buffer"><\/a>pugixml provides several ways to assemble$/;"	a
xml_node::child	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::child"><\/a><a name="xml_node::attribute"><\/a><a name="xml_node::next_sibling_name"><\/a><a name="xml_node::previous_sibling_name"><\/a>Since a lot of document traversal consists$/;"	a
xml_node::child_value	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::child_value"><\/a>It is common to store data as text contents$/;"	a
xml_node::children	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::children"><\/a><a name="xml_node::attributes"><\/a>If your$/;"	a
xml_node::find_attribute	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::find_attribute"><\/a><a name="xml_node::find_child"><\/a><a name="xml_node::find_node"><\/a>While there are existing functions for getting$/;"	a
xml_node::find_child_by_attribute	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::find_child_by_attribute"><\/a>Occasionally the needed node$/;"	a
xml_node::name	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::name"><\/a><a name="xml_node::value"><\/a>Apart from structural$/;"	a
xml_node::offset_debug	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::offset_debug"><\/a>pugixml does not record row\/column information$/;"	a
xml_node::parent	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::parent"><\/a><a name="xml_node::first_child"><\/a><a name="xml_node::last_child"><\/a><a name="xml_node::next_sibling"><\/a><a name="xml_node::previous_sibling"><\/a><a name="xml_node::first_attribute"><\/a><a name="xml_node::last_attribute"><\/a><a name="xml_attribute::next_attribute"><\/a><a name="xml_attribute::previous_attribute"><\/a>The$/;"	a
xml_node::path	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::path"><\/a><a name="xml_node::first_element_by_path"><\/a>While$/;"	a
xml_node::prepend_attribute	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_node::prepend_attribute"><\/a><a name="xml_node::append_attribute"><\/a><a name="xml_node::insert_attribute_after"><\/a><a name="xml_node::insert_attribute_before"><\/a><a name="xml_node::prepend_child"><\/a><a name="xml_node::append_child"><\/a><a name="xml_node::insert_child_after"><\/a><a name="xml_node::insert_child_before"><\/a>Nodes$/;"	a
xml_node::prepend_copy	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_node::prepend_copy"><\/a><a name="xml_node::append_copy"><\/a><a name="xml_node::insert_copy_after"><\/a><a name="xml_node::insert_copy_before"><\/a>With$/;"	a
xml_node::print	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_node::print"><\/a><a name="xml_node::print_stream"><\/a>While$/;"	a
xml_node::remove_attribute	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_node::remove_attribute"><\/a><a name="xml_node::remove_child"><\/a>If$/;"	a
xml_node::root	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::root"><\/a>If you need to get the document root of some$/;"	a
xml_node::select_single_node	infra/pugixml/docs/manual/xpath.html	/^        <a name="xml_node::select_single_node"><\/a><a name="xml_node::select_nodes"><\/a>If$/;"	a
xml_node::select_single_node_precomp	infra/pugixml/docs/manual/xpath.html	/^        <a name="xml_node::select_single_node_precomp"><\/a><a name="xml_node::select_nodes_precomp"><\/a>While$/;"	a
xml_node::set_name	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_node::set_name"><\/a><a name="xml_node::set_value"><\/a>As discussed$/;"	a
xml_node::text	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node::text"><\/a>You can get the text object from a node by using$/;"	a
xml_node_iterator	infra/pugixml/docs/manual/access.html	/^        <a name="xml_node_iterator"><\/a><a name="xml_attribute_iterator"><\/a><a name="xml_node::begin"><\/a><a name="xml_node::end"><\/a><a name="xml_node::attributes_begin"><\/a><a name="xml_node::attributes_end"><\/a>Child node lists and attribute lists are simply$/;"	a
xml_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator()$/;"	f	class:pugi::xml_node_iterator
xml_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator(const xml_node& node): _wrap(node), _parent(node.parent())$/;"	f	class:pugi::xml_node_iterator
xml_node_iterator	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_node_iterator::xml_node_iterator(xml_node_struct* ref, xml_node_struct* parent): _wrap(ref), _parent(parent)$/;"	f	class:pugi::xml_node_iterator
xml_node_iterator	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_node_iterator$/;"	c	namespace:pugi
xml_node_struct	infra/pugixml/pugixml.cpp	/^		xml_node_struct(impl::xml_memory_page* page, xml_node_type type): header(reinterpret_cast<uintptr_t>(page) | (type - 1)), parent(0), name(0), value(0), first_child(0), prev_sibling_c(0), next_sibling(0), first_attribute(0)$/;"	f	struct:pugi::xml_node_struct
xml_node_struct	infra/pugixml/pugixml.cpp	/^	struct xml_node_struct$/;"	s	namespace:pugi	file:
xml_node_type	infra/pugixml/docs/manual/dom.html	/^        <a name="xml_node_type"><\/a>The tree nodes can be of one of the following$/;"	a
xml_node_type	infra/pugixml/pugixml.h	/^	enum xml_node_type$/;"	g	namespace:pugi
xml_object_range	infra/pugixml/pugixml.h	/^		xml_object_range(It b, It e): _begin(b), _end(e)$/;"	f	class:pugi::xml_object_range
xml_object_range	infra/pugixml/pugixml.h	/^	template <typename It> class xml_object_range$/;"	c	namespace:pugi
xml_parse_result	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_result"><\/a>All document loading functions return the$/;"	a
xml_parse_result	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_parse_result::xml_parse_result(): status(status_internal_error), offset(0), encoding(encoding_auto)$/;"	f	class:pugi::xml_parse_result
xml_parse_result	infra/pugixml/pugixml.h	/^	struct PUGIXML_CLASS xml_parse_result$/;"	s	namespace:pugi
xml_parse_result::bool	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_result::bool"><\/a>Parsing result object can be implicitly$/;"	a
xml_parse_result::description	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_result::description"><\/a><code class="computeroutput"><span class="identifier">description<\/span><span class="special">()<\/span><\/code> member function can be used to convert$/;"	a
xml_parse_result::encoding	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_result::encoding"><\/a>Parsing result also has an <code class="computeroutput"><span class="identifier">encoding<\/span><\/code> member, which can be used to check$/;"	a
xml_parse_result::offset	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_result::offset"><\/a>In addition to the status code, parsing$/;"	a
xml_parse_status	infra/pugixml/docs/manual/loading.html	/^        <a name="xml_parse_status"><\/a><a name="xml_parse_result::status"><\/a>Parsing$/;"	a
xml_parse_status	infra/pugixml/pugixml.h	/^	enum xml_parse_status$/;"	g	namespace:pugi
xml_parser	infra/pugixml/pugixml.cpp	/^		xml_parser(const xml_allocator& alloc_): alloc(alloc_), error_offset(0), error_status(status_ok)$/;"	f	struct:xml_parser
xml_parser	infra/pugixml/pugixml.cpp	/^	struct xml_parser$/;"	s	file:
xml_stream_chunk	infra/pugixml/pugixml.cpp	/^		xml_stream_chunk(): next(0), size(0)$/;"	f	struct:xml_stream_chunk
xml_stream_chunk	infra/pugixml/pugixml.cpp	/^	template <typename T> struct xml_stream_chunk$/;"	s	file:
xml_string_writer	infra/pugixml/docs/samples/save_custom_writer.cpp	/^struct xml_string_writer: pugi::xml_writer$/;"	s	file:
xml_text	infra/pugixml/docs/manual/access.html	/^        <a name="xml_text"><\/a>It is common to store data as text contents of some$/;"	a
xml_text	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text::xml_text(): _root(0)$/;"	f	class:pugi::xml_text
xml_text	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_text::xml_text(xml_node_struct* root): _root(root)$/;"	f	class:pugi::xml_text
xml_text	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_text$/;"	c	namespace:pugi
xml_text::as_string	infra/pugixml/docs/manual/access.html	/^        <a name="xml_text::as_string"><\/a><a name="xml_text::as_int"><\/a><a name="xml_text::as_uint"><\/a><a name="xml_text::as_double"><\/a><a name="xml_text::as_float"><\/a><a name="xml_text::as_bool"><\/a><a name="xml_text::as_llong"><\/a><a name="xml_text::as_ullong"><\/a>If$/;"	a
xml_text::assign	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_text::assign"><\/a>For convenience, all <code class="computeroutput"><span class="identifier">set<\/span><\/code>$/;"	a
xml_text::data	infra/pugixml/docs/manual/access.html	/^        <a name="xml_text::data"><\/a><code class="computeroutput"><span class="identifier">xml_text<\/span><\/code>$/;"	a
xml_text::empty	infra/pugixml/docs/manual/access.html	/^        <a name="xml_text::empty"><\/a><a name="xml_text::unspecified_bool_type"><\/a>You$/;"	a
xml_text::get	infra/pugixml/docs/manual/access.html	/^        <a name="xml_text::get"><\/a>Given a text object, you can get the contents$/;"	a
xml_text::set	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_text::set"><\/a>Once you have an <code class="computeroutput"><span class="identifier">xml_text<\/span><\/code>$/;"	a
xml_text::set_value	infra/pugixml/docs/manual/modify.html	/^        <a name="xml_text::set_value"><\/a>In addition to a string function, several$/;"	a
xml_tree_walker	infra/pugixml/docs/manual/access.html	/^        <a name="xml_tree_walker"><\/a>The methods described above allow traversal$/;"	a
xml_tree_walker	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_tree_walker::xml_tree_walker(): _depth(0)$/;"	f	class:pugi::xml_tree_walker
xml_tree_walker	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_tree_walker$/;"	c	namespace:pugi
xml_tree_walker::begin	infra/pugixml/docs/manual/access.html	/^        <a name="xml_tree_walker::begin"><\/a><a name="xml_tree_walker::for_each"><\/a><a name="xml_tree_walker::end"><\/a><a name="xml_node::traverse"><\/a>The traversal$/;"	a
xml_tree_walker::depth	infra/pugixml/docs/manual/access.html	/^        <a name="xml_tree_walker::depth"><\/a>You can get the node's depth relative$/;"	a
xml_writer	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_writer$/;"	c	namespace:pugi
xml_writer_file	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_writer_file"><\/a><code class="computeroutput"><span class="identifier">save_file<\/span><\/code>$/;"	a
xml_writer_file	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_writer_file::xml_writer_file(void* file_): file(file_)$/;"	f	class:pugi::xml_writer_file
xml_writer_file	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_writer_file: public xml_writer$/;"	c	namespace:pugi
xml_writer_stream	infra/pugixml/docs/manual/saving.html	/^        <a name="xml_writer_stream"><\/a>Calling <code class="computeroutput"><span class="identifier">save<\/span><\/code>$/;"	a
xml_writer_stream	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_writer_stream::xml_writer_stream(std::basic_ostream<char, std::char_traits<char> >& stream): narrow_stream(&stream), wide_stream(0)$/;"	f	class:pugi::xml_writer_stream
xml_writer_stream	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_writer_stream::xml_writer_stream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& stream): narrow_stream(0), wide_stream(&stream)$/;"	f	class:pugi::xml_writer_stream
xml_writer_stream	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xml_writer_stream: public xml_writer$/;"	c	namespace:pugi
xpath_allocator	infra/pugixml/pugixml.cpp	/^		xpath_allocator(xpath_memory_block* root, size_t root_size = 0): _root(root), _root_size(root_size)$/;"	f	class:xpath_allocator
xpath_allocator	infra/pugixml/pugixml.cpp	/^	class xpath_allocator$/;"	c	file:
xpath_allocator_capture	infra/pugixml/pugixml.cpp	/^		xpath_allocator_capture(xpath_allocator* alloc): _target(alloc), _state(*alloc)$/;"	f	struct:xpath_allocator_capture
xpath_allocator_capture	infra/pugixml/pugixml.cpp	/^	struct xpath_allocator_capture$/;"	s	file:
xpath_ast_node	infra/pugixml/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_ast_node* left, axis_t axis, nodetest_t test, const char_t* contents):$/;"	f	class:xpath_ast_node
xpath_ast_node	infra/pugixml/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, const char_t* value):$/;"	f	class:xpath_ast_node
xpath_ast_node	infra/pugixml/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, double value):$/;"	f	class:xpath_ast_node
xpath_ast_node	infra/pugixml/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, xpath_ast_node* left = 0, xpath_ast_node* right = 0):$/;"	f	class:xpath_ast_node
xpath_ast_node	infra/pugixml/pugixml.cpp	/^		xpath_ast_node(ast_type_t type, xpath_value_type rettype_, xpath_variable* value):$/;"	f	class:xpath_ast_node
xpath_ast_node	infra/pugixml/pugixml.cpp	/^	class xpath_ast_node$/;"	c	file:
xpath_context	infra/pugixml/pugixml.cpp	/^		xpath_context(const xpath_node& n_, size_t position_, size_t size_): n(n_), position(position_), size(size_)$/;"	f	struct:xpath_context
xpath_context	infra/pugixml/pugixml.cpp	/^	struct xpath_context$/;"	s	file:
xpath_exception	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_exception"><\/a><a name="xpath_exception::result"><\/a><a name="xpath_exception::what"><\/a>By default, XPath functions throw <code class="computeroutput"><span class="identifier">xpath_exception<\/span><\/code> object in case of errors;$/;"	a
xpath_exception	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_exception::xpath_exception(const xpath_parse_result& result_): _result(result_)$/;"	f	class:pugi::xpath_exception
xpath_exception	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_exception: public std::exception$/;"	c	namespace:pugi
xpath_first	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node xpath_first(const xpath_node* begin, const xpath_node* end, xpath_node_set::type_t type)$/;"	f
xpath_lexer	infra/pugixml/pugixml.cpp	/^		explicit xpath_lexer(const char_t* query): _cur(query)$/;"	f	class:xpath_lexer
xpath_lexer	infra/pugixml/pugixml.cpp	/^	class xpath_lexer$/;"	c	file:
xpath_lexer_string	infra/pugixml/pugixml.cpp	/^		xpath_lexer_string(): begin(0), end(0)$/;"	f	struct:xpath_lexer_string
xpath_lexer_string	infra/pugixml/pugixml.cpp	/^	struct xpath_lexer_string$/;"	s	file:
xpath_memory_block	infra/pugixml/pugixml.cpp	/^	struct xpath_memory_block$/;"	s	file:
xpath_node	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node"><\/a><a name="xpath_node::node"><\/a><a name="xpath_node::attribute"><\/a><a name="xpath_node::parent"><\/a>Because an XPath node can be either a node or an$/;"	a
xpath_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node()$/;"	f	class:pugi::xpath_node
xpath_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node(const xml_attribute& attribute_, const xml_node& parent_): _node(attribute_ ? parent_ : xml_node()), _attribute(attribute_)$/;"	f	class:pugi::xpath_node
xpath_node	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node::xpath_node(const xml_node& node_): _node(node_)$/;"	f	class:pugi::xpath_node
xpath_node	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_node$/;"	c	namespace:pugi
xpath_node::ctor	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node::ctor"><\/a>You can also create XPath nodes with one of$/;"	a
xpath_node::unspecified_bool_type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node::unspecified_bool_type"><\/a><a name="xpath_node::comparison"><\/a>Like$/;"	a
xpath_node_set	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set"><\/a>XPath expressions operate not on single nodes,$/;"	a
xpath_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(): _type(type_unsorted), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(const xpath_node_set& ns): _type(ns._type), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::xpath_node_set(const_iterator begin_, const_iterator end_, type_t type_): _type(type_), _begin(&_storage), _end(&_storage)$/;"	f	class:pugi::xpath_node_set
xpath_node_set	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_node_set$/;"	c	namespace:pugi
xpath_node_set::const_iterator	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set::const_iterator"><\/a><a name="xpath_node_set::begin"><\/a><a name="xpath_node_set::end"><\/a>Node sets are represented by <code class="computeroutput"><span class="identifier">xpath_node_set<\/span><\/code>$/;"	a
xpath_node_set::ctor	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set::ctor"><\/a>While in the majority of cases the node$/;"	a
xpath_node_set::first	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set::first"><\/a>Often the actual iteration is not needed;$/;"	a
xpath_node_set::index	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set::index"><\/a><a name="xpath_node_set::size"><\/a><a name="xpath_node_set::empty"><\/a>And it also can be iterated via indices, just$/;"	a
xpath_node_set::type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_node_set::type"><\/a><a name="xpath_node_set::type_unsorted"><\/a><a name="xpath_node_set::type_sorted"><\/a><a name="xpath_node_set::type_sorted_reverse"><\/a><a name="xpath_node_set::sort"><\/a>The order of iteration depends on the order of$/;"	a
xpath_node_set_raw	infra/pugixml/pugixml.cpp	/^		xpath_node_set_raw(): _type(xpath_node_set::type_unsorted), _begin(0), _end(0), _eos(0)$/;"	f	class:xpath_node_set_raw
xpath_node_set_raw	infra/pugixml/pugixml.cpp	/^	class xpath_node_set_raw$/;"	c	file:
xpath_parse_result	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_parse_result"><\/a>The information about parsing result is$/;"	a
xpath_parse_result	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_parse_result::xpath_parse_result(): error("Internal error"), offset(0)$/;"	f	class:pugi::xpath_parse_result
xpath_parse_result	infra/pugixml/pugixml.h	/^	struct PUGIXML_CLASS xpath_parse_result$/;"	s	namespace:pugi
xpath_parse_result::bool	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_parse_result::bool"><\/a>Parsing result object can be implicitly$/;"	a
xpath_parse_result::description	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_parse_result::description"><\/a><code class="computeroutput"><span class="identifier">description<\/span><span class="special">()<\/span><\/code> member function can be used to get the$/;"	a
xpath_parse_result::error	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_parse_result::error"><\/a>Parsing result is represented as$/;"	a
xpath_parse_result::offset	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_parse_result::offset"><\/a>In addition to the error message,$/;"	a
xpath_parser	infra/pugixml/pugixml.cpp	/^		xpath_parser(const char_t* query, xpath_variable_set* variables, xpath_allocator* alloc, xpath_parse_result* result): _alloc(alloc), _lexer(query), _query(query), _variables(variables), _result(result)$/;"	f	struct:xpath_parser
xpath_parser	infra/pugixml/pugixml.cpp	/^	struct xpath_parser$/;"	s	file:
xpath_query	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query"><\/a>When you call <code class="computeroutput"><span class="identifier">select_nodes<\/span><\/code>$/;"	a
xpath_query	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_query::xpath_query(const char_t* query, xpath_variable_set* variables): _impl(0)$/;"	f	class:pugi::xpath_query
xpath_query	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_query$/;"	c	namespace:pugi
xpath_query::ctor	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query::ctor"><\/a>You can create a query object with the constructor$/;"	a
xpath_query::evaluate_boolean	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query::evaluate_boolean"><\/a><a name="xpath_query::evaluate_number"><\/a><a name="xpath_query::evaluate_string"><\/a><a name="xpath_query::evaluate_node_set"><\/a>You$/;"	a
xpath_query::evaluate_string_buffer	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query::evaluate_string_buffer"><\/a>Note that <code class="computeroutput"><span class="identifier">evaluate_string<\/span><\/code> function returns the STL$/;"	a
xpath_query::return_type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query::return_type"><\/a>The expression is compiled and the$/;"	a
xpath_query::unspecified_bool_type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_query::unspecified_bool_type"><\/a><a name="xpath_query::result"><\/a>If$/;"	a
xpath_query_impl	infra/pugixml/pugixml.cpp	/^		xpath_query_impl(): root(0), alloc(&block)$/;"	f	struct:xpath_query_impl
xpath_query_impl	infra/pugixml/pugixml.cpp	/^	struct xpath_query_impl$/;"	s	file:
xpath_sort	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::type_t xpath_sort(xpath_node* begin, xpath_node* end, xpath_node_set::type_t type, bool rev)$/;"	f
xpath_stack	infra/pugixml/pugixml.cpp	/^	struct xpath_stack$/;"	s	file:
xpath_stack_data	infra/pugixml/pugixml.cpp	/^		xpath_stack_data(): result(blocks + 0), temp(blocks + 1)$/;"	f	struct:xpath_stack_data
xpath_stack_data	infra/pugixml/pugixml.cpp	/^	struct xpath_stack_data$/;"	s	file:
xpath_string	infra/pugixml/pugixml.cpp	/^		explicit xpath_string(const char_t* str, bool use_heap): _buffer(str), _uses_heap(use_heap)$/;"	f	class:xpath_string
xpath_string	infra/pugixml/pugixml.cpp	/^		explicit xpath_string(const char_t* str, xpath_allocator* alloc)$/;"	f	class:xpath_string
xpath_string	infra/pugixml/pugixml.cpp	/^		xpath_string(): _buffer(PUGIXML_TEXT("")), _uses_heap(false)$/;"	f	class:xpath_string
xpath_string	infra/pugixml/pugixml.cpp	/^		xpath_string(const char_t* begin, const char_t* end, xpath_allocator* alloc)$/;"	f	class:xpath_string
xpath_string	infra/pugixml/pugixml.cpp	/^	class xpath_string$/;"	c	file:
xpath_string_const	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_string xpath_string_const(const char_t* str)$/;"	f
xpath_type_boolean	infra/pugixml/pugixml.h	/^		xpath_type_boolean	  \/\/ Boolean$/;"	e	enum:pugi::xpath_value_type
xpath_type_node_set	infra/pugixml/pugixml.h	/^		xpath_type_node_set,  \/\/ Node set (xpath_node_set)$/;"	e	enum:pugi::xpath_value_type
xpath_type_none	infra/pugixml/pugixml.h	/^		xpath_type_none,	  \/\/ Unknown type (query failed to compile)$/;"	e	enum:pugi::xpath_value_type
xpath_type_number	infra/pugixml/pugixml.h	/^		xpath_type_number,	  \/\/ Number$/;"	e	enum:pugi::xpath_value_type
xpath_type_string	infra/pugixml/pugixml.h	/^		xpath_type_string,	  \/\/ String$/;"	e	enum:pugi::xpath_value_type
xpath_value_type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_value_type"><\/a><a name="xpath_type_number"><\/a><a name="xpath_type_string"><\/a><a name="xpath_type_boolean"><\/a><a name="xpath_type_node_set"><\/a><a name="xpath_type_none"><\/a>Each$/;"	a
xpath_value_type	infra/pugixml/pugixml.h	/^	enum xpath_value_type$/;"	g	namespace:pugi
xpath_variable	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable"><\/a>If setting variables by name is not efficient$/;"	a
xpath_variable	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable::xpath_variable(): _type(xpath_type_none), _next(0)$/;"	f	class:pugi::xpath_variable
xpath_variable	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_variable$/;"	c	namespace:pugi
xpath_variable::get_boolean	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable::get_boolean"><\/a><a name="xpath_variable::get_number"><\/a><a name="xpath_variable::get_string"><\/a><a name="xpath_variable::get_node_set"><\/a>In$/;"	a
xpath_variable::set	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable::set"><\/a>In order to set variable value, you should$/;"	a
xpath_variable::type	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable::type"><\/a><a name="xpath_variable::name"><\/a>In$/;"	a
xpath_variable_boolean	infra/pugixml/pugixml.cpp	/^		xpath_variable_boolean(): value(false)$/;"	f	struct:xpath_variable_boolean
xpath_variable_boolean	infra/pugixml/pugixml.cpp	/^	struct xpath_variable_boolean: xpath_variable$/;"	s	file:
xpath_variable_node_set	infra/pugixml/pugixml.cpp	/^	struct xpath_variable_node_set: xpath_variable$/;"	s	file:
xpath_variable_number	infra/pugixml/pugixml.cpp	/^		xpath_variable_number(): value(0)$/;"	f	struct:xpath_variable_number
xpath_variable_number	infra/pugixml/pugixml.cpp	/^	struct xpath_variable_number: xpath_variable$/;"	s	file:
xpath_variable_set	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable_set"><\/a>Variable sets correspond to <code class="computeroutput"><span class="identifier">xpath_variable_set<\/span><\/code> type, which is essentially$/;"	a
xpath_variable_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable_set::xpath_variable_set()$/;"	f	class:pugi::xpath_variable_set
xpath_variable_set	infra/pugixml/pugixml.h	/^	class PUGIXML_CLASS xpath_variable_set$/;"	c	namespace:pugi
xpath_variable_set::add	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable_set::add"><\/a>You can add new variables with the$/;"	a
xpath_variable_set::get	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable_set::get"><\/a>You can get the existing variables$/;"	a
xpath_variable_set::set	infra/pugixml/docs/manual/xpath.html	/^        <a name="xpath_variable_set::set"><\/a>Additionally, there are the helper$/;"	a
xpath_variable_string	infra/pugixml/pugixml.cpp	/^		xpath_variable_string(): value(0)$/;"	f	struct:xpath_variable_string
xpath_variable_string	infra/pugixml/pugixml.cpp	/^	struct xpath_variable_string: xpath_variable$/;"	s	file:
zero_terminate_buffer	infra/pugixml/pugixml.cpp	/^	PUGI__FN size_t zero_terminate_buffer(void* buffer, size_t size, xml_encoding encoding) $/;"	f
~AtomicLock	infra/lock/Lock.cpp	/^AtomicLock<T>::~AtomicLock()$/;"	f	class:AtomicLock
~Base	base/Base.h	/^			inline ~Base()$/;"	f	class:base::Base
~BookAlloc	base/Book.h	/^			~BookAlloc() throw() {$/;"	f	class:base::BookAlloc
~BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue.h	/^		~BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
~BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_with.h	/^		~BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
~BoostSPSCQueueElement	infra/containers/spsc/BoostSPSCQueue_withoutAtomic.h	/^		~BoostSPSCQueueElement()$/;"	f	class:infra::BoostSPSCQueueElement
~FeedHandler	base/FeedHandler.cpp	/^FeedHandler::~FeedHandler()$/;"	f	class:FeedHandler
~ID	base/BaseCommon.cpp	/^ID::~ID()$/;"	f	class:ID
~Lock	infra/lock/Lock.cpp	/^Lock::~Lock()$/;"	f	class:Lock
~Logger	infra/logger/Logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~MarketDataApplication	base/MarketDataApplication.cpp	/^MarketDataApplication::~MarketDataApplication()$/;"	f	class:MarketDataApplication
~Message	base/Message.h	/^		~Message()$/;"	f	class:base::Message
~Order	base/Order.h	/^inline Order::~Order()$/;"	f	class:Order
~Packet	base/Packet.h	/^			~Packet()$/;"	f	class:base::Packet
~Recorder	base/Recorder.cpp	/^Recorder::~Recorder()$/;"	f	class:Recorder
~Recording	base/NetworkReader.cpp	/^Recording::~Recording()$/;"	f	class:Recording
~Socket	infra/socket/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~Thread	infra/thread/Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~Trade	base/Trade.h	/^inline Trade::~Trade()$/;"	f	class:Trade
~buffer_holder	infra/pugixml/pugixml.cpp	/^		~buffer_holder()$/;"	f	struct:buffer_holder
~gzstreambase	infra/gzstream/gzstream.cpp	/^gzstreambase::~gzstreambase() {$/;"	f	class:infra::gzstreambase
~gzstreambuf	infra/gzstream/gzstream.h	/^    ~gzstreambuf() { close(); }$/;"	f	class:infra::gzstreambuf
~judyL2Array	infra/judy/JudyL2Array.h	/^        ~judyL2Array() {$/;"	f	class:judyL2Array
~judyLArray	infra/judy/JudyLArray.h	/^        ~judyLArray() {$/;"	f	class:judyLArray
~judyS2Array	infra/judy/JudyS2Array.h	/^        ~judyS2Array() {$/;"	f	class:judyS2Array
~judySArray	infra/judy/JudySArray.h	/^        ~judySArray() {$/;"	f	class:judySArray
~xml_buffered_writer	infra/pugixml/pugixml.cpp	/^		~xml_buffered_writer()$/;"	f	class:xml_buffered_writer
~xml_document	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_document::~xml_document()$/;"	f	class:pugi::xml_document
~xml_tree_walker	infra/pugixml/pugixml.cpp	/^	PUGI__FN xml_tree_walker::~xml_tree_walker()$/;"	f	class:pugi::xml_tree_walker
~xml_writer	infra/pugixml/pugixml.h	/^		virtual ~xml_writer() {}$/;"	f	class:pugi::xml_writer
~xpath_allocator_capture	infra/pugixml/pugixml.cpp	/^		~xpath_allocator_capture()$/;"	f	struct:xpath_allocator_capture
~xpath_node_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_node_set::~xpath_node_set()$/;"	f	class:pugi::xpath_node_set
~xpath_query	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_query::~xpath_query()$/;"	f	class:pugi::xpath_query
~xpath_stack_data	infra/pugixml/pugixml.cpp	/^		~xpath_stack_data()$/;"	f	struct:xpath_stack_data
~xpath_variable_set	infra/pugixml/pugixml.cpp	/^	PUGI__FN xpath_variable_set::~xpath_variable_set()$/;"	f	class:pugi::xpath_variable_set
~xpath_variable_string	infra/pugixml/pugixml.cpp	/^		~xpath_variable_string()$/;"	f	struct:xpath_variable_string
